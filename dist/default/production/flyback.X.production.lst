

Microchip Technology PIC LITE Macro Assembler V1.38 build -256452561 
                                                                                               Mon Nov 14 16:03:12 2016

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	16F1709
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	stringtext,global,class=STRCODE,delta=2
     5                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     6                           	psect	nvBANK2,global,class=BANK2,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2
    21                           	psect	text7,local,class=CODE,merge=1,delta=2
    22                           	psect	text8,local,class=CODE,merge=1,delta=2
    23                           	psect	text9,local,class=CODE,merge=1,delta=2
    24                           	psect	text10,local,class=CODE,merge=1,delta=2
    25                           	psect	text11,local,class=CODE,merge=1,delta=2
    26                           	psect	text12,local,class=CODE,merge=1,delta=2
    27                           	psect	text13,local,class=CODE,merge=1,delta=2
    28                           	psect	text14,local,class=CODE,merge=1,delta=2
    29                           	psect	text15,local,class=CODE,merge=1,delta=2
    30                           	psect	text16,local,class=CODE,merge=1,delta=2
    31                           	psect	text17,local,class=CODE,merge=1,delta=2
    32                           	psect	text18,local,class=CODE,merge=1,delta=2
    33                           	psect	text19,local,class=CODE,merge=1,delta=2
    34                           	psect	text20,local,class=CODE,merge=1,delta=2
    35                           	psect	text21,local,class=CODE,merge=1,delta=2
    36                           	psect	text22,local,class=CODE,merge=1,delta=2
    37                           	psect	text23,local,class=CODE,merge=1,delta=2
    38                           	psect	text24,local,class=CODE,merge=1,delta=2
    39                           	psect	text25,local,class=CODE,merge=1,delta=2
    40                           	psect	text26,local,class=CODE,merge=1,delta=2
    41                           	psect	text27,local,class=CODE,merge=1,delta=2
    42                           	psect	text28,local,class=CODE,merge=1,delta=2
    43                           	psect	text29,local,class=CODE,merge=1,delta=2
    44                           	psect	text30,local,class=CODE,merge=1,delta=2
    45                           	psect	text31,local,class=CODE,merge=1,delta=2
    46                           	psect	text32,local,class=CODE,merge=1,delta=2
    47                           	psect	text33,local,class=CODE,merge=1,delta=2
    48                           	psect	text34,local,class=CODE,merge=1,delta=2
    49                           	psect	text35,local,class=CODE,merge=1,delta=2
    50                           	psect	text36,local,class=CODE,merge=1,delta=2
    51                           	psect	intentry,global,class=CODE,delta=2
    52                           	dabs	1,0x7E,2
    53  0000                     	;# 
    54  0001                     	;# 
    55  0002                     	;# 
    56  0003                     	;# 
    57  0004                     	;# 
    58  0005                     	;# 
    59  0006                     	;# 
    60  0007                     	;# 
    61  0008                     	;# 
    62  0009                     	;# 
    63  000A                     	;# 
    64  000B                     	;# 
    65  000C                     	;# 
    66  000D                     	;# 
    67  000E                     	;# 
    68  0011                     	;# 
    69  0012                     	;# 
    70  0013                     	;# 
    71  0015                     	;# 
    72  0016                     	;# 
    73  0016                     	;# 
    74  0017                     	;# 
    75  0018                     	;# 
    76  0019                     	;# 
    77  001A                     	;# 
    78  001B                     	;# 
    79  001C                     	;# 
    80  008C                     	;# 
    81  008D                     	;# 
    82  008E                     	;# 
    83  0091                     	;# 
    84  0092                     	;# 
    85  0093                     	;# 
    86  0095                     	;# 
    87  0096                     	;# 
    88  0097                     	;# 
    89  0098                     	;# 
    90  0099                     	;# 
    91  009A                     	;# 
    92  009B                     	;# 
    93  009B                     	;# 
    94  009C                     	;# 
    95  009D                     	;# 
    96  009E                     	;# 
    97  009F                     	;# 
    98  010C                     	;# 
    99  010D                     	;# 
   100  010E                     	;# 
   101  0111                     	;# 
   102  0112                     	;# 
   103  0113                     	;# 
   104  0114                     	;# 
   105  0115                     	;# 
   106  0116                     	;# 
   107  0117                     	;# 
   108  0118                     	;# 
   109  0119                     	;# 
   110  011C                     	;# 
   111  018C                     	;# 
   112  018D                     	;# 
   113  018E                     	;# 
   114  0191                     	;# 
   115  0191                     	;# 
   116  0192                     	;# 
   117  0193                     	;# 
   118  0193                     	;# 
   119  0194                     	;# 
   120  0195                     	;# 
   121  0196                     	;# 
   122  0197                     	;# 
   123  0199                     	;# 
   124  0199                     	;# 
   125  0199                     	;# 
   126  019A                     	;# 
   127  019A                     	;# 
   128  019A                     	;# 
   129  019B                     	;# 
   130  019B                     	;# 
   131  019B                     	;# 
   132  019B                     	;# 
   133  019B                     	;# 
   134  019C                     	;# 
   135  019C                     	;# 
   136  019C                     	;# 
   137  019D                     	;# 
   138  019D                     	;# 
   139  019D                     	;# 
   140  019E                     	;# 
   141  019E                     	;# 
   142  019E                     	;# 
   143  019F                     	;# 
   144  019F                     	;# 
   145  019F                     	;# 
   146  019F                     	;# 
   147  019F                     	;# 
   148  020C                     	;# 
   149  020D                     	;# 
   150  020E                     	;# 
   151  0211                     	;# 
   152  0211                     	;# 
   153  0212                     	;# 
   154  0212                     	;# 
   155  0213                     	;# 
   156  0213                     	;# 
   157  0214                     	;# 
   158  0214                     	;# 
   159  0215                     	;# 
   160  0215                     	;# 
   161  0215                     	;# 
   162  0215                     	;# 
   163  0216                     	;# 
   164  0216                     	;# 
   165  0217                     	;# 
   166  0217                     	;# 
   167  028C                     	;# 
   168  028D                     	;# 
   169  028E                     	;# 
   170  0291                     	;# 
   171  0291                     	;# 
   172  0292                     	;# 
   173  0293                     	;# 
   174  0293                     	;# 
   175  0298                     	;# 
   176  0298                     	;# 
   177  0299                     	;# 
   178  029A                     	;# 
   179  029A                     	;# 
   180  029E                     	;# 
   181  030C                     	;# 
   182  030D                     	;# 
   183  030E                     	;# 
   184  038C                     	;# 
   185  038D                     	;# 
   186  038E                     	;# 
   187  0391                     	;# 
   188  0392                     	;# 
   189  0393                     	;# 
   190  0394                     	;# 
   191  0395                     	;# 
   192  0396                     	;# 
   193  0397                     	;# 
   194  0398                     	;# 
   195  0399                     	;# 
   196  0415                     	;# 
   197  0416                     	;# 
   198  0417                     	;# 
   199  041C                     	;# 
   200  041D                     	;# 
   201  041E                     	;# 
   202  0511                     	;# 
   203  0515                     	;# 
   204  0617                     	;# 
   205  0618                     	;# 
   206  0619                     	;# 
   207  0619                     	;# 
   208  061A                     	;# 
   209  061B                     	;# 
   210  061C                     	;# 
   211  061C                     	;# 
   212  0691                     	;# 
   213  0692                     	;# 
   214  0693                     	;# 
   215  0694                     	;# 
   216  0695                     	;# 
   217  0696                     	;# 
   218  0697                     	;# 
   219  0698                     	;# 
   220  0699                     	;# 
   221  069A                     	;# 
   222  069B                     	;# 
   223  069C                     	;# 
   224  069D                     	;# 
   225  069E                     	;# 
   226  069F                     	;# 
   227  0E0F                     	;# 
   228  0E10                     	;# 
   229  0E11                     	;# 
   230  0E12                     	;# 
   231  0E13                     	;# 
   232  0E14                     	;# 
   233  0E15                     	;# 
   234  0E17                     	;# 
   235  0E20                     	;# 
   236  0E21                     	;# 
   237  0E22                     	;# 
   238  0E24                     	;# 
   239  0E25                     	;# 
   240  0E28                     	;# 
   241  0E29                     	;# 
   242  0E2A                     	;# 
   243  0E2B                     	;# 
   244  0E90                     	;# 
   245  0E91                     	;# 
   246  0E92                     	;# 
   247  0E94                     	;# 
   248  0E95                     	;# 
   249  0E9C                     	;# 
   250  0E9D                     	;# 
   251  0E9E                     	;# 
   252  0E9F                     	;# 
   253  0EA0                     	;# 
   254  0EA1                     	;# 
   255  0EA2                     	;# 
   256  0EA3                     	;# 
   257  0EA4                     	;# 
   258  0EA5                     	;# 
   259  0EA6                     	;# 
   260  0EA7                     	;# 
   261  0F0F                     	;# 
   262  0F10                     	;# 
   263  0F11                     	;# 
   264  0F12                     	;# 
   265  0F13                     	;# 
   266  0F14                     	;# 
   267  0F15                     	;# 
   268  0F16                     	;# 
   269  0F17                     	;# 
   270  0F18                     	;# 
   271  0F19                     	;# 
   272  0F1A                     	;# 
   273  0F1B                     	;# 
   274  0F1C                     	;# 
   275  0F1D                     	;# 
   276  0F1E                     	;# 
   277  0F1F                     	;# 
   278  0F20                     	;# 
   279  0F21                     	;# 
   280  0F22                     	;# 
   281  0F23                     	;# 
   282  0F24                     	;# 
   283  0F25                     	;# 
   284  0F26                     	;# 
   285  0F27                     	;# 
   286  0F28                     	;# 
   287  0F29                     	;# 
   288  0F2A                     	;# 
   289  0F2B                     	;# 
   290  0F2C                     	;# 
   291  0F2D                     	;# 
   292  0F9E                     	;# 
   293  0FE4                     	;# 
   294  0FE5                     	;# 
   295  0FE6                     	;# 
   296  0FE7                     	;# 
   297  0FE8                     	;# 
   298  0FE9                     	;# 
   299  0FEA                     	;# 
   300  0FEB                     	;# 
   301  0FED                     	;# 
   302  0FEE                     	;# 
   303  0FEF                     	;# 
   304  0000                     	;# 
   305  0001                     	;# 
   306  0002                     	;# 
   307  0003                     	;# 
   308  0004                     	;# 
   309  0005                     	;# 
   310  0006                     	;# 
   311  0007                     	;# 
   312  0008                     	;# 
   313  0009                     	;# 
   314  000A                     	;# 
   315  000B                     	;# 
   316  000C                     	;# 
   317  000D                     	;# 
   318  000E                     	;# 
   319  0011                     	;# 
   320  0012                     	;# 
   321  0013                     	;# 
   322  0015                     	;# 
   323  0016                     	;# 
   324  0016                     	;# 
   325  0017                     	;# 
   326  0018                     	;# 
   327  0019                     	;# 
   328  001A                     	;# 
   329  001B                     	;# 
   330  001C                     	;# 
   331  008C                     	;# 
   332  008D                     	;# 
   333  008E                     	;# 
   334  0091                     	;# 
   335  0092                     	;# 
   336  0093                     	;# 
   337  0095                     	;# 
   338  0096                     	;# 
   339  0097                     	;# 
   340  0098                     	;# 
   341  0099                     	;# 
   342  009A                     	;# 
   343  009B                     	;# 
   344  009B                     	;# 
   345  009C                     	;# 
   346  009D                     	;# 
   347  009E                     	;# 
   348  009F                     	;# 
   349  010C                     	;# 
   350  010D                     	;# 
   351  010E                     	;# 
   352  0111                     	;# 
   353  0112                     	;# 
   354  0113                     	;# 
   355  0114                     	;# 
   356  0115                     	;# 
   357  0116                     	;# 
   358  0117                     	;# 
   359  0118                     	;# 
   360  0119                     	;# 
   361  011C                     	;# 
   362  018C                     	;# 
   363  018D                     	;# 
   364  018E                     	;# 
   365  0191                     	;# 
   366  0191                     	;# 
   367  0192                     	;# 
   368  0193                     	;# 
   369  0193                     	;# 
   370  0194                     	;# 
   371  0195                     	;# 
   372  0196                     	;# 
   373  0197                     	;# 
   374  0199                     	;# 
   375  0199                     	;# 
   376  0199                     	;# 
   377  019A                     	;# 
   378  019A                     	;# 
   379  019A                     	;# 
   380  019B                     	;# 
   381  019B                     	;# 
   382  019B                     	;# 
   383  019B                     	;# 
   384  019B                     	;# 
   385  019C                     	;# 
   386  019C                     	;# 
   387  019C                     	;# 
   388  019D                     	;# 
   389  019D                     	;# 
   390  019D                     	;# 
   391  019E                     	;# 
   392  019E                     	;# 
   393  019E                     	;# 
   394  019F                     	;# 
   395  019F                     	;# 
   396  019F                     	;# 
   397  019F                     	;# 
   398  019F                     	;# 
   399  020C                     	;# 
   400  020D                     	;# 
   401  020E                     	;# 
   402  0211                     	;# 
   403  0211                     	;# 
   404  0212                     	;# 
   405  0212                     	;# 
   406  0213                     	;# 
   407  0213                     	;# 
   408  0214                     	;# 
   409  0214                     	;# 
   410  0215                     	;# 
   411  0215                     	;# 
   412  0215                     	;# 
   413  0215                     	;# 
   414  0216                     	;# 
   415  0216                     	;# 
   416  0217                     	;# 
   417  0217                     	;# 
   418  028C                     	;# 
   419  028D                     	;# 
   420  028E                     	;# 
   421  0291                     	;# 
   422  0291                     	;# 
   423  0292                     	;# 
   424  0293                     	;# 
   425  0293                     	;# 
   426  0298                     	;# 
   427  0298                     	;# 
   428  0299                     	;# 
   429  029A                     	;# 
   430  029A                     	;# 
   431  029E                     	;# 
   432  030C                     	;# 
   433  030D                     	;# 
   434  030E                     	;# 
   435  038C                     	;# 
   436  038D                     	;# 
   437  038E                     	;# 
   438  0391                     	;# 
   439  0392                     	;# 
   440  0393                     	;# 
   441  0394                     	;# 
   442  0395                     	;# 
   443  0396                     	;# 
   444  0397                     	;# 
   445  0398                     	;# 
   446  0399                     	;# 
   447  0415                     	;# 
   448  0416                     	;# 
   449  0417                     	;# 
   450  041C                     	;# 
   451  041D                     	;# 
   452  041E                     	;# 
   453  0511                     	;# 
   454  0515                     	;# 
   455  0617                     	;# 
   456  0618                     	;# 
   457  0619                     	;# 
   458  0619                     	;# 
   459  061A                     	;# 
   460  061B                     	;# 
   461  061C                     	;# 
   462  061C                     	;# 
   463  0691                     	;# 
   464  0692                     	;# 
   465  0693                     	;# 
   466  0694                     	;# 
   467  0695                     	;# 
   468  0696                     	;# 
   469  0697                     	;# 
   470  0698                     	;# 
   471  0699                     	;# 
   472  069A                     	;# 
   473  069B                     	;# 
   474  069C                     	;# 
   475  069D                     	;# 
   476  069E                     	;# 
   477  069F                     	;# 
   478  0E0F                     	;# 
   479  0E10                     	;# 
   480  0E11                     	;# 
   481  0E12                     	;# 
   482  0E13                     	;# 
   483  0E14                     	;# 
   484  0E15                     	;# 
   485  0E17                     	;# 
   486  0E20                     	;# 
   487  0E21                     	;# 
   488  0E22                     	;# 
   489  0E24                     	;# 
   490  0E25                     	;# 
   491  0E28                     	;# 
   492  0E29                     	;# 
   493  0E2A                     	;# 
   494  0E2B                     	;# 
   495  0E90                     	;# 
   496  0E91                     	;# 
   497  0E92                     	;# 
   498  0E94                     	;# 
   499  0E95                     	;# 
   500  0E9C                     	;# 
   501  0E9D                     	;# 
   502  0E9E                     	;# 
   503  0E9F                     	;# 
   504  0EA0                     	;# 
   505  0EA1                     	;# 
   506  0EA2                     	;# 
   507  0EA3                     	;# 
   508  0EA4                     	;# 
   509  0EA5                     	;# 
   510  0EA6                     	;# 
   511  0EA7                     	;# 
   512  0F0F                     	;# 
   513  0F10                     	;# 
   514  0F11                     	;# 
   515  0F12                     	;# 
   516  0F13                     	;# 
   517  0F14                     	;# 
   518  0F15                     	;# 
   519  0F16                     	;# 
   520  0F17                     	;# 
   521  0F18                     	;# 
   522  0F19                     	;# 
   523  0F1A                     	;# 
   524  0F1B                     	;# 
   525  0F1C                     	;# 
   526  0F1D                     	;# 
   527  0F1E                     	;# 
   528  0F1F                     	;# 
   529  0F20                     	;# 
   530  0F21                     	;# 
   531  0F22                     	;# 
   532  0F23                     	;# 
   533  0F24                     	;# 
   534  0F25                     	;# 
   535  0F26                     	;# 
   536  0F27                     	;# 
   537  0F28                     	;# 
   538  0F29                     	;# 
   539  0F2A                     	;# 
   540  0F2B                     	;# 
   541  0F2C                     	;# 
   542  0F2D                     	;# 
   543  0F9E                     	;# 
   544  0FE4                     	;# 
   545  0FE5                     	;# 
   546  0FE6                     	;# 
   547  0FE7                     	;# 
   548  0FE8                     	;# 
   549  0FE9                     	;# 
   550  0FEA                     	;# 
   551  0FEB                     	;# 
   552  0FED                     	;# 
   553  0FEE                     	;# 
   554  0FEF                     	;# 
   555  0000                     	;# 
   556  0001                     	;# 
   557  0002                     	;# 
   558  0003                     	;# 
   559  0004                     	;# 
   560  0005                     	;# 
   561  0006                     	;# 
   562  0007                     	;# 
   563  0008                     	;# 
   564  0009                     	;# 
   565  000A                     	;# 
   566  000B                     	;# 
   567  000C                     	;# 
   568  000D                     	;# 
   569  000E                     	;# 
   570  0011                     	;# 
   571  0012                     	;# 
   572  0013                     	;# 
   573  0015                     	;# 
   574  0016                     	;# 
   575  0016                     	;# 
   576  0017                     	;# 
   577  0018                     	;# 
   578  0019                     	;# 
   579  001A                     	;# 
   580  001B                     	;# 
   581  001C                     	;# 
   582  008C                     	;# 
   583  008D                     	;# 
   584  008E                     	;# 
   585  0091                     	;# 
   586  0092                     	;# 
   587  0093                     	;# 
   588  0095                     	;# 
   589  0096                     	;# 
   590  0097                     	;# 
   591  0098                     	;# 
   592  0099                     	;# 
   593  009A                     	;# 
   594  009B                     	;# 
   595  009B                     	;# 
   596  009C                     	;# 
   597  009D                     	;# 
   598  009E                     	;# 
   599  009F                     	;# 
   600  010C                     	;# 
   601  010D                     	;# 
   602  010E                     	;# 
   603  0111                     	;# 
   604  0112                     	;# 
   605  0113                     	;# 
   606  0114                     	;# 
   607  0115                     	;# 
   608  0116                     	;# 
   609  0117                     	;# 
   610  0118                     	;# 
   611  0119                     	;# 
   612  011C                     	;# 
   613  018C                     	;# 
   614  018D                     	;# 
   615  018E                     	;# 
   616  0191                     	;# 
   617  0191                     	;# 
   618  0192                     	;# 
   619  0193                     	;# 
   620  0193                     	;# 
   621  0194                     	;# 
   622  0195                     	;# 
   623  0196                     	;# 
   624  0197                     	;# 
   625  0199                     	;# 
   626  0199                     	;# 
   627  0199                     	;# 
   628  019A                     	;# 
   629  019A                     	;# 
   630  019A                     	;# 
   631  019B                     	;# 
   632  019B                     	;# 
   633  019B                     	;# 
   634  019B                     	;# 
   635  019B                     	;# 
   636  019C                     	;# 
   637  019C                     	;# 
   638  019C                     	;# 
   639  019D                     	;# 
   640  019D                     	;# 
   641  019D                     	;# 
   642  019E                     	;# 
   643  019E                     	;# 
   644  019E                     	;# 
   645  019F                     	;# 
   646  019F                     	;# 
   647  019F                     	;# 
   648  019F                     	;# 
   649  019F                     	;# 
   650  020C                     	;# 
   651  020D                     	;# 
   652  020E                     	;# 
   653  0211                     	;# 
   654  0211                     	;# 
   655  0212                     	;# 
   656  0212                     	;# 
   657  0213                     	;# 
   658  0213                     	;# 
   659  0214                     	;# 
   660  0214                     	;# 
   661  0215                     	;# 
   662  0215                     	;# 
   663  0215                     	;# 
   664  0215                     	;# 
   665  0216                     	;# 
   666  0216                     	;# 
   667  0217                     	;# 
   668  0217                     	;# 
   669  028C                     	;# 
   670  028D                     	;# 
   671  028E                     	;# 
   672  0291                     	;# 
   673  0291                     	;# 
   674  0292                     	;# 
   675  0293                     	;# 
   676  0293                     	;# 
   677  0298                     	;# 
   678  0298                     	;# 
   679  0299                     	;# 
   680  029A                     	;# 
   681  029A                     	;# 
   682  029E                     	;# 
   683  030C                     	;# 
   684  030D                     	;# 
   685  030E                     	;# 
   686  038C                     	;# 
   687  038D                     	;# 
   688  038E                     	;# 
   689  0391                     	;# 
   690  0392                     	;# 
   691  0393                     	;# 
   692  0394                     	;# 
   693  0395                     	;# 
   694  0396                     	;# 
   695  0397                     	;# 
   696  0398                     	;# 
   697  0399                     	;# 
   698  0415                     	;# 
   699  0416                     	;# 
   700  0417                     	;# 
   701  041C                     	;# 
   702  041D                     	;# 
   703  041E                     	;# 
   704  0511                     	;# 
   705  0515                     	;# 
   706  0617                     	;# 
   707  0618                     	;# 
   708  0619                     	;# 
   709  0619                     	;# 
   710  061A                     	;# 
   711  061B                     	;# 
   712  061C                     	;# 
   713  061C                     	;# 
   714  0691                     	;# 
   715  0692                     	;# 
   716  0693                     	;# 
   717  0694                     	;# 
   718  0695                     	;# 
   719  0696                     	;# 
   720  0697                     	;# 
   721  0698                     	;# 
   722  0699                     	;# 
   723  069A                     	;# 
   724  069B                     	;# 
   725  069C                     	;# 
   726  069D                     	;# 
   727  069E                     	;# 
   728  069F                     	;# 
   729  0E0F                     	;# 
   730  0E10                     	;# 
   731  0E11                     	;# 
   732  0E12                     	;# 
   733  0E13                     	;# 
   734  0E14                     	;# 
   735  0E15                     	;# 
   736  0E17                     	;# 
   737  0E20                     	;# 
   738  0E21                     	;# 
   739  0E22                     	;# 
   740  0E24                     	;# 
   741  0E25                     	;# 
   742  0E28                     	;# 
   743  0E29                     	;# 
   744  0E2A                     	;# 
   745  0E2B                     	;# 
   746  0E90                     	;# 
   747  0E91                     	;# 
   748  0E92                     	;# 
   749  0E94                     	;# 
   750  0E95                     	;# 
   751  0E9C                     	;# 
   752  0E9D                     	;# 
   753  0E9E                     	;# 
   754  0E9F                     	;# 
   755  0EA0                     	;# 
   756  0EA1                     	;# 
   757  0EA2                     	;# 
   758  0EA3                     	;# 
   759  0EA4                     	;# 
   760  0EA5                     	;# 
   761  0EA6                     	;# 
   762  0EA7                     	;# 
   763  0F0F                     	;# 
   764  0F10                     	;# 
   765  0F11                     	;# 
   766  0F12                     	;# 
   767  0F13                     	;# 
   768  0F14                     	;# 
   769  0F15                     	;# 
   770  0F16                     	;# 
   771  0F17                     	;# 
   772  0F18                     	;# 
   773  0F19                     	;# 
   774  0F1A                     	;# 
   775  0F1B                     	;# 
   776  0F1C                     	;# 
   777  0F1D                     	;# 
   778  0F1E                     	;# 
   779  0F1F                     	;# 
   780  0F20                     	;# 
   781  0F21                     	;# 
   782  0F22                     	;# 
   783  0F23                     	;# 
   784  0F24                     	;# 
   785  0F25                     	;# 
   786  0F26                     	;# 
   787  0F27                     	;# 
   788  0F28                     	;# 
   789  0F29                     	;# 
   790  0F2A                     	;# 
   791  0F2B                     	;# 
   792  0F2C                     	;# 
   793  0F2D                     	;# 
   794  0F9E                     	;# 
   795  0FE4                     	;# 
   796  0FE5                     	;# 
   797  0FE6                     	;# 
   798  0FE7                     	;# 
   799  0FE8                     	;# 
   800  0FE9                     	;# 
   801  0FEA                     	;# 
   802  0FEB                     	;# 
   803  0FED                     	;# 
   804  0FEE                     	;# 
   805  0FEF                     	;# 
   806  0000                     	;# 
   807  0001                     	;# 
   808  0002                     	;# 
   809  0003                     	;# 
   810  0004                     	;# 
   811  0005                     	;# 
   812  0006                     	;# 
   813  0007                     	;# 
   814  0008                     	;# 
   815  0009                     	;# 
   816  000A                     	;# 
   817  000B                     	;# 
   818  000C                     	;# 
   819  000D                     	;# 
   820  000E                     	;# 
   821  0011                     	;# 
   822  0012                     	;# 
   823  0013                     	;# 
   824  0015                     	;# 
   825  0016                     	;# 
   826  0016                     	;# 
   827  0017                     	;# 
   828  0018                     	;# 
   829  0019                     	;# 
   830  001A                     	;# 
   831  001B                     	;# 
   832  001C                     	;# 
   833  008C                     	;# 
   834  008D                     	;# 
   835  008E                     	;# 
   836  0091                     	;# 
   837  0092                     	;# 
   838  0093                     	;# 
   839  0095                     	;# 
   840  0096                     	;# 
   841  0097                     	;# 
   842  0098                     	;# 
   843  0099                     	;# 
   844  009A                     	;# 
   845  009B                     	;# 
   846  009B                     	;# 
   847  009C                     	;# 
   848  009D                     	;# 
   849  009E                     	;# 
   850  009F                     	;# 
   851  010C                     	;# 
   852  010D                     	;# 
   853  010E                     	;# 
   854  0111                     	;# 
   855  0112                     	;# 
   856  0113                     	;# 
   857  0114                     	;# 
   858  0115                     	;# 
   859  0116                     	;# 
   860  0117                     	;# 
   861  0118                     	;# 
   862  0119                     	;# 
   863  011C                     	;# 
   864  018C                     	;# 
   865  018D                     	;# 
   866  018E                     	;# 
   867  0191                     	;# 
   868  0191                     	;# 
   869  0192                     	;# 
   870  0193                     	;# 
   871  0193                     	;# 
   872  0194                     	;# 
   873  0195                     	;# 
   874  0196                     	;# 
   875  0197                     	;# 
   876  0199                     	;# 
   877  0199                     	;# 
   878  0199                     	;# 
   879  019A                     	;# 
   880  019A                     	;# 
   881  019A                     	;# 
   882  019B                     	;# 
   883  019B                     	;# 
   884  019B                     	;# 
   885  019B                     	;# 
   886  019B                     	;# 
   887  019C                     	;# 
   888  019C                     	;# 
   889  019C                     	;# 
   890  019D                     	;# 
   891  019D                     	;# 
   892  019D                     	;# 
   893  019E                     	;# 
   894  019E                     	;# 
   895  019E                     	;# 
   896  019F                     	;# 
   897  019F                     	;# 
   898  019F                     	;# 
   899  019F                     	;# 
   900  019F                     	;# 
   901  020C                     	;# 
   902  020D                     	;# 
   903  020E                     	;# 
   904  0211                     	;# 
   905  0211                     	;# 
   906  0212                     	;# 
   907  0212                     	;# 
   908  0213                     	;# 
   909  0213                     	;# 
   910  0214                     	;# 
   911  0214                     	;# 
   912  0215                     	;# 
   913  0215                     	;# 
   914  0215                     	;# 
   915  0215                     	;# 
   916  0216                     	;# 
   917  0216                     	;# 
   918  0217                     	;# 
   919  0217                     	;# 
   920  028C                     	;# 
   921  028D                     	;# 
   922  028E                     	;# 
   923  0291                     	;# 
   924  0291                     	;# 
   925  0292                     	;# 
   926  0293                     	;# 
   927  0293                     	;# 
   928  0298                     	;# 
   929  0298                     	;# 
   930  0299                     	;# 
   931  029A                     	;# 
   932  029A                     	;# 
   933  029E                     	;# 
   934  030C                     	;# 
   935  030D                     	;# 
   936  030E                     	;# 
   937  038C                     	;# 
   938  038D                     	;# 
   939  038E                     	;# 
   940  0391                     	;# 
   941  0392                     	;# 
   942  0393                     	;# 
   943  0394                     	;# 
   944  0395                     	;# 
   945  0396                     	;# 
   946  0397                     	;# 
   947  0398                     	;# 
   948  0399                     	;# 
   949  0415                     	;# 
   950  0416                     	;# 
   951  0417                     	;# 
   952  041C                     	;# 
   953  041D                     	;# 
   954  041E                     	;# 
   955  0511                     	;# 
   956  0515                     	;# 
   957  0617                     	;# 
   958  0618                     	;# 
   959  0619                     	;# 
   960  0619                     	;# 
   961  061A                     	;# 
   962  061B                     	;# 
   963  061C                     	;# 
   964  061C                     	;# 
   965  0691                     	;# 
   966  0692                     	;# 
   967  0693                     	;# 
   968  0694                     	;# 
   969  0695                     	;# 
   970  0696                     	;# 
   971  0697                     	;# 
   972  0698                     	;# 
   973  0699                     	;# 
   974  069A                     	;# 
   975  069B                     	;# 
   976  069C                     	;# 
   977  069D                     	;# 
   978  069E                     	;# 
   979  069F                     	;# 
   980  0E0F                     	;# 
   981  0E10                     	;# 
   982  0E11                     	;# 
   983  0E12                     	;# 
   984  0E13                     	;# 
   985  0E14                     	;# 
   986  0E15                     	;# 
   987  0E17                     	;# 
   988  0E20                     	;# 
   989  0E21                     	;# 
   990  0E22                     	;# 
   991  0E24                     	;# 
   992  0E25                     	;# 
   993  0E28                     	;# 
   994  0E29                     	;# 
   995  0E2A                     	;# 
   996  0E2B                     	;# 
   997  0E90                     	;# 
   998  0E91                     	;# 
   999  0E92                     	;# 
  1000  0E94                     	;# 
  1001  0E95                     	;# 
  1002  0E9C                     	;# 
  1003  0E9D                     	;# 
  1004  0E9E                     	;# 
  1005  0E9F                     	;# 
  1006  0EA0                     	;# 
  1007  0EA1                     	;# 
  1008  0EA2                     	;# 
  1009  0EA3                     	;# 
  1010  0EA4                     	;# 
  1011  0EA5                     	;# 
  1012  0EA6                     	;# 
  1013  0EA7                     	;# 
  1014  0F0F                     	;# 
  1015  0F10                     	;# 
  1016  0F11                     	;# 
  1017  0F12                     	;# 
  1018  0F13                     	;# 
  1019  0F14                     	;# 
  1020  0F15                     	;# 
  1021  0F16                     	;# 
  1022  0F17                     	;# 
  1023  0F18                     	;# 
  1024  0F19                     	;# 
  1025  0F1A                     	;# 
  1026  0F1B                     	;# 
  1027  0F1C                     	;# 
  1028  0F1D                     	;# 
  1029  0F1E                     	;# 
  1030  0F1F                     	;# 
  1031  0F20                     	;# 
  1032  0F21                     	;# 
  1033  0F22                     	;# 
  1034  0F23                     	;# 
  1035  0F24                     	;# 
  1036  0F25                     	;# 
  1037  0F26                     	;# 
  1038  0F27                     	;# 
  1039  0F28                     	;# 
  1040  0F29                     	;# 
  1041  0F2A                     	;# 
  1042  0F2B                     	;# 
  1043  0F2C                     	;# 
  1044  0F2D                     	;# 
  1045  0F9E                     	;# 
  1046  0FE4                     	;# 
  1047  0FE5                     	;# 
  1048  0FE6                     	;# 
  1049  0FE7                     	;# 
  1050  0FE8                     	;# 
  1051  0FE9                     	;# 
  1052  0FEA                     	;# 
  1053  0FEB                     	;# 
  1054  0FED                     	;# 
  1055  0FEE                     	;# 
  1056  0FEF                     	;# 
  1057  0000                     	;# 
  1058  0001                     	;# 
  1059  0002                     	;# 
  1060  0003                     	;# 
  1061  0004                     	;# 
  1062  0005                     	;# 
  1063  0006                     	;# 
  1064  0007                     	;# 
  1065  0008                     	;# 
  1066  0009                     	;# 
  1067  000A                     	;# 
  1068  000B                     	;# 
  1069  000C                     	;# 
  1070  000D                     	;# 
  1071  000E                     	;# 
  1072  0011                     	;# 
  1073  0012                     	;# 
  1074  0013                     	;# 
  1075  0015                     	;# 
  1076  0016                     	;# 
  1077  0016                     	;# 
  1078  0017                     	;# 
  1079  0018                     	;# 
  1080  0019                     	;# 
  1081  001A                     	;# 
  1082  001B                     	;# 
  1083  001C                     	;# 
  1084  008C                     	;# 
  1085  008D                     	;# 
  1086  008E                     	;# 
  1087  0091                     	;# 
  1088  0092                     	;# 
  1089  0093                     	;# 
  1090  0095                     	;# 
  1091  0096                     	;# 
  1092  0097                     	;# 
  1093  0098                     	;# 
  1094  0099                     	;# 
  1095  009A                     	;# 
  1096  009B                     	;# 
  1097  009B                     	;# 
  1098  009C                     	;# 
  1099  009D                     	;# 
  1100  009E                     	;# 
  1101  009F                     	;# 
  1102  010C                     	;# 
  1103  010D                     	;# 
  1104  010E                     	;# 
  1105  0111                     	;# 
  1106  0112                     	;# 
  1107  0113                     	;# 
  1108  0114                     	;# 
  1109  0115                     	;# 
  1110  0116                     	;# 
  1111  0117                     	;# 
  1112  0118                     	;# 
  1113  0119                     	;# 
  1114  011C                     	;# 
  1115  018C                     	;# 
  1116  018D                     	;# 
  1117  018E                     	;# 
  1118  0191                     	;# 
  1119  0191                     	;# 
  1120  0192                     	;# 
  1121  0193                     	;# 
  1122  0193                     	;# 
  1123  0194                     	;# 
  1124  0195                     	;# 
  1125  0196                     	;# 
  1126  0197                     	;# 
  1127  0199                     	;# 
  1128  0199                     	;# 
  1129  0199                     	;# 
  1130  019A                     	;# 
  1131  019A                     	;# 
  1132  019A                     	;# 
  1133  019B                     	;# 
  1134  019B                     	;# 
  1135  019B                     	;# 
  1136  019B                     	;# 
  1137  019B                     	;# 
  1138  019C                     	;# 
  1139  019C                     	;# 
  1140  019C                     	;# 
  1141  019D                     	;# 
  1142  019D                     	;# 
  1143  019D                     	;# 
  1144  019E                     	;# 
  1145  019E                     	;# 
  1146  019E                     	;# 
  1147  019F                     	;# 
  1148  019F                     	;# 
  1149  019F                     	;# 
  1150  019F                     	;# 
  1151  019F                     	;# 
  1152  020C                     	;# 
  1153  020D                     	;# 
  1154  020E                     	;# 
  1155  0211                     	;# 
  1156  0211                     	;# 
  1157  0212                     	;# 
  1158  0212                     	;# 
  1159  0213                     	;# 
  1160  0213                     	;# 
  1161  0214                     	;# 
  1162  0214                     	;# 
  1163  0215                     	;# 
  1164  0215                     	;# 
  1165  0215                     	;# 
  1166  0215                     	;# 
  1167  0216                     	;# 
  1168  0216                     	;# 
  1169  0217                     	;# 
  1170  0217                     	;# 
  1171  028C                     	;# 
  1172  028D                     	;# 
  1173  028E                     	;# 
  1174  0291                     	;# 
  1175  0291                     	;# 
  1176  0292                     	;# 
  1177  0293                     	;# 
  1178  0293                     	;# 
  1179  0298                     	;# 
  1180  0298                     	;# 
  1181  0299                     	;# 
  1182  029A                     	;# 
  1183  029A                     	;# 
  1184  029E                     	;# 
  1185  030C                     	;# 
  1186  030D                     	;# 
  1187  030E                     	;# 
  1188  038C                     	;# 
  1189  038D                     	;# 
  1190  038E                     	;# 
  1191  0391                     	;# 
  1192  0392                     	;# 
  1193  0393                     	;# 
  1194  0394                     	;# 
  1195  0395                     	;# 
  1196  0396                     	;# 
  1197  0397                     	;# 
  1198  0398                     	;# 
  1199  0399                     	;# 
  1200  0415                     	;# 
  1201  0416                     	;# 
  1202  0417                     	;# 
  1203  041C                     	;# 
  1204  041D                     	;# 
  1205  041E                     	;# 
  1206  0511                     	;# 
  1207  0515                     	;# 
  1208  0617                     	;# 
  1209  0618                     	;# 
  1210  0619                     	;# 
  1211  0619                     	;# 
  1212  061A                     	;# 
  1213  061B                     	;# 
  1214  061C                     	;# 
  1215  061C                     	;# 
  1216  0691                     	;# 
  1217  0692                     	;# 
  1218  0693                     	;# 
  1219  0694                     	;# 
  1220  0695                     	;# 
  1221  0696                     	;# 
  1222  0697                     	;# 
  1223  0698                     	;# 
  1224  0699                     	;# 
  1225  069A                     	;# 
  1226  069B                     	;# 
  1227  069C                     	;# 
  1228  069D                     	;# 
  1229  069E                     	;# 
  1230  069F                     	;# 
  1231  0E0F                     	;# 
  1232  0E10                     	;# 
  1233  0E11                     	;# 
  1234  0E12                     	;# 
  1235  0E13                     	;# 
  1236  0E14                     	;# 
  1237  0E15                     	;# 
  1238  0E17                     	;# 
  1239  0E20                     	;# 
  1240  0E21                     	;# 
  1241  0E22                     	;# 
  1242  0E24                     	;# 
  1243  0E25                     	;# 
  1244  0E28                     	;# 
  1245  0E29                     	;# 
  1246  0E2A                     	;# 
  1247  0E2B                     	;# 
  1248  0E90                     	;# 
  1249  0E91                     	;# 
  1250  0E92                     	;# 
  1251  0E94                     	;# 
  1252  0E95                     	;# 
  1253  0E9C                     	;# 
  1254  0E9D                     	;# 
  1255  0E9E                     	;# 
  1256  0E9F                     	;# 
  1257  0EA0                     	;# 
  1258  0EA1                     	;# 
  1259  0EA2                     	;# 
  1260  0EA3                     	;# 
  1261  0EA4                     	;# 
  1262  0EA5                     	;# 
  1263  0EA6                     	;# 
  1264  0EA7                     	;# 
  1265  0F0F                     	;# 
  1266  0F10                     	;# 
  1267  0F11                     	;# 
  1268  0F12                     	;# 
  1269  0F13                     	;# 
  1270  0F14                     	;# 
  1271  0F15                     	;# 
  1272  0F16                     	;# 
  1273  0F17                     	;# 
  1274  0F18                     	;# 
  1275  0F19                     	;# 
  1276  0F1A                     	;# 
  1277  0F1B                     	;# 
  1278  0F1C                     	;# 
  1279  0F1D                     	;# 
  1280  0F1E                     	;# 
  1281  0F1F                     	;# 
  1282  0F20                     	;# 
  1283  0F21                     	;# 
  1284  0F22                     	;# 
  1285  0F23                     	;# 
  1286  0F24                     	;# 
  1287  0F25                     	;# 
  1288  0F26                     	;# 
  1289  0F27                     	;# 
  1290  0F28                     	;# 
  1291  0F29                     	;# 
  1292  0F2A                     	;# 
  1293  0F2B                     	;# 
  1294  0F2C                     	;# 
  1295  0F2D                     	;# 
  1296  0F9E                     	;# 
  1297  0FE4                     	;# 
  1298  0FE5                     	;# 
  1299  0FE6                     	;# 
  1300  0FE7                     	;# 
  1301  0FE8                     	;# 
  1302  0FE9                     	;# 
  1303  0FEA                     	;# 
  1304  0FEB                     	;# 
  1305  0FED                     	;# 
  1306  0FEE                     	;# 
  1307  0FEF                     	;# 
  1308  0000                     	;# 
  1309  0001                     	;# 
  1310  0002                     	;# 
  1311  0003                     	;# 
  1312  0004                     	;# 
  1313  0005                     	;# 
  1314  0006                     	;# 
  1315  0007                     	;# 
  1316  0008                     	;# 
  1317  0009                     	;# 
  1318  000A                     	;# 
  1319  000B                     	;# 
  1320  000C                     	;# 
  1321  000D                     	;# 
  1322  000E                     	;# 
  1323  0011                     	;# 
  1324  0012                     	;# 
  1325  0013                     	;# 
  1326  0015                     	;# 
  1327  0016                     	;# 
  1328  0016                     	;# 
  1329  0017                     	;# 
  1330  0018                     	;# 
  1331  0019                     	;# 
  1332  001A                     	;# 
  1333  001B                     	;# 
  1334  001C                     	;# 
  1335  008C                     	;# 
  1336  008D                     	;# 
  1337  008E                     	;# 
  1338  0091                     	;# 
  1339  0092                     	;# 
  1340  0093                     	;# 
  1341  0095                     	;# 
  1342  0096                     	;# 
  1343  0097                     	;# 
  1344  0098                     	;# 
  1345  0099                     	;# 
  1346  009A                     	;# 
  1347  009B                     	;# 
  1348  009B                     	;# 
  1349  009C                     	;# 
  1350  009D                     	;# 
  1351  009E                     	;# 
  1352  009F                     	;# 
  1353  010C                     	;# 
  1354  010D                     	;# 
  1355  010E                     	;# 
  1356  0111                     	;# 
  1357  0112                     	;# 
  1358  0113                     	;# 
  1359  0114                     	;# 
  1360  0115                     	;# 
  1361  0116                     	;# 
  1362  0117                     	;# 
  1363  0118                     	;# 
  1364  0119                     	;# 
  1365  011C                     	;# 
  1366  018C                     	;# 
  1367  018D                     	;# 
  1368  018E                     	;# 
  1369  0191                     	;# 
  1370  0191                     	;# 
  1371  0192                     	;# 
  1372  0193                     	;# 
  1373  0193                     	;# 
  1374  0194                     	;# 
  1375  0195                     	;# 
  1376  0196                     	;# 
  1377  0197                     	;# 
  1378  0199                     	;# 
  1379  0199                     	;# 
  1380  0199                     	;# 
  1381  019A                     	;# 
  1382  019A                     	;# 
  1383  019A                     	;# 
  1384  019B                     	;# 
  1385  019B                     	;# 
  1386  019B                     	;# 
  1387  019B                     	;# 
  1388  019B                     	;# 
  1389  019C                     	;# 
  1390  019C                     	;# 
  1391  019C                     	;# 
  1392  019D                     	;# 
  1393  019D                     	;# 
  1394  019D                     	;# 
  1395  019E                     	;# 
  1396  019E                     	;# 
  1397  019E                     	;# 
  1398  019F                     	;# 
  1399  019F                     	;# 
  1400  019F                     	;# 
  1401  019F                     	;# 
  1402  019F                     	;# 
  1403  020C                     	;# 
  1404  020D                     	;# 
  1405  020E                     	;# 
  1406  0211                     	;# 
  1407  0211                     	;# 
  1408  0212                     	;# 
  1409  0212                     	;# 
  1410  0213                     	;# 
  1411  0213                     	;# 
  1412  0214                     	;# 
  1413  0214                     	;# 
  1414  0215                     	;# 
  1415  0215                     	;# 
  1416  0215                     	;# 
  1417  0215                     	;# 
  1418  0216                     	;# 
  1419  0216                     	;# 
  1420  0217                     	;# 
  1421  0217                     	;# 
  1422  028C                     	;# 
  1423  028D                     	;# 
  1424  028E                     	;# 
  1425  0291                     	;# 
  1426  0291                     	;# 
  1427  0292                     	;# 
  1428  0293                     	;# 
  1429  0293                     	;# 
  1430  0298                     	;# 
  1431  0298                     	;# 
  1432  0299                     	;# 
  1433  029A                     	;# 
  1434  029A                     	;# 
  1435  029E                     	;# 
  1436  030C                     	;# 
  1437  030D                     	;# 
  1438  030E                     	;# 
  1439  038C                     	;# 
  1440  038D                     	;# 
  1441  038E                     	;# 
  1442  0391                     	;# 
  1443  0392                     	;# 
  1444  0393                     	;# 
  1445  0394                     	;# 
  1446  0395                     	;# 
  1447  0396                     	;# 
  1448  0397                     	;# 
  1449  0398                     	;# 
  1450  0399                     	;# 
  1451  0415                     	;# 
  1452  0416                     	;# 
  1453  0417                     	;# 
  1454  041C                     	;# 
  1455  041D                     	;# 
  1456  041E                     	;# 
  1457  0511                     	;# 
  1458  0515                     	;# 
  1459  0617                     	;# 
  1460  0618                     	;# 
  1461  0619                     	;# 
  1462  0619                     	;# 
  1463  061A                     	;# 
  1464  061B                     	;# 
  1465  061C                     	;# 
  1466  061C                     	;# 
  1467  0691                     	;# 
  1468  0692                     	;# 
  1469  0693                     	;# 
  1470  0694                     	;# 
  1471  0695                     	;# 
  1472  0696                     	;# 
  1473  0697                     	;# 
  1474  0698                     	;# 
  1475  0699                     	;# 
  1476  069A                     	;# 
  1477  069B                     	;# 
  1478  069C                     	;# 
  1479  069D                     	;# 
  1480  069E                     	;# 
  1481  069F                     	;# 
  1482  0E0F                     	;# 
  1483  0E10                     	;# 
  1484  0E11                     	;# 
  1485  0E12                     	;# 
  1486  0E13                     	;# 
  1487  0E14                     	;# 
  1488  0E15                     	;# 
  1489  0E17                     	;# 
  1490  0E20                     	;# 
  1491  0E21                     	;# 
  1492  0E22                     	;# 
  1493  0E24                     	;# 
  1494  0E25                     	;# 
  1495  0E28                     	;# 
  1496  0E29                     	;# 
  1497  0E2A                     	;# 
  1498  0E2B                     	;# 
  1499  0E90                     	;# 
  1500  0E91                     	;# 
  1501  0E92                     	;# 
  1502  0E94                     	;# 
  1503  0E95                     	;# 
  1504  0E9C                     	;# 
  1505  0E9D                     	;# 
  1506  0E9E                     	;# 
  1507  0E9F                     	;# 
  1508  0EA0                     	;# 
  1509  0EA1                     	;# 
  1510  0EA2                     	;# 
  1511  0EA3                     	;# 
  1512  0EA4                     	;# 
  1513  0EA5                     	;# 
  1514  0EA6                     	;# 
  1515  0EA7                     	;# 
  1516  0F0F                     	;# 
  1517  0F10                     	;# 
  1518  0F11                     	;# 
  1519  0F12                     	;# 
  1520  0F13                     	;# 
  1521  0F14                     	;# 
  1522  0F15                     	;# 
  1523  0F16                     	;# 
  1524  0F17                     	;# 
  1525  0F18                     	;# 
  1526  0F19                     	;# 
  1527  0F1A                     	;# 
  1528  0F1B                     	;# 
  1529  0F1C                     	;# 
  1530  0F1D                     	;# 
  1531  0F1E                     	;# 
  1532  0F1F                     	;# 
  1533  0F20                     	;# 
  1534  0F21                     	;# 
  1535  0F22                     	;# 
  1536  0F23                     	;# 
  1537  0F24                     	;# 
  1538  0F25                     	;# 
  1539  0F26                     	;# 
  1540  0F27                     	;# 
  1541  0F28                     	;# 
  1542  0F29                     	;# 
  1543  0F2A                     	;# 
  1544  0F2B                     	;# 
  1545  0F2C                     	;# 
  1546  0F2D                     	;# 
  1547  0F9E                     	;# 
  1548  0FE4                     	;# 
  1549  0FE5                     	;# 
  1550  0FE6                     	;# 
  1551  0FE7                     	;# 
  1552  0FE8                     	;# 
  1553  0FE9                     	;# 
  1554  0FEA                     	;# 
  1555  0FEB                     	;# 
  1556  0FED                     	;# 
  1557  0FEE                     	;# 
  1558  0FEF                     	;# 
  1559  0000                     	;# 
  1560  0001                     	;# 
  1561  0002                     	;# 
  1562  0003                     	;# 
  1563  0004                     	;# 
  1564  0005                     	;# 
  1565  0006                     	;# 
  1566  0007                     	;# 
  1567  0008                     	;# 
  1568  0009                     	;# 
  1569  000A                     	;# 
  1570  000B                     	;# 
  1571  000C                     	;# 
  1572  000D                     	;# 
  1573  000E                     	;# 
  1574  0011                     	;# 
  1575  0012                     	;# 
  1576  0013                     	;# 
  1577  0015                     	;# 
  1578  0016                     	;# 
  1579  0016                     	;# 
  1580  0017                     	;# 
  1581  0018                     	;# 
  1582  0019                     	;# 
  1583  001A                     	;# 
  1584  001B                     	;# 
  1585  001C                     	;# 
  1586  008C                     	;# 
  1587  008D                     	;# 
  1588  008E                     	;# 
  1589  0091                     	;# 
  1590  0092                     	;# 
  1591  0093                     	;# 
  1592  0095                     	;# 
  1593  0096                     	;# 
  1594  0097                     	;# 
  1595  0098                     	;# 
  1596  0099                     	;# 
  1597  009A                     	;# 
  1598  009B                     	;# 
  1599  009B                     	;# 
  1600  009C                     	;# 
  1601  009D                     	;# 
  1602  009E                     	;# 
  1603  009F                     	;# 
  1604  010C                     	;# 
  1605  010D                     	;# 
  1606  010E                     	;# 
  1607  0111                     	;# 
  1608  0112                     	;# 
  1609  0113                     	;# 
  1610  0114                     	;# 
  1611  0115                     	;# 
  1612  0116                     	;# 
  1613  0117                     	;# 
  1614  0118                     	;# 
  1615  0119                     	;# 
  1616  011C                     	;# 
  1617  018C                     	;# 
  1618  018D                     	;# 
  1619  018E                     	;# 
  1620  0191                     	;# 
  1621  0191                     	;# 
  1622  0192                     	;# 
  1623  0193                     	;# 
  1624  0193                     	;# 
  1625  0194                     	;# 
  1626  0195                     	;# 
  1627  0196                     	;# 
  1628  0197                     	;# 
  1629  0199                     	;# 
  1630  0199                     	;# 
  1631  0199                     	;# 
  1632  019A                     	;# 
  1633  019A                     	;# 
  1634  019A                     	;# 
  1635  019B                     	;# 
  1636  019B                     	;# 
  1637  019B                     	;# 
  1638  019B                     	;# 
  1639  019B                     	;# 
  1640  019C                     	;# 
  1641  019C                     	;# 
  1642  019C                     	;# 
  1643  019D                     	;# 
  1644  019D                     	;# 
  1645  019D                     	;# 
  1646  019E                     	;# 
  1647  019E                     	;# 
  1648  019E                     	;# 
  1649  019F                     	;# 
  1650  019F                     	;# 
  1651  019F                     	;# 
  1652  019F                     	;# 
  1653  019F                     	;# 
  1654  020C                     	;# 
  1655  020D                     	;# 
  1656  020E                     	;# 
  1657  0211                     	;# 
  1658  0211                     	;# 
  1659  0212                     	;# 
  1660  0212                     	;# 
  1661  0213                     	;# 
  1662  0213                     	;# 
  1663  0214                     	;# 
  1664  0214                     	;# 
  1665  0215                     	;# 
  1666  0215                     	;# 
  1667  0215                     	;# 
  1668  0215                     	;# 
  1669  0216                     	;# 
  1670  0216                     	;# 
  1671  0217                     	;# 
  1672  0217                     	;# 
  1673  028C                     	;# 
  1674  028D                     	;# 
  1675  028E                     	;# 
  1676  0291                     	;# 
  1677  0291                     	;# 
  1678  0292                     	;# 
  1679  0293                     	;# 
  1680  0293                     	;# 
  1681  0298                     	;# 
  1682  0298                     	;# 
  1683  0299                     	;# 
  1684  029A                     	;# 
  1685  029A                     	;# 
  1686  029E                     	;# 
  1687  030C                     	;# 
  1688  030D                     	;# 
  1689  030E                     	;# 
  1690  038C                     	;# 
  1691  038D                     	;# 
  1692  038E                     	;# 
  1693  0391                     	;# 
  1694  0392                     	;# 
  1695  0393                     	;# 
  1696  0394                     	;# 
  1697  0395                     	;# 
  1698  0396                     	;# 
  1699  0397                     	;# 
  1700  0398                     	;# 
  1701  0399                     	;# 
  1702  0415                     	;# 
  1703  0416                     	;# 
  1704  0417                     	;# 
  1705  041C                     	;# 
  1706  041D                     	;# 
  1707  041E                     	;# 
  1708  0511                     	;# 
  1709  0515                     	;# 
  1710  0617                     	;# 
  1711  0618                     	;# 
  1712  0619                     	;# 
  1713  0619                     	;# 
  1714  061A                     	;# 
  1715  061B                     	;# 
  1716  061C                     	;# 
  1717  061C                     	;# 
  1718  0691                     	;# 
  1719  0692                     	;# 
  1720  0693                     	;# 
  1721  0694                     	;# 
  1722  0695                     	;# 
  1723  0696                     	;# 
  1724  0697                     	;# 
  1725  0698                     	;# 
  1726  0699                     	;# 
  1727  069A                     	;# 
  1728  069B                     	;# 
  1729  069C                     	;# 
  1730  069D                     	;# 
  1731  069E                     	;# 
  1732  069F                     	;# 
  1733  0E0F                     	;# 
  1734  0E10                     	;# 
  1735  0E11                     	;# 
  1736  0E12                     	;# 
  1737  0E13                     	;# 
  1738  0E14                     	;# 
  1739  0E15                     	;# 
  1740  0E17                     	;# 
  1741  0E20                     	;# 
  1742  0E21                     	;# 
  1743  0E22                     	;# 
  1744  0E24                     	;# 
  1745  0E25                     	;# 
  1746  0E28                     	;# 
  1747  0E29                     	;# 
  1748  0E2A                     	;# 
  1749  0E2B                     	;# 
  1750  0E90                     	;# 
  1751  0E91                     	;# 
  1752  0E92                     	;# 
  1753  0E94                     	;# 
  1754  0E95                     	;# 
  1755  0E9C                     	;# 
  1756  0E9D                     	;# 
  1757  0E9E                     	;# 
  1758  0E9F                     	;# 
  1759  0EA0                     	;# 
  1760  0EA1                     	;# 
  1761  0EA2                     	;# 
  1762  0EA3                     	;# 
  1763  0EA4                     	;# 
  1764  0EA5                     	;# 
  1765  0EA6                     	;# 
  1766  0EA7                     	;# 
  1767  0F0F                     	;# 
  1768  0F10                     	;# 
  1769  0F11                     	;# 
  1770  0F12                     	;# 
  1771  0F13                     	;# 
  1772  0F14                     	;# 
  1773  0F15                     	;# 
  1774  0F16                     	;# 
  1775  0F17                     	;# 
  1776  0F18                     	;# 
  1777  0F19                     	;# 
  1778  0F1A                     	;# 
  1779  0F1B                     	;# 
  1780  0F1C                     	;# 
  1781  0F1D                     	;# 
  1782  0F1E                     	;# 
  1783  0F1F                     	;# 
  1784  0F20                     	;# 
  1785  0F21                     	;# 
  1786  0F22                     	;# 
  1787  0F23                     	;# 
  1788  0F24                     	;# 
  1789  0F25                     	;# 
  1790  0F26                     	;# 
  1791  0F27                     	;# 
  1792  0F28                     	;# 
  1793  0F29                     	;# 
  1794  0F2A                     	;# 
  1795  0F2B                     	;# 
  1796  0F2C                     	;# 
  1797  0F2D                     	;# 
  1798  0F9E                     	;# 
  1799  0FE4                     	;# 
  1800  0FE5                     	;# 
  1801  0FE6                     	;# 
  1802  0FE7                     	;# 
  1803  0FE8                     	;# 
  1804  0FE9                     	;# 
  1805  0FEA                     	;# 
  1806  0FEB                     	;# 
  1807  0FED                     	;# 
  1808  0FEE                     	;# 
  1809  0FEF                     	;# 
  1810  0000                     	;# 
  1811  0001                     	;# 
  1812  0002                     	;# 
  1813  0003                     	;# 
  1814  0004                     	;# 
  1815  0005                     	;# 
  1816  0006                     	;# 
  1817  0007                     	;# 
  1818  0008                     	;# 
  1819  0009                     	;# 
  1820  000A                     	;# 
  1821  000B                     	;# 
  1822  000C                     	;# 
  1823  000D                     	;# 
  1824  000E                     	;# 
  1825  0011                     	;# 
  1826  0012                     	;# 
  1827  0013                     	;# 
  1828  0015                     	;# 
  1829  0016                     	;# 
  1830  0016                     	;# 
  1831  0017                     	;# 
  1832  0018                     	;# 
  1833  0019                     	;# 
  1834  001A                     	;# 
  1835  001B                     	;# 
  1836  001C                     	;# 
  1837  008C                     	;# 
  1838  008D                     	;# 
  1839  008E                     	;# 
  1840  0091                     	;# 
  1841  0092                     	;# 
  1842  0093                     	;# 
  1843  0095                     	;# 
  1844  0096                     	;# 
  1845  0097                     	;# 
  1846  0098                     	;# 
  1847  0099                     	;# 
  1848  009A                     	;# 
  1849  009B                     	;# 
  1850  009B                     	;# 
  1851  009C                     	;# 
  1852  009D                     	;# 
  1853  009E                     	;# 
  1854  009F                     	;# 
  1855  010C                     	;# 
  1856  010D                     	;# 
  1857  010E                     	;# 
  1858  0111                     	;# 
  1859  0112                     	;# 
  1860  0113                     	;# 
  1861  0114                     	;# 
  1862  0115                     	;# 
  1863  0116                     	;# 
  1864  0117                     	;# 
  1865  0118                     	;# 
  1866  0119                     	;# 
  1867  011C                     	;# 
  1868  018C                     	;# 
  1869  018D                     	;# 
  1870  018E                     	;# 
  1871  0191                     	;# 
  1872  0191                     	;# 
  1873  0192                     	;# 
  1874  0193                     	;# 
  1875  0193                     	;# 
  1876  0194                     	;# 
  1877  0195                     	;# 
  1878  0196                     	;# 
  1879  0197                     	;# 
  1880  0199                     	;# 
  1881  0199                     	;# 
  1882  0199                     	;# 
  1883  019A                     	;# 
  1884  019A                     	;# 
  1885  019A                     	;# 
  1886  019B                     	;# 
  1887  019B                     	;# 
  1888  019B                     	;# 
  1889  019B                     	;# 
  1890  019B                     	;# 
  1891  019C                     	;# 
  1892  019C                     	;# 
  1893  019C                     	;# 
  1894  019D                     	;# 
  1895  019D                     	;# 
  1896  019D                     	;# 
  1897  019E                     	;# 
  1898  019E                     	;# 
  1899  019E                     	;# 
  1900  019F                     	;# 
  1901  019F                     	;# 
  1902  019F                     	;# 
  1903  019F                     	;# 
  1904  019F                     	;# 
  1905  020C                     	;# 
  1906  020D                     	;# 
  1907  020E                     	;# 
  1908  0211                     	;# 
  1909  0211                     	;# 
  1910  0212                     	;# 
  1911  0212                     	;# 
  1912  0213                     	;# 
  1913  0213                     	;# 
  1914  0214                     	;# 
  1915  0214                     	;# 
  1916  0215                     	;# 
  1917  0215                     	;# 
  1918  0215                     	;# 
  1919  0215                     	;# 
  1920  0216                     	;# 
  1921  0216                     	;# 
  1922  0217                     	;# 
  1923  0217                     	;# 
  1924  028C                     	;# 
  1925  028D                     	;# 
  1926  028E                     	;# 
  1927  0291                     	;# 
  1928  0291                     	;# 
  1929  0292                     	;# 
  1930  0293                     	;# 
  1931  0293                     	;# 
  1932  0298                     	;# 
  1933  0298                     	;# 
  1934  0299                     	;# 
  1935  029A                     	;# 
  1936  029A                     	;# 
  1937  029E                     	;# 
  1938  030C                     	;# 
  1939  030D                     	;# 
  1940  030E                     	;# 
  1941  038C                     	;# 
  1942  038D                     	;# 
  1943  038E                     	;# 
  1944  0391                     	;# 
  1945  0392                     	;# 
  1946  0393                     	;# 
  1947  0394                     	;# 
  1948  0395                     	;# 
  1949  0396                     	;# 
  1950  0397                     	;# 
  1951  0398                     	;# 
  1952  0399                     	;# 
  1953  0415                     	;# 
  1954  0416                     	;# 
  1955  0417                     	;# 
  1956  041C                     	;# 
  1957  041D                     	;# 
  1958  041E                     	;# 
  1959  0511                     	;# 
  1960  0515                     	;# 
  1961  0617                     	;# 
  1962  0618                     	;# 
  1963  0619                     	;# 
  1964  0619                     	;# 
  1965  061A                     	;# 
  1966  061B                     	;# 
  1967  061C                     	;# 
  1968  061C                     	;# 
  1969  0691                     	;# 
  1970  0692                     	;# 
  1971  0693                     	;# 
  1972  0694                     	;# 
  1973  0695                     	;# 
  1974  0696                     	;# 
  1975  0697                     	;# 
  1976  0698                     	;# 
  1977  0699                     	;# 
  1978  069A                     	;# 
  1979  069B                     	;# 
  1980  069C                     	;# 
  1981  069D                     	;# 
  1982  069E                     	;# 
  1983  069F                     	;# 
  1984  0E0F                     	;# 
  1985  0E10                     	;# 
  1986  0E11                     	;# 
  1987  0E12                     	;# 
  1988  0E13                     	;# 
  1989  0E14                     	;# 
  1990  0E15                     	;# 
  1991  0E17                     	;# 
  1992  0E20                     	;# 
  1993  0E21                     	;# 
  1994  0E22                     	;# 
  1995  0E24                     	;# 
  1996  0E25                     	;# 
  1997  0E28                     	;# 
  1998  0E29                     	;# 
  1999  0E2A                     	;# 
  2000  0E2B                     	;# 
  2001  0E90                     	;# 
  2002  0E91                     	;# 
  2003  0E92                     	;# 
  2004  0E94                     	;# 
  2005  0E95                     	;# 
  2006  0E9C                     	;# 
  2007  0E9D                     	;# 
  2008  0E9E                     	;# 
  2009  0E9F                     	;# 
  2010  0EA0                     	;# 
  2011  0EA1                     	;# 
  2012  0EA2                     	;# 
  2013  0EA3                     	;# 
  2014  0EA4                     	;# 
  2015  0EA5                     	;# 
  2016  0EA6                     	;# 
  2017  0EA7                     	;# 
  2018  0F0F                     	;# 
  2019  0F10                     	;# 
  2020  0F11                     	;# 
  2021  0F12                     	;# 
  2022  0F13                     	;# 
  2023  0F14                     	;# 
  2024  0F15                     	;# 
  2025  0F16                     	;# 
  2026  0F17                     	;# 
  2027  0F18                     	;# 
  2028  0F19                     	;# 
  2029  0F1A                     	;# 
  2030  0F1B                     	;# 
  2031  0F1C                     	;# 
  2032  0F1D                     	;# 
  2033  0F1E                     	;# 
  2034  0F1F                     	;# 
  2035  0F20                     	;# 
  2036  0F21                     	;# 
  2037  0F22                     	;# 
  2038  0F23                     	;# 
  2039  0F24                     	;# 
  2040  0F25                     	;# 
  2041  0F26                     	;# 
  2042  0F27                     	;# 
  2043  0F28                     	;# 
  2044  0F29                     	;# 
  2045  0F2A                     	;# 
  2046  0F2B                     	;# 
  2047  0F2C                     	;# 
  2048  0F2D                     	;# 
  2049  0F9E                     	;# 
  2050  0FE4                     	;# 
  2051  0FE5                     	;# 
  2052  0FE6                     	;# 
  2053  0FE7                     	;# 
  2054  0FE8                     	;# 
  2055  0FE9                     	;# 
  2056  0FEA                     	;# 
  2057  0FEB                     	;# 
  2058  0FED                     	;# 
  2059  0FEE                     	;# 
  2060  0FEF                     	;# 
  2061  0000                     	;# 
  2062  0001                     	;# 
  2063  0002                     	;# 
  2064  0003                     	;# 
  2065  0004                     	;# 
  2066  0005                     	;# 
  2067  0006                     	;# 
  2068  0007                     	;# 
  2069  0008                     	;# 
  2070  0009                     	;# 
  2071  000A                     	;# 
  2072  000B                     	;# 
  2073  000C                     	;# 
  2074  000D                     	;# 
  2075  000E                     	;# 
  2076  0011                     	;# 
  2077  0012                     	;# 
  2078  0013                     	;# 
  2079  0015                     	;# 
  2080  0016                     	;# 
  2081  0016                     	;# 
  2082  0017                     	;# 
  2083  0018                     	;# 
  2084  0019                     	;# 
  2085  001A                     	;# 
  2086  001B                     	;# 
  2087  001C                     	;# 
  2088  008C                     	;# 
  2089  008D                     	;# 
  2090  008E                     	;# 
  2091  0091                     	;# 
  2092  0092                     	;# 
  2093  0093                     	;# 
  2094  0095                     	;# 
  2095  0096                     	;# 
  2096  0097                     	;# 
  2097  0098                     	;# 
  2098  0099                     	;# 
  2099  009A                     	;# 
  2100  009B                     	;# 
  2101  009B                     	;# 
  2102  009C                     	;# 
  2103  009D                     	;# 
  2104  009E                     	;# 
  2105  009F                     	;# 
  2106  010C                     	;# 
  2107  010D                     	;# 
  2108  010E                     	;# 
  2109  0111                     	;# 
  2110  0112                     	;# 
  2111  0113                     	;# 
  2112  0114                     	;# 
  2113  0115                     	;# 
  2114  0116                     	;# 
  2115  0117                     	;# 
  2116  0118                     	;# 
  2117  0119                     	;# 
  2118  011C                     	;# 
  2119  018C                     	;# 
  2120  018D                     	;# 
  2121  018E                     	;# 
  2122  0191                     	;# 
  2123  0191                     	;# 
  2124  0192                     	;# 
  2125  0193                     	;# 
  2126  0193                     	;# 
  2127  0194                     	;# 
  2128  0195                     	;# 
  2129  0196                     	;# 
  2130  0197                     	;# 
  2131  0199                     	;# 
  2132  0199                     	;# 
  2133  0199                     	;# 
  2134  019A                     	;# 
  2135  019A                     	;# 
  2136  019A                     	;# 
  2137  019B                     	;# 
  2138  019B                     	;# 
  2139  019B                     	;# 
  2140  019B                     	;# 
  2141  019B                     	;# 
  2142  019C                     	;# 
  2143  019C                     	;# 
  2144  019C                     	;# 
  2145  019D                     	;# 
  2146  019D                     	;# 
  2147  019D                     	;# 
  2148  019E                     	;# 
  2149  019E                     	;# 
  2150  019E                     	;# 
  2151  019F                     	;# 
  2152  019F                     	;# 
  2153  019F                     	;# 
  2154  019F                     	;# 
  2155  019F                     	;# 
  2156  020C                     	;# 
  2157  020D                     	;# 
  2158  020E                     	;# 
  2159  0211                     	;# 
  2160  0211                     	;# 
  2161  0212                     	;# 
  2162  0212                     	;# 
  2163  0213                     	;# 
  2164  0213                     	;# 
  2165  0214                     	;# 
  2166  0214                     	;# 
  2167  0215                     	;# 
  2168  0215                     	;# 
  2169  0215                     	;# 
  2170  0215                     	;# 
  2171  0216                     	;# 
  2172  0216                     	;# 
  2173  0217                     	;# 
  2174  0217                     	;# 
  2175  028C                     	;# 
  2176  028D                     	;# 
  2177  028E                     	;# 
  2178  0291                     	;# 
  2179  0291                     	;# 
  2180  0292                     	;# 
  2181  0293                     	;# 
  2182  0293                     	;# 
  2183  0298                     	;# 
  2184  0298                     	;# 
  2185  0299                     	;# 
  2186  029A                     	;# 
  2187  029A                     	;# 
  2188  029E                     	;# 
  2189  030C                     	;# 
  2190  030D                     	;# 
  2191  030E                     	;# 
  2192  038C                     	;# 
  2193  038D                     	;# 
  2194  038E                     	;# 
  2195  0391                     	;# 
  2196  0392                     	;# 
  2197  0393                     	;# 
  2198  0394                     	;# 
  2199  0395                     	;# 
  2200  0396                     	;# 
  2201  0397                     	;# 
  2202  0398                     	;# 
  2203  0399                     	;# 
  2204  0415                     	;# 
  2205  0416                     	;# 
  2206  0417                     	;# 
  2207  041C                     	;# 
  2208  041D                     	;# 
  2209  041E                     	;# 
  2210  0511                     	;# 
  2211  0515                     	;# 
  2212  0617                     	;# 
  2213  0618                     	;# 
  2214  0619                     	;# 
  2215  0619                     	;# 
  2216  061A                     	;# 
  2217  061B                     	;# 
  2218  061C                     	;# 
  2219  061C                     	;# 
  2220  0691                     	;# 
  2221  0692                     	;# 
  2222  0693                     	;# 
  2223  0694                     	;# 
  2224  0695                     	;# 
  2225  0696                     	;# 
  2226  0697                     	;# 
  2227  0698                     	;# 
  2228  0699                     	;# 
  2229  069A                     	;# 
  2230  069B                     	;# 
  2231  069C                     	;# 
  2232  069D                     	;# 
  2233  069E                     	;# 
  2234  069F                     	;# 
  2235  0E0F                     	;# 
  2236  0E10                     	;# 
  2237  0E11                     	;# 
  2238  0E12                     	;# 
  2239  0E13                     	;# 
  2240  0E14                     	;# 
  2241  0E15                     	;# 
  2242  0E17                     	;# 
  2243  0E20                     	;# 
  2244  0E21                     	;# 
  2245  0E22                     	;# 
  2246  0E24                     	;# 
  2247  0E25                     	;# 
  2248  0E28                     	;# 
  2249  0E29                     	;# 
  2250  0E2A                     	;# 
  2251  0E2B                     	;# 
  2252  0E90                     	;# 
  2253  0E91                     	;# 
  2254  0E92                     	;# 
  2255  0E94                     	;# 
  2256  0E95                     	;# 
  2257  0E9C                     	;# 
  2258  0E9D                     	;# 
  2259  0E9E                     	;# 
  2260  0E9F                     	;# 
  2261  0EA0                     	;# 
  2262  0EA1                     	;# 
  2263  0EA2                     	;# 
  2264  0EA3                     	;# 
  2265  0EA4                     	;# 
  2266  0EA5                     	;# 
  2267  0EA6                     	;# 
  2268  0EA7                     	;# 
  2269  0F0F                     	;# 
  2270  0F10                     	;# 
  2271  0F11                     	;# 
  2272  0F12                     	;# 
  2273  0F13                     	;# 
  2274  0F14                     	;# 
  2275  0F15                     	;# 
  2276  0F16                     	;# 
  2277  0F17                     	;# 
  2278  0F18                     	;# 
  2279  0F19                     	;# 
  2280  0F1A                     	;# 
  2281  0F1B                     	;# 
  2282  0F1C                     	;# 
  2283  0F1D                     	;# 
  2284  0F1E                     	;# 
  2285  0F1F                     	;# 
  2286  0F20                     	;# 
  2287  0F21                     	;# 
  2288  0F22                     	;# 
  2289  0F23                     	;# 
  2290  0F24                     	;# 
  2291  0F25                     	;# 
  2292  0F26                     	;# 
  2293  0F27                     	;# 
  2294  0F28                     	;# 
  2295  0F29                     	;# 
  2296  0F2A                     	;# 
  2297  0F2B                     	;# 
  2298  0F2C                     	;# 
  2299  0F2D                     	;# 
  2300  0F9E                     	;# 
  2301  0FE4                     	;# 
  2302  0FE5                     	;# 
  2303  0FE6                     	;# 
  2304  0FE7                     	;# 
  2305  0FE8                     	;# 
  2306  0FE9                     	;# 
  2307  0FEA                     	;# 
  2308  0FEB                     	;# 
  2309  0FED                     	;# 
  2310  0FEE                     	;# 
  2311  0FEF                     	;# 
  2312  0000                     	;# 
  2313  0001                     	;# 
  2314  0002                     	;# 
  2315  0003                     	;# 
  2316  0004                     	;# 
  2317  0005                     	;# 
  2318  0006                     	;# 
  2319  0007                     	;# 
  2320  0008                     	;# 
  2321  0009                     	;# 
  2322  000A                     	;# 
  2323  000B                     	;# 
  2324  000C                     	;# 
  2325  000D                     	;# 
  2326  000E                     	;# 
  2327  0011                     	;# 
  2328  0012                     	;# 
  2329  0013                     	;# 
  2330  0015                     	;# 
  2331  0016                     	;# 
  2332  0016                     	;# 
  2333  0017                     	;# 
  2334  0018                     	;# 
  2335  0019                     	;# 
  2336  001A                     	;# 
  2337  001B                     	;# 
  2338  001C                     	;# 
  2339  008C                     	;# 
  2340  008D                     	;# 
  2341  008E                     	;# 
  2342  0091                     	;# 
  2343  0092                     	;# 
  2344  0093                     	;# 
  2345  0095                     	;# 
  2346  0096                     	;# 
  2347  0097                     	;# 
  2348  0098                     	;# 
  2349  0099                     	;# 
  2350  009A                     	;# 
  2351  009B                     	;# 
  2352  009B                     	;# 
  2353  009C                     	;# 
  2354  009D                     	;# 
  2355  009E                     	;# 
  2356  009F                     	;# 
  2357  010C                     	;# 
  2358  010D                     	;# 
  2359  010E                     	;# 
  2360  0111                     	;# 
  2361  0112                     	;# 
  2362  0113                     	;# 
  2363  0114                     	;# 
  2364  0115                     	;# 
  2365  0116                     	;# 
  2366  0117                     	;# 
  2367  0118                     	;# 
  2368  0119                     	;# 
  2369  011C                     	;# 
  2370  018C                     	;# 
  2371  018D                     	;# 
  2372  018E                     	;# 
  2373  0191                     	;# 
  2374  0191                     	;# 
  2375  0192                     	;# 
  2376  0193                     	;# 
  2377  0193                     	;# 
  2378  0194                     	;# 
  2379  0195                     	;# 
  2380  0196                     	;# 
  2381  0197                     	;# 
  2382  0199                     	;# 
  2383  0199                     	;# 
  2384  0199                     	;# 
  2385  019A                     	;# 
  2386  019A                     	;# 
  2387  019A                     	;# 
  2388  019B                     	;# 
  2389  019B                     	;# 
  2390  019B                     	;# 
  2391  019B                     	;# 
  2392  019B                     	;# 
  2393  019C                     	;# 
  2394  019C                     	;# 
  2395  019C                     	;# 
  2396  019D                     	;# 
  2397  019D                     	;# 
  2398  019D                     	;# 
  2399  019E                     	;# 
  2400  019E                     	;# 
  2401  019E                     	;# 
  2402  019F                     	;# 
  2403  019F                     	;# 
  2404  019F                     	;# 
  2405  019F                     	;# 
  2406  019F                     	;# 
  2407  020C                     	;# 
  2408  020D                     	;# 
  2409  020E                     	;# 
  2410  0211                     	;# 
  2411  0211                     	;# 
  2412  0212                     	;# 
  2413  0212                     	;# 
  2414  0213                     	;# 
  2415  0213                     	;# 
  2416  0214                     	;# 
  2417  0214                     	;# 
  2418  0215                     	;# 
  2419  0215                     	;# 
  2420  0215                     	;# 
  2421  0215                     	;# 
  2422  0216                     	;# 
  2423  0216                     	;# 
  2424  0217                     	;# 
  2425  0217                     	;# 
  2426  028C                     	;# 
  2427  028D                     	;# 
  2428  028E                     	;# 
  2429  0291                     	;# 
  2430  0291                     	;# 
  2431  0292                     	;# 
  2432  0293                     	;# 
  2433  0293                     	;# 
  2434  0298                     	;# 
  2435  0298                     	;# 
  2436  0299                     	;# 
  2437  029A                     	;# 
  2438  029A                     	;# 
  2439  029E                     	;# 
  2440  030C                     	;# 
  2441  030D                     	;# 
  2442  030E                     	;# 
  2443  038C                     	;# 
  2444  038D                     	;# 
  2445  038E                     	;# 
  2446  0391                     	;# 
  2447  0392                     	;# 
  2448  0393                     	;# 
  2449  0394                     	;# 
  2450  0395                     	;# 
  2451  0396                     	;# 
  2452  0397                     	;# 
  2453  0398                     	;# 
  2454  0399                     	;# 
  2455  0415                     	;# 
  2456  0416                     	;# 
  2457  0417                     	;# 
  2458  041C                     	;# 
  2459  041D                     	;# 
  2460  041E                     	;# 
  2461  0511                     	;# 
  2462  0515                     	;# 
  2463  0617                     	;# 
  2464  0618                     	;# 
  2465  0619                     	;# 
  2466  0619                     	;# 
  2467  061A                     	;# 
  2468  061B                     	;# 
  2469  061C                     	;# 
  2470  061C                     	;# 
  2471  0691                     	;# 
  2472  0692                     	;# 
  2473  0693                     	;# 
  2474  0694                     	;# 
  2475  0695                     	;# 
  2476  0696                     	;# 
  2477  0697                     	;# 
  2478  0698                     	;# 
  2479  0699                     	;# 
  2480  069A                     	;# 
  2481  069B                     	;# 
  2482  069C                     	;# 
  2483  069D                     	;# 
  2484  069E                     	;# 
  2485  069F                     	;# 
  2486  0E0F                     	;# 
  2487  0E10                     	;# 
  2488  0E11                     	;# 
  2489  0E12                     	;# 
  2490  0E13                     	;# 
  2491  0E14                     	;# 
  2492  0E15                     	;# 
  2493  0E17                     	;# 
  2494  0E20                     	;# 
  2495  0E21                     	;# 
  2496  0E22                     	;# 
  2497  0E24                     	;# 
  2498  0E25                     	;# 
  2499  0E28                     	;# 
  2500  0E29                     	;# 
  2501  0E2A                     	;# 
  2502  0E2B                     	;# 
  2503  0E90                     	;# 
  2504  0E91                     	;# 
  2505  0E92                     	;# 
  2506  0E94                     	;# 
  2507  0E95                     	;# 
  2508  0E9C                     	;# 
  2509  0E9D                     	;# 
  2510  0E9E                     	;# 
  2511  0E9F                     	;# 
  2512  0EA0                     	;# 
  2513  0EA1                     	;# 
  2514  0EA2                     	;# 
  2515  0EA3                     	;# 
  2516  0EA4                     	;# 
  2517  0EA5                     	;# 
  2518  0EA6                     	;# 
  2519  0EA7                     	;# 
  2520  0F0F                     	;# 
  2521  0F10                     	;# 
  2522  0F11                     	;# 
  2523  0F12                     	;# 
  2524  0F13                     	;# 
  2525  0F14                     	;# 
  2526  0F15                     	;# 
  2527  0F16                     	;# 
  2528  0F17                     	;# 
  2529  0F18                     	;# 
  2530  0F19                     	;# 
  2531  0F1A                     	;# 
  2532  0F1B                     	;# 
  2533  0F1C                     	;# 
  2534  0F1D                     	;# 
  2535  0F1E                     	;# 
  2536  0F1F                     	;# 
  2537  0F20                     	;# 
  2538  0F21                     	;# 
  2539  0F22                     	;# 
  2540  0F23                     	;# 
  2541  0F24                     	;# 
  2542  0F25                     	;# 
  2543  0F26                     	;# 
  2544  0F27                     	;# 
  2545  0F28                     	;# 
  2546  0F29                     	;# 
  2547  0F2A                     	;# 
  2548  0F2B                     	;# 
  2549  0F2C                     	;# 
  2550  0F2D                     	;# 
  2551  0F9E                     	;# 
  2552  0FE4                     	;# 
  2553  0FE5                     	;# 
  2554  0FE6                     	;# 
  2555  0FE7                     	;# 
  2556  0FE8                     	;# 
  2557  0FE9                     	;# 
  2558  0FEA                     	;# 
  2559  0FEB                     	;# 
  2560  0FED                     	;# 
  2561  0FEE                     	;# 
  2562  0FEF                     	;# 
  2563  0000                     	;# 
  2564  0001                     	;# 
  2565  0002                     	;# 
  2566  0003                     	;# 
  2567  0004                     	;# 
  2568  0005                     	;# 
  2569  0006                     	;# 
  2570  0007                     	;# 
  2571  0008                     	;# 
  2572  0009                     	;# 
  2573  000A                     	;# 
  2574  000B                     	;# 
  2575  000C                     	;# 
  2576  000D                     	;# 
  2577  000E                     	;# 
  2578  0011                     	;# 
  2579  0012                     	;# 
  2580  0013                     	;# 
  2581  0015                     	;# 
  2582  0016                     	;# 
  2583  0016                     	;# 
  2584  0017                     	;# 
  2585  0018                     	;# 
  2586  0019                     	;# 
  2587  001A                     	;# 
  2588  001B                     	;# 
  2589  001C                     	;# 
  2590  008C                     	;# 
  2591  008D                     	;# 
  2592  008E                     	;# 
  2593  0091                     	;# 
  2594  0092                     	;# 
  2595  0093                     	;# 
  2596  0095                     	;# 
  2597  0096                     	;# 
  2598  0097                     	;# 
  2599  0098                     	;# 
  2600  0099                     	;# 
  2601  009A                     	;# 
  2602  009B                     	;# 
  2603  009B                     	;# 
  2604  009C                     	;# 
  2605  009D                     	;# 
  2606  009E                     	;# 
  2607  009F                     	;# 
  2608  010C                     	;# 
  2609  010D                     	;# 
  2610  010E                     	;# 
  2611  0111                     	;# 
  2612  0112                     	;# 
  2613  0113                     	;# 
  2614  0114                     	;# 
  2615  0115                     	;# 
  2616  0116                     	;# 
  2617  0117                     	;# 
  2618  0118                     	;# 
  2619  0119                     	;# 
  2620  011C                     	;# 
  2621  018C                     	;# 
  2622  018D                     	;# 
  2623  018E                     	;# 
  2624  0191                     	;# 
  2625  0191                     	;# 
  2626  0192                     	;# 
  2627  0193                     	;# 
  2628  0193                     	;# 
  2629  0194                     	;# 
  2630  0195                     	;# 
  2631  0196                     	;# 
  2632  0197                     	;# 
  2633  0199                     	;# 
  2634  0199                     	;# 
  2635  0199                     	;# 
  2636  019A                     	;# 
  2637  019A                     	;# 
  2638  019A                     	;# 
  2639  019B                     	;# 
  2640  019B                     	;# 
  2641  019B                     	;# 
  2642  019B                     	;# 
  2643  019B                     	;# 
  2644  019C                     	;# 
  2645  019C                     	;# 
  2646  019C                     	;# 
  2647  019D                     	;# 
  2648  019D                     	;# 
  2649  019D                     	;# 
  2650  019E                     	;# 
  2651  019E                     	;# 
  2652  019E                     	;# 
  2653  019F                     	;# 
  2654  019F                     	;# 
  2655  019F                     	;# 
  2656  019F                     	;# 
  2657  019F                     	;# 
  2658  020C                     	;# 
  2659  020D                     	;# 
  2660  020E                     	;# 
  2661  0211                     	;# 
  2662  0211                     	;# 
  2663  0212                     	;# 
  2664  0212                     	;# 
  2665  0213                     	;# 
  2666  0213                     	;# 
  2667  0214                     	;# 
  2668  0214                     	;# 
  2669  0215                     	;# 
  2670  0215                     	;# 
  2671  0215                     	;# 
  2672  0215                     	;# 
  2673  0216                     	;# 
  2674  0216                     	;# 
  2675  0217                     	;# 
  2676  0217                     	;# 
  2677  028C                     	;# 
  2678  028D                     	;# 
  2679  028E                     	;# 
  2680  0291                     	;# 
  2681  0291                     	;# 
  2682  0292                     	;# 
  2683  0293                     	;# 
  2684  0293                     	;# 
  2685  0298                     	;# 
  2686  0298                     	;# 
  2687  0299                     	;# 
  2688  029A                     	;# 
  2689  029A                     	;# 
  2690  029E                     	;# 
  2691  030C                     	;# 
  2692  030D                     	;# 
  2693  030E                     	;# 
  2694  038C                     	;# 
  2695  038D                     	;# 
  2696  038E                     	;# 
  2697  0391                     	;# 
  2698  0392                     	;# 
  2699  0393                     	;# 
  2700  0394                     	;# 
  2701  0395                     	;# 
  2702  0396                     	;# 
  2703  0397                     	;# 
  2704  0398                     	;# 
  2705  0399                     	;# 
  2706  0415                     	;# 
  2707  0416                     	;# 
  2708  0417                     	;# 
  2709  041C                     	;# 
  2710  041D                     	;# 
  2711  041E                     	;# 
  2712  0511                     	;# 
  2713  0515                     	;# 
  2714  0617                     	;# 
  2715  0618                     	;# 
  2716  0619                     	;# 
  2717  0619                     	;# 
  2718  061A                     	;# 
  2719  061B                     	;# 
  2720  061C                     	;# 
  2721  061C                     	;# 
  2722  0691                     	;# 
  2723  0692                     	;# 
  2724  0693                     	;# 
  2725  0694                     	;# 
  2726  0695                     	;# 
  2727  0696                     	;# 
  2728  0697                     	;# 
  2729  0698                     	;# 
  2730  0699                     	;# 
  2731  069A                     	;# 
  2732  069B                     	;# 
  2733  069C                     	;# 
  2734  069D                     	;# 
  2735  069E                     	;# 
  2736  069F                     	;# 
  2737  0E0F                     	;# 
  2738  0E10                     	;# 
  2739  0E11                     	;# 
  2740  0E12                     	;# 
  2741  0E13                     	;# 
  2742  0E14                     	;# 
  2743  0E15                     	;# 
  2744  0E17                     	;# 
  2745  0E20                     	;# 
  2746  0E21                     	;# 
  2747  0E22                     	;# 
  2748  0E24                     	;# 
  2749  0E25                     	;# 
  2750  0E28                     	;# 
  2751  0E29                     	;# 
  2752  0E2A                     	;# 
  2753  0E2B                     	;# 
  2754  0E90                     	;# 
  2755  0E91                     	;# 
  2756  0E92                     	;# 
  2757  0E94                     	;# 
  2758  0E95                     	;# 
  2759  0E9C                     	;# 
  2760  0E9D                     	;# 
  2761  0E9E                     	;# 
  2762  0E9F                     	;# 
  2763  0EA0                     	;# 
  2764  0EA1                     	;# 
  2765  0EA2                     	;# 
  2766  0EA3                     	;# 
  2767  0EA4                     	;# 
  2768  0EA5                     	;# 
  2769  0EA6                     	;# 
  2770  0EA7                     	;# 
  2771  0F0F                     	;# 
  2772  0F10                     	;# 
  2773  0F11                     	;# 
  2774  0F12                     	;# 
  2775  0F13                     	;# 
  2776  0F14                     	;# 
  2777  0F15                     	;# 
  2778  0F16                     	;# 
  2779  0F17                     	;# 
  2780  0F18                     	;# 
  2781  0F19                     	;# 
  2782  0F1A                     	;# 
  2783  0F1B                     	;# 
  2784  0F1C                     	;# 
  2785  0F1D                     	;# 
  2786  0F1E                     	;# 
  2787  0F1F                     	;# 
  2788  0F20                     	;# 
  2789  0F21                     	;# 
  2790  0F22                     	;# 
  2791  0F23                     	;# 
  2792  0F24                     	;# 
  2793  0F25                     	;# 
  2794  0F26                     	;# 
  2795  0F27                     	;# 
  2796  0F28                     	;# 
  2797  0F29                     	;# 
  2798  0F2A                     	;# 
  2799  0F2B                     	;# 
  2800  0F2C                     	;# 
  2801  0F2D                     	;# 
  2802  0F9E                     	;# 
  2803  0FE4                     	;# 
  2804  0FE5                     	;# 
  2805  0FE6                     	;# 
  2806  0FE7                     	;# 
  2807  0FE8                     	;# 
  2808  0FE9                     	;# 
  2809  0FEA                     	;# 
  2810  0FEB                     	;# 
  2811  0FED                     	;# 
  2812  0FEE                     	;# 
  2813  0FEF                     	;# 
  2814  0000                     	;# 
  2815  0001                     	;# 
  2816  0002                     	;# 
  2817  0003                     	;# 
  2818  0004                     	;# 
  2819  0005                     	;# 
  2820  0006                     	;# 
  2821  0007                     	;# 
  2822  0008                     	;# 
  2823  0009                     	;# 
  2824  000A                     	;# 
  2825  000B                     	;# 
  2826  000C                     	;# 
  2827  000D                     	;# 
  2828  000E                     	;# 
  2829  0011                     	;# 
  2830  0012                     	;# 
  2831  0013                     	;# 
  2832  0015                     	;# 
  2833  0016                     	;# 
  2834  0016                     	;# 
  2835  0017                     	;# 
  2836  0018                     	;# 
  2837  0019                     	;# 
  2838  001A                     	;# 
  2839  001B                     	;# 
  2840  001C                     	;# 
  2841  008C                     	;# 
  2842  008D                     	;# 
  2843  008E                     	;# 
  2844  0091                     	;# 
  2845  0092                     	;# 
  2846  0093                     	;# 
  2847  0095                     	;# 
  2848  0096                     	;# 
  2849  0097                     	;# 
  2850  0098                     	;# 
  2851  0099                     	;# 
  2852  009A                     	;# 
  2853  009B                     	;# 
  2854  009B                     	;# 
  2855  009C                     	;# 
  2856  009D                     	;# 
  2857  009E                     	;# 
  2858  009F                     	;# 
  2859  010C                     	;# 
  2860  010D                     	;# 
  2861  010E                     	;# 
  2862  0111                     	;# 
  2863  0112                     	;# 
  2864  0113                     	;# 
  2865  0114                     	;# 
  2866  0115                     	;# 
  2867  0116                     	;# 
  2868  0117                     	;# 
  2869  0118                     	;# 
  2870  0119                     	;# 
  2871  011C                     	;# 
  2872  018C                     	;# 
  2873  018D                     	;# 
  2874  018E                     	;# 
  2875  0191                     	;# 
  2876  0191                     	;# 
  2877  0192                     	;# 
  2878  0193                     	;# 
  2879  0193                     	;# 
  2880  0194                     	;# 
  2881  0195                     	;# 
  2882  0196                     	;# 
  2883  0197                     	;# 
  2884  0199                     	;# 
  2885  0199                     	;# 
  2886  0199                     	;# 
  2887  019A                     	;# 
  2888  019A                     	;# 
  2889  019A                     	;# 
  2890  019B                     	;# 
  2891  019B                     	;# 
  2892  019B                     	;# 
  2893  019B                     	;# 
  2894  019B                     	;# 
  2895  019C                     	;# 
  2896  019C                     	;# 
  2897  019C                     	;# 
  2898  019D                     	;# 
  2899  019D                     	;# 
  2900  019D                     	;# 
  2901  019E                     	;# 
  2902  019E                     	;# 
  2903  019E                     	;# 
  2904  019F                     	;# 
  2905  019F                     	;# 
  2906  019F                     	;# 
  2907  019F                     	;# 
  2908  019F                     	;# 
  2909  020C                     	;# 
  2910  020D                     	;# 
  2911  020E                     	;# 
  2912  0211                     	;# 
  2913  0211                     	;# 
  2914  0212                     	;# 
  2915  0212                     	;# 
  2916  0213                     	;# 
  2917  0213                     	;# 
  2918  0214                     	;# 
  2919  0214                     	;# 
  2920  0215                     	;# 
  2921  0215                     	;# 
  2922  0215                     	;# 
  2923  0215                     	;# 
  2924  0216                     	;# 
  2925  0216                     	;# 
  2926  0217                     	;# 
  2927  0217                     	;# 
  2928  028C                     	;# 
  2929  028D                     	;# 
  2930  028E                     	;# 
  2931  0291                     	;# 
  2932  0291                     	;# 
  2933  0292                     	;# 
  2934  0293                     	;# 
  2935  0293                     	;# 
  2936  0298                     	;# 
  2937  0298                     	;# 
  2938  0299                     	;# 
  2939  029A                     	;# 
  2940  029A                     	;# 
  2941  029E                     	;# 
  2942  030C                     	;# 
  2943  030D                     	;# 
  2944  030E                     	;# 
  2945  038C                     	;# 
  2946  038D                     	;# 
  2947  038E                     	;# 
  2948  0391                     	;# 
  2949  0392                     	;# 
  2950  0393                     	;# 
  2951  0394                     	;# 
  2952  0395                     	;# 
  2953  0396                     	;# 
  2954  0397                     	;# 
  2955  0398                     	;# 
  2956  0399                     	;# 
  2957  0415                     	;# 
  2958  0416                     	;# 
  2959  0417                     	;# 
  2960  041C                     	;# 
  2961  041D                     	;# 
  2962  041E                     	;# 
  2963  0511                     	;# 
  2964  0515                     	;# 
  2965  0617                     	;# 
  2966  0618                     	;# 
  2967  0619                     	;# 
  2968  0619                     	;# 
  2969  061A                     	;# 
  2970  061B                     	;# 
  2971  061C                     	;# 
  2972  061C                     	;# 
  2973  0691                     	;# 
  2974  0692                     	;# 
  2975  0693                     	;# 
  2976  0694                     	;# 
  2977  0695                     	;# 
  2978  0696                     	;# 
  2979  0697                     	;# 
  2980  0698                     	;# 
  2981  0699                     	;# 
  2982  069A                     	;# 
  2983  069B                     	;# 
  2984  069C                     	;# 
  2985  069D                     	;# 
  2986  069E                     	;# 
  2987  069F                     	;# 
  2988  0E0F                     	;# 
  2989  0E10                     	;# 
  2990  0E11                     	;# 
  2991  0E12                     	;# 
  2992  0E13                     	;# 
  2993  0E14                     	;# 
  2994  0E15                     	;# 
  2995  0E17                     	;# 
  2996  0E20                     	;# 
  2997  0E21                     	;# 
  2998  0E22                     	;# 
  2999  0E24                     	;# 
  3000  0E25                     	;# 
  3001  0E28                     	;# 
  3002  0E29                     	;# 
  3003  0E2A                     	;# 
  3004  0E2B                     	;# 
  3005  0E90                     	;# 
  3006  0E91                     	;# 
  3007  0E92                     	;# 
  3008  0E94                     	;# 
  3009  0E95                     	;# 
  3010  0E9C                     	;# 
  3011  0E9D                     	;# 
  3012  0E9E                     	;# 
  3013  0E9F                     	;# 
  3014  0EA0                     	;# 
  3015  0EA1                     	;# 
  3016  0EA2                     	;# 
  3017  0EA3                     	;# 
  3018  0EA4                     	;# 
  3019  0EA5                     	;# 
  3020  0EA6                     	;# 
  3021  0EA7                     	;# 
  3022  0F0F                     	;# 
  3023  0F10                     	;# 
  3024  0F11                     	;# 
  3025  0F12                     	;# 
  3026  0F13                     	;# 
  3027  0F14                     	;# 
  3028  0F15                     	;# 
  3029  0F16                     	;# 
  3030  0F17                     	;# 
  3031  0F18                     	;# 
  3032  0F19                     	;# 
  3033  0F1A                     	;# 
  3034  0F1B                     	;# 
  3035  0F1C                     	;# 
  3036  0F1D                     	;# 
  3037  0F1E                     	;# 
  3038  0F1F                     	;# 
  3039  0F20                     	;# 
  3040  0F21                     	;# 
  3041  0F22                     	;# 
  3042  0F23                     	;# 
  3043  0F24                     	;# 
  3044  0F25                     	;# 
  3045  0F26                     	;# 
  3046  0F27                     	;# 
  3047  0F28                     	;# 
  3048  0F29                     	;# 
  3049  0F2A                     	;# 
  3050  0F2B                     	;# 
  3051  0F2C                     	;# 
  3052  0F2D                     	;# 
  3053  0F9E                     	;# 
  3054  0FE4                     	;# 
  3055  0FE5                     	;# 
  3056  0FE6                     	;# 
  3057  0FE7                     	;# 
  3058  0FE8                     	;# 
  3059  0FE9                     	;# 
  3060  0FEA                     	;# 
  3061  0FEB                     	;# 
  3062  0FED                     	;# 
  3063  0FEE                     	;# 
  3064  0FEF                     	;# 
  3065  0000                     	;# 
  3066  0001                     	;# 
  3067  0002                     	;# 
  3068  0003                     	;# 
  3069  0004                     	;# 
  3070  0005                     	;# 
  3071  0006                     	;# 
  3072  0007                     	;# 
  3073  0008                     	;# 
  3074  0009                     	;# 
  3075  000A                     	;# 
  3076  000B                     	;# 
  3077  000C                     	;# 
  3078  000D                     	;# 
  3079  000E                     	;# 
  3080  0011                     	;# 
  3081  0012                     	;# 
  3082  0013                     	;# 
  3083  0015                     	;# 
  3084  0016                     	;# 
  3085  0016                     	;# 
  3086  0017                     	;# 
  3087  0018                     	;# 
  3088  0019                     	;# 
  3089  001A                     	;# 
  3090  001B                     	;# 
  3091  001C                     	;# 
  3092  008C                     	;# 
  3093  008D                     	;# 
  3094  008E                     	;# 
  3095  0091                     	;# 
  3096  0092                     	;# 
  3097  0093                     	;# 
  3098  0095                     	;# 
  3099  0096                     	;# 
  3100  0097                     	;# 
  3101  0098                     	;# 
  3102  0099                     	;# 
  3103  009A                     	;# 
  3104  009B                     	;# 
  3105  009B                     	;# 
  3106  009C                     	;# 
  3107  009D                     	;# 
  3108  009E                     	;# 
  3109  009F                     	;# 
  3110  010C                     	;# 
  3111  010D                     	;# 
  3112  010E                     	;# 
  3113  0111                     	;# 
  3114  0112                     	;# 
  3115  0113                     	;# 
  3116  0114                     	;# 
  3117  0115                     	;# 
  3118  0116                     	;# 
  3119  0117                     	;# 
  3120  0118                     	;# 
  3121  0119                     	;# 
  3122  011C                     	;# 
  3123  018C                     	;# 
  3124  018D                     	;# 
  3125  018E                     	;# 
  3126  0191                     	;# 
  3127  0191                     	;# 
  3128  0192                     	;# 
  3129  0193                     	;# 
  3130  0193                     	;# 
  3131  0194                     	;# 
  3132  0195                     	;# 
  3133  0196                     	;# 
  3134  0197                     	;# 
  3135  0199                     	;# 
  3136  0199                     	;# 
  3137  0199                     	;# 
  3138  019A                     	;# 
  3139  019A                     	;# 
  3140  019A                     	;# 
  3141  019B                     	;# 
  3142  019B                     	;# 
  3143  019B                     	;# 
  3144  019B                     	;# 
  3145  019B                     	;# 
  3146  019C                     	;# 
  3147  019C                     	;# 
  3148  019C                     	;# 
  3149  019D                     	;# 
  3150  019D                     	;# 
  3151  019D                     	;# 
  3152  019E                     	;# 
  3153  019E                     	;# 
  3154  019E                     	;# 
  3155  019F                     	;# 
  3156  019F                     	;# 
  3157  019F                     	;# 
  3158  019F                     	;# 
  3159  019F                     	;# 
  3160  020C                     	;# 
  3161  020D                     	;# 
  3162  020E                     	;# 
  3163  0211                     	;# 
  3164  0211                     	;# 
  3165  0212                     	;# 
  3166  0212                     	;# 
  3167  0213                     	;# 
  3168  0213                     	;# 
  3169  0214                     	;# 
  3170  0214                     	;# 
  3171  0215                     	;# 
  3172  0215                     	;# 
  3173  0215                     	;# 
  3174  0215                     	;# 
  3175  0216                     	;# 
  3176  0216                     	;# 
  3177  0217                     	;# 
  3178  0217                     	;# 
  3179  028C                     	;# 
  3180  028D                     	;# 
  3181  028E                     	;# 
  3182  0291                     	;# 
  3183  0291                     	;# 
  3184  0292                     	;# 
  3185  0293                     	;# 
  3186  0293                     	;# 
  3187  0298                     	;# 
  3188  0298                     	;# 
  3189  0299                     	;# 
  3190  029A                     	;# 
  3191  029A                     	;# 
  3192  029E                     	;# 
  3193  030C                     	;# 
  3194  030D                     	;# 
  3195  030E                     	;# 
  3196  038C                     	;# 
  3197  038D                     	;# 
  3198  038E                     	;# 
  3199  0391                     	;# 
  3200  0392                     	;# 
  3201  0393                     	;# 
  3202  0394                     	;# 
  3203  0395                     	;# 
  3204  0396                     	;# 
  3205  0397                     	;# 
  3206  0398                     	;# 
  3207  0399                     	;# 
  3208  0415                     	;# 
  3209  0416                     	;# 
  3210  0417                     	;# 
  3211  041C                     	;# 
  3212  041D                     	;# 
  3213  041E                     	;# 
  3214  0511                     	;# 
  3215  0515                     	;# 
  3216  0617                     	;# 
  3217  0618                     	;# 
  3218  0619                     	;# 
  3219  0619                     	;# 
  3220  061A                     	;# 
  3221  061B                     	;# 
  3222  061C                     	;# 
  3223  061C                     	;# 
  3224  0691                     	;# 
  3225  0692                     	;# 
  3226  0693                     	;# 
  3227  0694                     	;# 
  3228  0695                     	;# 
  3229  0696                     	;# 
  3230  0697                     	;# 
  3231  0698                     	;# 
  3232  0699                     	;# 
  3233  069A                     	;# 
  3234  069B                     	;# 
  3235  069C                     	;# 
  3236  069D                     	;# 
  3237  069E                     	;# 
  3238  069F                     	;# 
  3239  0E0F                     	;# 
  3240  0E10                     	;# 
  3241  0E11                     	;# 
  3242  0E12                     	;# 
  3243  0E13                     	;# 
  3244  0E14                     	;# 
  3245  0E15                     	;# 
  3246  0E17                     	;# 
  3247  0E20                     	;# 
  3248  0E21                     	;# 
  3249  0E22                     	;# 
  3250  0E24                     	;# 
  3251  0E25                     	;# 
  3252  0E28                     	;# 
  3253  0E29                     	;# 
  3254  0E2A                     	;# 
  3255  0E2B                     	;# 
  3256  0E90                     	;# 
  3257  0E91                     	;# 
  3258  0E92                     	;# 
  3259  0E94                     	;# 
  3260  0E95                     	;# 
  3261  0E9C                     	;# 
  3262  0E9D                     	;# 
  3263  0E9E                     	;# 
  3264  0E9F                     	;# 
  3265  0EA0                     	;# 
  3266  0EA1                     	;# 
  3267  0EA2                     	;# 
  3268  0EA3                     	;# 
  3269  0EA4                     	;# 
  3270  0EA5                     	;# 
  3271  0EA6                     	;# 
  3272  0EA7                     	;# 
  3273  0F0F                     	;# 
  3274  0F10                     	;# 
  3275  0F11                     	;# 
  3276  0F12                     	;# 
  3277  0F13                     	;# 
  3278  0F14                     	;# 
  3279  0F15                     	;# 
  3280  0F16                     	;# 
  3281  0F17                     	;# 
  3282  0F18                     	;# 
  3283  0F19                     	;# 
  3284  0F1A                     	;# 
  3285  0F1B                     	;# 
  3286  0F1C                     	;# 
  3287  0F1D                     	;# 
  3288  0F1E                     	;# 
  3289  0F1F                     	;# 
  3290  0F20                     	;# 
  3291  0F21                     	;# 
  3292  0F22                     	;# 
  3293  0F23                     	;# 
  3294  0F24                     	;# 
  3295  0F25                     	;# 
  3296  0F26                     	;# 
  3297  0F27                     	;# 
  3298  0F28                     	;# 
  3299  0F29                     	;# 
  3300  0F2A                     	;# 
  3301  0F2B                     	;# 
  3302  0F2C                     	;# 
  3303  0F2D                     	;# 
  3304  0F9E                     	;# 
  3305  0FE4                     	;# 
  3306  0FE5                     	;# 
  3307  0FE6                     	;# 
  3308  0FE7                     	;# 
  3309  0FE8                     	;# 
  3310  0FE9                     	;# 
  3311  0FEA                     	;# 
  3312  0FEB                     	;# 
  3313  0FED                     	;# 
  3314  0FEE                     	;# 
  3315  0FEF                     	;# 
  3316  0000                     	;# 
  3317  0001                     	;# 
  3318  0002                     	;# 
  3319  0003                     	;# 
  3320  0004                     	;# 
  3321  0005                     	;# 
  3322  0006                     	;# 
  3323  0007                     	;# 
  3324  0008                     	;# 
  3325  0009                     	;# 
  3326  000A                     	;# 
  3327  000B                     	;# 
  3328  000C                     	;# 
  3329  000D                     	;# 
  3330  000E                     	;# 
  3331  0011                     	;# 
  3332  0012                     	;# 
  3333  0013                     	;# 
  3334  0015                     	;# 
  3335  0016                     	;# 
  3336  0016                     	;# 
  3337  0017                     	;# 
  3338  0018                     	;# 
  3339  0019                     	;# 
  3340  001A                     	;# 
  3341  001B                     	;# 
  3342  001C                     	;# 
  3343  008C                     	;# 
  3344  008D                     	;# 
  3345  008E                     	;# 
  3346  0091                     	;# 
  3347  0092                     	;# 
  3348  0093                     	;# 
  3349  0095                     	;# 
  3350  0096                     	;# 
  3351  0097                     	;# 
  3352  0098                     	;# 
  3353  0099                     	;# 
  3354  009A                     	;# 
  3355  009B                     	;# 
  3356  009B                     	;# 
  3357  009C                     	;# 
  3358  009D                     	;# 
  3359  009E                     	;# 
  3360  009F                     	;# 
  3361  010C                     	;# 
  3362  010D                     	;# 
  3363  010E                     	;# 
  3364  0111                     	;# 
  3365  0112                     	;# 
  3366  0113                     	;# 
  3367  0114                     	;# 
  3368  0115                     	;# 
  3369  0116                     	;# 
  3370  0117                     	;# 
  3371  0118                     	;# 
  3372  0119                     	;# 
  3373  011C                     	;# 
  3374  018C                     	;# 
  3375  018D                     	;# 
  3376  018E                     	;# 
  3377  0191                     	;# 
  3378  0191                     	;# 
  3379  0192                     	;# 
  3380  0193                     	;# 
  3381  0193                     	;# 
  3382  0194                     	;# 
  3383  0195                     	;# 
  3384  0196                     	;# 
  3385  0197                     	;# 
  3386  0199                     	;# 
  3387  0199                     	;# 
  3388  0199                     	;# 
  3389  019A                     	;# 
  3390  019A                     	;# 
  3391  019A                     	;# 
  3392  019B                     	;# 
  3393  019B                     	;# 
  3394  019B                     	;# 
  3395  019B                     	;# 
  3396  019B                     	;# 
  3397  019C                     	;# 
  3398  019C                     	;# 
  3399  019C                     	;# 
  3400  019D                     	;# 
  3401  019D                     	;# 
  3402  019D                     	;# 
  3403  019E                     	;# 
  3404  019E                     	;# 
  3405  019E                     	;# 
  3406  019F                     	;# 
  3407  019F                     	;# 
  3408  019F                     	;# 
  3409  019F                     	;# 
  3410  019F                     	;# 
  3411  020C                     	;# 
  3412  020D                     	;# 
  3413  020E                     	;# 
  3414  0211                     	;# 
  3415  0211                     	;# 
  3416  0212                     	;# 
  3417  0212                     	;# 
  3418  0213                     	;# 
  3419  0213                     	;# 
  3420  0214                     	;# 
  3421  0214                     	;# 
  3422  0215                     	;# 
  3423  0215                     	;# 
  3424  0215                     	;# 
  3425  0215                     	;# 
  3426  0216                     	;# 
  3427  0216                     	;# 
  3428  0217                     	;# 
  3429  0217                     	;# 
  3430  028C                     	;# 
  3431  028D                     	;# 
  3432  028E                     	;# 
  3433  0291                     	;# 
  3434  0291                     	;# 
  3435  0292                     	;# 
  3436  0293                     	;# 
  3437  0293                     	;# 
  3438  0298                     	;# 
  3439  0298                     	;# 
  3440  0299                     	;# 
  3441  029A                     	;# 
  3442  029A                     	;# 
  3443  029E                     	;# 
  3444  030C                     	;# 
  3445  030D                     	;# 
  3446  030E                     	;# 
  3447  038C                     	;# 
  3448  038D                     	;# 
  3449  038E                     	;# 
  3450  0391                     	;# 
  3451  0392                     	;# 
  3452  0393                     	;# 
  3453  0394                     	;# 
  3454  0395                     	;# 
  3455  0396                     	;# 
  3456  0397                     	;# 
  3457  0398                     	;# 
  3458  0399                     	;# 
  3459  0415                     	;# 
  3460  0416                     	;# 
  3461  0417                     	;# 
  3462  041C                     	;# 
  3463  041D                     	;# 
  3464  041E                     	;# 
  3465  0511                     	;# 
  3466  0515                     	;# 
  3467  0617                     	;# 
  3468  0618                     	;# 
  3469  0619                     	;# 
  3470  0619                     	;# 
  3471  061A                     	;# 
  3472  061B                     	;# 
  3473  061C                     	;# 
  3474  061C                     	;# 
  3475  0691                     	;# 
  3476  0692                     	;# 
  3477  0693                     	;# 
  3478  0694                     	;# 
  3479  0695                     	;# 
  3480  0696                     	;# 
  3481  0697                     	;# 
  3482  0698                     	;# 
  3483  0699                     	;# 
  3484  069A                     	;# 
  3485  069B                     	;# 
  3486  069C                     	;# 
  3487  069D                     	;# 
  3488  069E                     	;# 
  3489  069F                     	;# 
  3490  0E0F                     	;# 
  3491  0E10                     	;# 
  3492  0E11                     	;# 
  3493  0E12                     	;# 
  3494  0E13                     	;# 
  3495  0E14                     	;# 
  3496  0E15                     	;# 
  3497  0E17                     	;# 
  3498  0E20                     	;# 
  3499  0E21                     	;# 
  3500  0E22                     	;# 
  3501  0E24                     	;# 
  3502  0E25                     	;# 
  3503  0E28                     	;# 
  3504  0E29                     	;# 
  3505  0E2A                     	;# 
  3506  0E2B                     	;# 
  3507  0E90                     	;# 
  3508  0E91                     	;# 
  3509  0E92                     	;# 
  3510  0E94                     	;# 
  3511  0E95                     	;# 
  3512  0E9C                     	;# 
  3513  0E9D                     	;# 
  3514  0E9E                     	;# 
  3515  0E9F                     	;# 
  3516  0EA0                     	;# 
  3517  0EA1                     	;# 
  3518  0EA2                     	;# 
  3519  0EA3                     	;# 
  3520  0EA4                     	;# 
  3521  0EA5                     	;# 
  3522  0EA6                     	;# 
  3523  0EA7                     	;# 
  3524  0F0F                     	;# 
  3525  0F10                     	;# 
  3526  0F11                     	;# 
  3527  0F12                     	;# 
  3528  0F13                     	;# 
  3529  0F14                     	;# 
  3530  0F15                     	;# 
  3531  0F16                     	;# 
  3532  0F17                     	;# 
  3533  0F18                     	;# 
  3534  0F19                     	;# 
  3535  0F1A                     	;# 
  3536  0F1B                     	;# 
  3537  0F1C                     	;# 
  3538  0F1D                     	;# 
  3539  0F1E                     	;# 
  3540  0F1F                     	;# 
  3541  0F20                     	;# 
  3542  0F21                     	;# 
  3543  0F22                     	;# 
  3544  0F23                     	;# 
  3545  0F24                     	;# 
  3546  0F25                     	;# 
  3547  0F26                     	;# 
  3548  0F27                     	;# 
  3549  0F28                     	;# 
  3550  0F29                     	;# 
  3551  0F2A                     	;# 
  3552  0F2B                     	;# 
  3553  0F2C                     	;# 
  3554  0F2D                     	;# 
  3555  0F9E                     	;# 
  3556  0FE4                     	;# 
  3557  0FE5                     	;# 
  3558  0FE6                     	;# 
  3559  0FE7                     	;# 
  3560  0FE8                     	;# 
  3561  0FE9                     	;# 
  3562  0FEA                     	;# 
  3563  0FEB                     	;# 
  3564  0FED                     	;# 
  3565  0FEE                     	;# 
  3566  0FEF                     	;# 
  3567                           
  3568 ;; Function _TMR1_DefaultInterruptHandler is unused but had its address taken
  3569  0000                     
  3570                           	psect	stringtext
  3571  1000                     __pstringtext:	
  3572  1000                     _dpowers:	
  3573  1000  3401               	retlw	1
  3574  1001  3400               	retlw	0
  3575  1002  3400               	retlw	0
  3576  1003  3400               	retlw	0
  3577  1004  340A               	retlw	10
  3578  1005  3400               	retlw	0
  3579  1006  3400               	retlw	0
  3580  1007  3400               	retlw	0
  3581  1008  3464               	retlw	100
  3582  1009  3400               	retlw	0
  3583  100A  3400               	retlw	0
  3584  100B  3400               	retlw	0
  3585  100C  34E8               	retlw	232
  3586  100D  3403               	retlw	3
  3587  100E  3400               	retlw	0
  3588  100F  3400               	retlw	0
  3589  1010  3410               	retlw	16
  3590  1011  3427               	retlw	39
  3591  1012  3400               	retlw	0
  3592  1013  3400               	retlw	0
  3593  1014  34A0               	retlw	160
  3594  1015  3486               	retlw	134
  3595  1016  3401               	retlw	1
  3596  1017  3400               	retlw	0
  3597  1018  3440               	retlw	64
  3598  1019  3442               	retlw	66
  3599  101A  340F               	retlw	15
  3600  101B  3400               	retlw	0
  3601  101C  3480               	retlw	128
  3602  101D  3496               	retlw	150
  3603  101E  3498               	retlw	152
  3604  101F  3400               	retlw	0
  3605  1020  3400               	retlw	0
  3606  1021  34E1               	retlw	225
  3607  1022  34F5               	retlw	245
  3608  1023  3405               	retlw	5
  3609  1024  3400               	retlw	0
  3610  1025  34CA               	retlw	202
  3611  1026  349A               	retlw	154
  3612  1027  343B               	retlw	59
  3613  1028                     __end_of_dpowers:	
  3614  1028                     __npowers_:	
  3615  1028  3400               	retlw	0
  3616  1029  3480               	retlw	128
  3617  102A  343F               	retlw	63
  3618  102B  34CD               	retlw	205
  3619  102C  34CC               	retlw	204
  3620  102D  343D               	retlw	61
  3621  102E  34D7               	retlw	215
  3622  102F  3423               	retlw	35
  3623  1030  343C               	retlw	60
  3624  1031  3412               	retlw	18
  3625  1032  3483               	retlw	131
  3626  1033  343A               	retlw	58
  3627  1034  34B7               	retlw	183
  3628  1035  34D1               	retlw	209
  3629  1036  3438               	retlw	56
  3630  1037  34C6               	retlw	198
  3631  1038  3427               	retlw	39
  3632  1039  3437               	retlw	55
  3633  103A  3438               	retlw	56
  3634  103B  3486               	retlw	134
  3635  103C  3435               	retlw	53
  3636  103D  34C0               	retlw	192
  3637  103E  34D6               	retlw	214
  3638  103F  3433               	retlw	51
  3639  1040  34CC               	retlw	204
  3640  1041  342B               	retlw	43
  3641  1042  3432               	retlw	50
  3642  1043  3470               	retlw	112
  3643  1044  3489               	retlw	137
  3644  1045  3430               	retlw	48
  3645  1046  34E7               	retlw	231
  3646  1047  34DB               	retlw	219
  3647  1048  342E               	retlw	46
  3648  1049  34E5               	retlw	229
  3649  104A  343C               	retlw	60
  3650  104B  341E               	retlw	30
  3651  104C  3442               	retlw	66
  3652  104D  34A2               	retlw	162
  3653  104E  340D               	retlw	13
  3654  104F                     __end_of__npowers_:	
  3655  104F                     __powers_:	
  3656  104F  3400               	retlw	0
  3657  1050  3480               	retlw	128
  3658  1051  343F               	retlw	63
  3659  1052  3400               	retlw	0
  3660  1053  3420               	retlw	32
  3661  1054  3441               	retlw	65
  3662  1055  3400               	retlw	0
  3663  1056  34C8               	retlw	200
  3664  1057  3442               	retlw	66
  3665  1058  3400               	retlw	0
  3666  1059  347A               	retlw	122
  3667  105A  3444               	retlw	68
  3668  105B  3440               	retlw	64
  3669  105C  341C               	retlw	28
  3670  105D  3446               	retlw	70
  3671  105E  3450               	retlw	80
  3672  105F  34C3               	retlw	195
  3673  1060  3447               	retlw	71
  3674  1061  3424               	retlw	36
  3675  1062  3474               	retlw	116
  3676  1063  3449               	retlw	73
  3677  1064  3497               	retlw	151
  3678  1065  3418               	retlw	24
  3679  1066  344B               	retlw	75
  3680  1067  34BC               	retlw	188
  3681  1068  34BE               	retlw	190
  3682  1069  344C               	retlw	76
  3683  106A  346B               	retlw	107
  3684  106B  346E               	retlw	110
  3685  106C  344E               	retlw	78
  3686  106D  3403               	retlw	3
  3687  106E  3415               	retlw	21
  3688  106F  3450               	retlw	80
  3689  1070  3479               	retlw	121
  3690  1071  34AD               	retlw	173
  3691  1072  3460               	retlw	96
  3692  1073  34F3               	retlw	243
  3693  1074  3449               	retlw	73
  3694  1075  3471               	retlw	113
  3695  1076                     __end_of__powers_:	
  3696  1076                     STR_2:	
  3697  1076  3442               	retlw	66	;'B'
  3698  1077  346F               	retlw	111	;'o'
  3699  1078  346F               	retlw	111	;'o'
  3700  1079  3473               	retlw	115	;'s'
  3701  107A  3474               	retlw	116	;'t'
  3702  107B  3420               	retlw	32	;' '
  3703  107C  3449               	retlw	73	;'I'
  3704  107D  346E               	retlw	110	;'n'
  3705  107E  3469               	retlw	105	;'i'
  3706  107F  3474               	retlw	116	;'t'
  3707  1080  3469               	retlw	105	;'i'
  3708  1081  3461               	retlw	97	;'a'
  3709  1082  346C               	retlw	108	;'l'
  3710  1083  3469               	retlw	105	;'i'
  3711  1084  347A               	retlw	122	;'z'
  3712  1085  3469               	retlw	105	;'i'
  3713  1086  346E               	retlw	110	;'n'
  3714  1087  3467               	retlw	103	;'g'
  3715  1088  342E               	retlw	46	;'.'
  3716  1089  342E               	retlw	46	;'.'
  3717  108A  342E               	retlw	46	;'.'
  3718  108B  342E               	retlw	46	;'.'
  3719  108C  342E               	retlw	46	;'.'
  3720  108D  3400               	retlw	0
  3721  108E                     STR_4:	
  3722  108E  3420               	retlw	32	;' '
  3723  108F  3420               	retlw	32	;' '
  3724  1090  3420               	retlw	32	;' '
  3725  1091  3420               	retlw	32	;' '
  3726  1092  3420               	retlw	32	;' '
  3727  1093  3420               	retlw	32	;' '
  3728  1094  3400               	retlw	0
  3729  1095                     STR_3:	
  3730  1095  3456               	retlw	86	;'V'
  3731  1096  3465               	retlw	101	;'e'
  3732  1097  3472               	retlw	114	;'r'
  3733  1098  3420               	retlw	32	;' '
  3734  1099  343A               	retlw	58	;':'
  3735  109A  3420               	retlw	32	;' '
  3736  109B  3400               	retlw	0
  3737  109C                     STR_5:	
  3738  109C  3456               	retlw	86	;'V'
  3739  109D  3463               	retlw	99	;'c'
  3740  109E  3420               	retlw	32	;' '
  3741  109F  343A               	retlw	58	;':'
  3742  10A0  3420               	retlw	32	;' '
  3743  10A1  3400               	retlw	0
  3744  10A2                     STR_1:	
  3745  10A2  3425               	retlw	37	;'%'
  3746  10A3  3466               	retlw	102	;'f'
  3747  10A4  3400               	retlw	0
  3748                           
  3749                           ; #config settings
  3750  0000                     
  3751                           	psect	nvBANK1
  3752  00E0                     __pnvBANK1:	
  3753  00E0                     _DA_LSB:	
  3754  00E0                     	ds	3
  3755  00E3                     _a0:	
  3756  00E3                     	ds	3
  3757  00E6                     _rk:	
  3758  00E6                     	ds	3
  3759  00E9                     _rk_1:	
  3760  00E9                     	ds	3
  3761  00EC                     _rk_2:	
  3762  00EC                     	ds	3
  3763                           
  3764                           	psect	nvBANK2
  3765  0120                     __pnvBANK2:	
  3766  0120                     _ADC_SCALE:	
  3767  0120                     	ds	3
  3768  0123                     _M1:	
  3769  0123                     	ds	3
  3770  0126                     _M2:	
  3771  0126                     	ds	3
  3772  0129                     _Vref:	
  3773  0129                     	ds	3
  3774  012C                     _a1:	
  3775  012C                     	ds	3
  3776  012F                     _a2:	
  3777  012F                     	ds	3
  3778  0132                     _b1:	
  3779  0132                     	ds	3
  3780  0135                     _b2:	
  3781  0135                     	ds	3
  3782  0011                     _PIR1bits	set	17
  3783  001B                     _PR2	set	27
  3784  0018                     _T1CON	set	24
  3785  0018                     _T1CONbits	set	24
  3786  0019                     _T1GCON	set	25
  3787  0019                     _T1GCONbits	set	25
  3788  001C                     _T2CON	set	28
  3789  001C                     _T2CONbits	set	28
  3790  0017                     _TMR1H	set	23
  3791  0016                     _TMR1L	set	22
  3792  001A                     _TMR2	set	26
  3793  005F                     _GIE	set	95
  3794  005E                     _PEIE	set	94
  3795  0088                     _TMR1IF	set	136
  3796  0089                     _TMR2IF	set	137
  3797  00E2                     _TMR2ON	set	226
  3798  009D                     _ADCON0	set	157
  3799  009D                     _ADCON0bits	set	157
  3800  009E                     _ADCON1	set	158
  3801  009F                     _ADCON2	set	159
  3802  009C                     _ADRESH	set	156
  3803  009B                     _ADRESL	set	155
  3804  0095                     _OPTION_REGbits	set	149
  3805  0099                     _OSCCON	set	153
  3806  009A                     _OSCSTAT	set	154
  3807  0098                     _OSCTUNE	set	152
  3808  0091                     _PIE1bits	set	145
  3809  008C                     _TRISA	set	140
  3810  008D                     _TRISB	set	141
  3811  008E                     _TRISC	set	142
  3812  04D6                     _PLLR	set	1238
  3813  0488                     _TMR1IE	set	1160
  3814  0489                     _TMR2IE	set	1161
  3815  0464                     _TRISA4	set	1124
  3816  0465                     _TRISA5	set	1125
  3817  046E                     _TRISB6	set	1134
  3818  0471                     _TRISC1	set	1137
  3819  0111                     _CM1CON0	set	273
  3820  0112                     _CM1CON1	set	274
  3821  0115                     _CMOUTbits	set	277
  3822  0118                     _DAC1CON0	set	280
  3823  0119                     _DAC1CON1	set	281
  3824  010C                     _LATA	set	268
  3825  010D                     _LATB	set	269
  3826  010E                     _LATC	set	270
  3827  086E                     _LATB6	set	2158
  3828  0872                     _LATC2	set	2162
  3829  0873                     _LATC3	set	2163
  3830  018C                     _ANSELA	set	396
  3831  018D                     _ANSELB	set	397
  3832  018E                     _ANSELC	set	398
  3833  019F                     _BAUD1CON	set	415
  3834  0199                     _RC1REG	set	409
  3835  019D                     _RC1STA	set	413
  3836  019D                     _RC1STAbits	set	413
  3837  019C                     _SP1BRGH	set	412
  3838  019B                     _SP1BRGL	set	411
  3839  019A                     _TX1REG	set	410
  3840  019E                     _TX1STA	set	414
  3841  0CF1                     _TRMT	set	3313
  3842  020C                     _WPUA	set	524
  3843  020D                     _WPUB	set	525
  3844  020E                     _WPUC	set	526
  3845  1072                     _WPUC2	set	4210
  3846  0293                     _CCP1CON	set	659
  3847  029A                     _CCP2CON	set	666
  3848  0292                     _CCPR1H	set	658
  3849  0291                     _CCPR1L	set	657
  3850  0299                     _CCPR2H	set	665
  3851  0298                     _CCPR2L	set	664
  3852  029E                     _CCPTMRSbits	set	670
  3853  1498                     _CCP1M0	set	5272
  3854  1499                     _CCP1M1	set	5273
  3855  149A                     _CCP1M2	set	5274
  3856  149B                     _CCP1M3	set	5275
  3857  0619                     _PWM3CON	set	1561
  3858  0618                     _PWM3DCH	set	1560
  3859  0617                     _PWM3DCL	set	1559
  3860  069D                     _COG1ASD0	set	1693
  3861  069D                     _COG1ASD0bits	set	1693
  3862  069E                     _COG1ASD1	set	1694
  3863  0694                     _COG1BLKF	set	1684
  3864  0693                     _COG1BLKR	set	1683
  3865  0697                     _COG1CON0	set	1687
  3866  0698                     _COG1CON1	set	1688
  3867  0696                     _COG1DBF	set	1686
  3868  0695                     _COG1DBR	set	1685
  3869  069B                     _COG1FIS	set	1691
  3870  069C                     _COG1FSIM	set	1692
  3871  0692                     _COG1PHF	set	1682
  3872  0691                     _COG1PHR	set	1681
  3873  0699                     _COG1RIS	set	1689
  3874  069A                     _COG1RSIM	set	1690
  3875  069F                     _COG1STR	set	1695
  3876  0E0F                     _PPSLOCK	set	3599
  3877  0E0F                     _PPSLOCKbits	set	3599
  3878  0E92                     _RA2PPS	set	3730
  3879  0E94                     _RA4PPS	set	3732
  3880  0E94                     _RA4PPSbits	set	3732
  3881  0E95                     _RA5PPS	set	3733
  3882  0E95                     _RA5PPSbits	set	3733
  3883  0EA1                     _RC1PPS	set	3745
  3884  0EA2                     _RC2PPS	set	3746
  3885  0EA2                     _RC2PPSbits	set	3746
  3886                           
  3887                           	psect	cinit
  3888  0025                     start_initialization:	
  3889  0025                     __initialization:	
  3890                           
  3891                           ; Clear objects allocated to BANK1
  3892  0025  30C9               	movlw	low __pbssBANK1
  3893  0026  0084               	movwf	4
  3894  0027  3000               	movlw	high __pbssBANK1
  3895  0028  0085               	movwf	5
  3896  0029  3017               	movlw	23
  3897  002A  3195  2511  3180   	fcall	clear_ram0
  3898                           
  3899                           ; Clear objects allocated to BANK2
  3900  002D  3038               	movlw	low __pbssBANK2
  3901  002E  0084               	movwf	4
  3902  002F  3001               	movlw	high __pbssBANK2
  3903  0030  0085               	movwf	5
  3904  0031  300F               	movlw	15
  3905  0032  3195  2511         	fcall	clear_ram0
  3906  0034                     end_of_initialization:	
  3907                           ;End of C runtime variable initialization code
  3908                           
  3909  0034                     __end_of__initialization:	
  3910  0034  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  3911  0035  0020               	movlb	0
  3912  0036  3184  2C8A         	ljmp	_main	;jump to C main() function
  3913                           
  3914                           	psect	bssBANK1
  3915  00C9                     __pbssBANK1:	
  3916  00C9                     _AD_LSB:	
  3917  00C9                     	ds	3
  3918  00CC                     _DAC_DISCRETE:	
  3919  00CC                     	ds	3
  3920  00CF                     _Vc:	
  3921  00CF                     	ds	3
  3922  00D2                     _Ver:	
  3923  00D2                     	ds	3
  3924  00D5                     _Vout:	
  3925  00D5                     	ds	3
  3926  00D8                     _TMR1_InterruptHandler:	
  3927  00D8                     	ds	2
  3928  00DA                     _adcVal:	
  3929  00DA                     	ds	2
  3930  00DC                     _timer1ReloadVal:	
  3931  00DC                     	ds	2
  3932  00DE                     _timerValue:	
  3933  00DE                     	ds	2
  3934                           
  3935                           	psect	bssBANK2
  3936  0138                     __pbssBANK2:	
  3937  0138                     USART_WriteValue@F5504:	
  3938  0138                     	ds	15
  3939                           
  3940                           	psect	clrtext
  3941  1511                     clear_ram0:	
  3942                           ;	Called with FSR0 containing the base address, and
  3943                           ;	WREG with the size to clear
  3944                           
  3945  1511  0064               	clrwdt	;clear the watchdog before getting into this loop
  3946  1512                     clrloop0:	
  3947  1512  0180               	clrf	0	;clear RAM location pointed to by FSR
  3948  1513  3101               	addfsr 0,1
  3949  1514  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  3950  1515  2D12               	goto	clrloop0	;have we reached the end yet?
  3951  1516  3400               	retlw	0	;all done for this memory range, return
  3952                           
  3953                           	psect	cstackBANK1
  3954  00A0                     __pcstackBANK1:	
  3955  00A0                     _sprintf$1323:	
  3956                           
  3957                           ; 3 bytes @ 0x0
  3958  00A0                     	ds	3
  3959  00A3                     sprintf@ap:	
  3960                           
  3961                           ; 1 bytes @ 0x3
  3962  00A3                     	ds	1
  3963  00A4                     sprintf@flag:	
  3964                           
  3965                           ; 2 bytes @ 0x4
  3966  00A4                     	ds	2
  3967  00A6                     sprintf@prec:	
  3968                           
  3969                           ; 2 bytes @ 0x6
  3970  00A6                     	ds	2
  3971  00A8                     sprintf@val:	
  3972                           
  3973                           ; 4 bytes @ 0x8
  3974  00A8                     	ds	4
  3975  00AC                     sprintf@exp:	
  3976                           
  3977                           ; 2 bytes @ 0xC
  3978  00AC                     	ds	2
  3979  00AE                     sprintf@tmpval:	
  3980                           
  3981                           ; 4 bytes @ 0xE
  3982  00AE                     	ds	4
  3983  00B2                     sprintf@sp:	
  3984                           
  3985                           ; 1 bytes @ 0x12
  3986  00B2                     	ds	1
  3987  00B3                     sprintf@fval:	
  3988                           
  3989                           ; 3 bytes @ 0x13
  3990  00B3                     	ds	3
  3991  00B6                     sprintf@c:	
  3992                           
  3993                           ; 1 bytes @ 0x16
  3994  00B6                     	ds	1
  3995  00B7                     USART_WriteValue@buf:	
  3996                           
  3997                           ; 15 bytes @ 0x17
  3998  00B7                     	ds	15
  3999  00C6                     _main$1319:	
  4000                           
  4001                           ; 3 bytes @ 0x26
  4002  00C6                     	ds	3
  4003                           
  4004                           	psect	cstackCOMMON
  4005  0070                     __pcstackCOMMON:	
  4006  0070                     ?_DAC_Initialize:	
  4007  0070                     ?_PWM1_Initialize:	
  4008                           ; 1 bytes @ 0x0
  4009                           
  4010  0070                     ?_PWM2_Initialize:	
  4011                           ; 1 bytes @ 0x0
  4012                           
  4013  0070                     ?_CMP1_Initialize:	
  4014                           ; 1 bytes @ 0x0
  4015                           
  4016  0070                     ?_ADC_Initialize:	
  4017                           ; 1 bytes @ 0x0
  4018                           
  4019  0070                     ?_COG1_Initialize:	
  4020                           ; 1 bytes @ 0x0
  4021                           
  4022  0070                     ?_TMR2_Initialize:	
  4023                           ; 1 bytes @ 0x0
  4024                           
  4025  0070                     ?_TMR2_StartTimer:	
  4026                           ; 1 bytes @ 0x0
  4027                           
  4028  0070                     ?_DAC_SetOutput:	
  4029                           ; 1 bytes @ 0x0
  4030                           
  4031  0070                     ?_OSC_Init:	
  4032                           ; 1 bytes @ 0x0
  4033                           
  4034  0070                     ?_USART_Initialize:	
  4035                           ; 1 bytes @ 0x0
  4036                           
  4037  0070                     ?_USART_Write:	
  4038                           ; 1 bytes @ 0x0
  4039                           
  4040  0070                     ?_main:	
  4041                           ; 1 bytes @ 0x0
  4042                           
  4043  0070                     ?_isr:	
  4044                           ; 1 bytes @ 0x0
  4045                           
  4046  0070                     ??_isr:	
  4047                           ; 1 bytes @ 0x0
  4048                           
  4049                           
  4050                           ; 1 bytes @ 0x0
  4051  0070                     	ds	1
  4052  0071                     ?___ftge:	
  4053  0071                     ??_DAC_Initialize:	
  4054                           ; 1 bit 
  4055                           
  4056  0071                     ??_PWM1_Initialize:	
  4057                           ; 1 bytes @ 0x1
  4058                           
  4059  0071                     ??_PWM2_Initialize:	
  4060                           ; 1 bytes @ 0x1
  4061                           
  4062  0071                     ??_CMP1_Initialize:	
  4063                           ; 1 bytes @ 0x1
  4064                           
  4065  0071                     ??_ADC_Initialize:	
  4066                           ; 1 bytes @ 0x1
  4067                           
  4068  0071                     ??_COG1_Initialize:	
  4069                           ; 1 bytes @ 0x1
  4070                           
  4071  0071                     ??_TMR2_Initialize:	
  4072                           ; 1 bytes @ 0x1
  4073                           
  4074  0071                     ??_TMR2_StartTimer:	
  4075                           ; 1 bytes @ 0x1
  4076                           
  4077  0071                     ??_DAC_SetOutput:	
  4078                           ; 1 bytes @ 0x1
  4079                           
  4080  0071                     ??_OSC_Init:	
  4081                           ; 1 bytes @ 0x1
  4082                           
  4083  0071                     ??_USART_Initialize:	
  4084                           ; 1 bytes @ 0x1
  4085                           
  4086  0071                     ??_USART_Write:	
  4087                           ; 1 bytes @ 0x1
  4088                           
  4089  0071                     ?_ADC_GetConversion:	
  4090                           ; 1 bytes @ 0x1
  4091                           
  4092  0071                     ?___awmod:	
  4093                           ; 2 bytes @ 0x1
  4094                           
  4095  0071                     ?___ftpack:	
  4096                           ; 2 bytes @ 0x1
  4097                           
  4098  0071                     ?___ftneg:	
  4099                           ; 3 bytes @ 0x1
  4100                           
  4101  0071                     ?__tdiv_to_l_:	
  4102                           ; 3 bytes @ 0x1
  4103                           
  4104  0071                     ?__div_to_l_:	
  4105                           ; 4 bytes @ 0x1
  4106                           
  4107  0071                     ?___lldiv:	
  4108                           ; 4 bytes @ 0x1
  4109                           
  4110  0071                     ?___llmod:	
  4111                           ; 4 bytes @ 0x1
  4112                           
  4113  0071                     DAC_SetOutput@inputData:	
  4114                           ; 4 bytes @ 0x1
  4115                           
  4116  0071                     USART_Write@txData:	
  4117                           ; 1 bytes @ 0x1
  4118                           
  4119  0071                     ___awmod@divisor:	
  4120                           ; 1 bytes @ 0x1
  4121                           
  4122  0071                     __div_to_l_@f1:	
  4123                           ; 2 bytes @ 0x1
  4124                           
  4125  0071                     ___ftpack@arg:	
  4126                           ; 3 bytes @ 0x1
  4127                           
  4128  0071                     __tdiv_to_l_@f1:	
  4129                           ; 3 bytes @ 0x1
  4130                           
  4131  0071                     ___ftge@ff1:	
  4132                           ; 3 bytes @ 0x1
  4133                           
  4134  0071                     ___ftneg@f1:	
  4135                           ; 3 bytes @ 0x1
  4136                           
  4137  0071                     ___lldiv@divisor:	
  4138                           ; 3 bytes @ 0x1
  4139                           
  4140  0071                     ___llmod@divisor:	
  4141                           ; 4 bytes @ 0x1
  4142                           
  4143                           
  4144                           ; 4 bytes @ 0x1
  4145  0071                     	ds	1
  4146  0072                     ?_USART_WriteString:	
  4147  0072                     USART_WriteString@_data:	
  4148                           ; 1 bytes @ 0x2
  4149                           
  4150                           
  4151                           ; 2 bytes @ 0x2
  4152  0072                     	ds	1
  4153  0073                     ??_ADC_GetConversion:	
  4154  0073                     ___awmod@dividend:	
  4155                           ; 1 bytes @ 0x3
  4156                           
  4157                           
  4158                           ; 2 bytes @ 0x3
  4159  0073                     	ds	1
  4160  0074                     ??_USART_WriteString:	
  4161  0074                     ??___ftneg:	
  4162                           ; 1 bytes @ 0x4
  4163                           
  4164  0074                     ADC_GetConversion@channel:	
  4165                           ; 1 bytes @ 0x4
  4166                           
  4167  0074                     ___ftpack@exp:	
  4168                           ; 1 bytes @ 0x4
  4169                           
  4170  0074                     __div_to_l_@f2:	
  4171                           ; 1 bytes @ 0x4
  4172                           
  4173  0074                     __tdiv_to_l_@f2:	
  4174                           ; 3 bytes @ 0x4
  4175                           
  4176  0074                     ___ftge@ff2:	
  4177                           ; 3 bytes @ 0x4
  4178                           
  4179                           
  4180                           ; 3 bytes @ 0x4
  4181  0074                     	ds	1
  4182  0075                     ??___awmod:	
  4183  0075                     ___ftpack@sign:	
  4184                           ; 1 bytes @ 0x5
  4185                           
  4186  0075                     USART_WriteString@limiter:	
  4187                           ; 1 bytes @ 0x5
  4188                           
  4189  0075                     ___lldiv@dividend:	
  4190                           ; 2 bytes @ 0x5
  4191                           
  4192  0075                     ___llmod@dividend:	
  4193                           ; 4 bytes @ 0x5
  4194                           
  4195                           
  4196                           ; 4 bytes @ 0x5
  4197  0075                     	ds	1
  4198  0076                     ??___ftpack:	
  4199  0076                     ___awmod@counter:	
  4200                           ; 1 bytes @ 0x6
  4201                           
  4202                           
  4203                           ; 1 bytes @ 0x6
  4204  0076                     	ds	1
  4205  0077                     ??__tdiv_to_l_:	
  4206  0077                     ??___ftge:	
  4207                           ; 1 bytes @ 0x7
  4208                           
  4209  0077                     ___awmod@sign:	
  4210                           ; 1 bytes @ 0x7
  4211                           
  4212  0077                     __div_to_l_@quot:	
  4213                           ; 1 bytes @ 0x7
  4214                           
  4215                           
  4216                           ; 4 bytes @ 0x7
  4217  0077                     	ds	1
  4218  0078                     ?___awdiv:	
  4219  0078                     ___awdiv@divisor:	
  4220                           ; 2 bytes @ 0x8
  4221                           
  4222                           
  4223                           ; 2 bytes @ 0x8
  4224  0078                     	ds	1
  4225  0079                     ??___lldiv:	
  4226  0079                     ??___llmod:	
  4227                           ; 1 bytes @ 0x9
  4228                           
  4229  0079                     ?___lltoft:	
  4230                           ; 1 bytes @ 0x9
  4231                           
  4232  0079                     ?___lwtoft:	
  4233                           ; 3 bytes @ 0x9
  4234                           
  4235  0079                     ___lwtoft@c:	
  4236                           ; 3 bytes @ 0x9
  4237                           
  4238  0079                     ___lltoft@c:	
  4239                           ; 2 bytes @ 0x9
  4240                           
  4241                           
  4242                           ; 4 bytes @ 0x9
  4243  0079                     	ds	1
  4244  007A                     ?_fabs:	
  4245  007A                     ___llmod@counter:	
  4246                           ; 3 bytes @ 0xA
  4247                           
  4248  007A                     ___awdiv@dividend:	
  4249                           ; 1 bytes @ 0xA
  4250                           
  4251  007A                     fabs@d:	
  4252                           ; 2 bytes @ 0xA
  4253                           
  4254                           
  4255                           ; 3 bytes @ 0xA
  4256  007A                     	ds	1
  4257  007B                     __div_to_l_@cntr:	
  4258                           
  4259                           ; 1 bytes @ 0xB
  4260  007B                     	ds	1
  4261  007C                     ??___awdiv:	
  4262  007C                     ??___lwtoft:	
  4263                           ; 1 bytes @ 0xC
  4264                           
  4265  007C                     __div_to_l_@exp1:	
  4266                           ; 1 bytes @ 0xC
  4267                           
  4268                           
  4269                           ; 1 bytes @ 0xC
  4270  007C                     	ds	1
  4271  007D                     ??_fabs:	
  4272  007D                     ??___wmul:	
  4273                           ; 1 bytes @ 0xD
  4274                           
  4275  007D                     ??___ftsub:	
  4276                           ; 1 bytes @ 0xD
  4277                           
  4278                           
  4279                           	psect	cstackBANK0
  4280  0020                     __pcstackBANK0:	
  4281                           ; 1 bytes @ 0xD
  4282                           
  4283  0020                     ??__div_to_l_:	
  4284  0020                     ??___lltoft:	
  4285                           ; 1 bytes @ 0x0
  4286                           
  4287  0020                     ___awdiv@counter:	
  4288                           ; 1 bytes @ 0x0
  4289                           
  4290  0020                     __tdiv_to_l_@quot:	
  4291                           ; 1 bytes @ 0x0
  4292                           
  4293  0020                     ___lldiv@quotient:	
  4294                           ; 4 bytes @ 0x0
  4295                           
  4296                           
  4297                           ; 4 bytes @ 0x0
  4298  0020                     	ds	1
  4299  0021                     ___awdiv@sign:	
  4300  0021                     ___lltoft@exp:	
  4301                           ; 1 bytes @ 0x1
  4302                           
  4303                           
  4304                           ; 1 bytes @ 0x1
  4305  0021                     	ds	1
  4306  0022                     ___awdiv@quotient:	
  4307                           
  4308                           ; 2 bytes @ 0x2
  4309  0022                     	ds	2
  4310  0024                     ?___wmul:	
  4311  0024                     __tdiv_to_l_@cntr:	
  4312                           ; 2 bytes @ 0x4
  4313                           
  4314  0024                     ___lldiv@counter:	
  4315                           ; 1 bytes @ 0x4
  4316                           
  4317  0024                     ___wmul@multiplier:	
  4318                           ; 1 bytes @ 0x4
  4319                           
  4320                           
  4321                           ; 2 bytes @ 0x4
  4322  0024                     	ds	1
  4323  0025                     __tdiv_to_l_@exp1:	
  4324                           
  4325                           ; 1 bytes @ 0x5
  4326  0025                     	ds	1
  4327  0026                     ___wmul@multiplicand:	
  4328                           
  4329                           ; 2 bytes @ 0x6
  4330  0026                     	ds	2
  4331  0028                     ___wmul@product:	
  4332                           
  4333                           ; 2 bytes @ 0x8
  4334  0028                     	ds	2
  4335  002A                     ?___ftmul:	
  4336  002A                     ___ftmul@f1:	
  4337                           ; 3 bytes @ 0xA
  4338                           
  4339                           
  4340                           ; 3 bytes @ 0xA
  4341  002A                     	ds	3
  4342  002D                     ___ftmul@f2:	
  4343                           
  4344                           ; 3 bytes @ 0xD
  4345  002D                     	ds	3
  4346  0030                     ??___ftmul:	
  4347                           
  4348                           ; 1 bytes @ 0x10
  4349  0030                     	ds	4
  4350  0034                     ___ftmul@exp:	
  4351                           
  4352                           ; 1 bytes @ 0x14
  4353  0034                     	ds	1
  4354  0035                     ___ftmul@f3_as_product:	
  4355                           
  4356                           ; 3 bytes @ 0x15
  4357  0035                     	ds	3
  4358  0038                     ___ftmul@cntr:	
  4359                           
  4360                           ; 1 bytes @ 0x18
  4361  0038                     	ds	1
  4362  0039                     ___ftmul@sign:	
  4363                           
  4364                           ; 1 bytes @ 0x19
  4365  0039                     	ds	1
  4366  003A                     ?_fround:	
  4367  003A                     ?_scale:	
  4368                           ; 3 bytes @ 0x1A
  4369                           
  4370  003A                     ?___ftdiv:	
  4371                           ; 3 bytes @ 0x1A
  4372                           
  4373  003A                     ___ftdiv@f2:	
  4374                           ; 3 bytes @ 0x1A
  4375                           
  4376                           
  4377                           ; 3 bytes @ 0x1A
  4378  003A                     	ds	3
  4379  003D                     ??_fround:	
  4380  003D                     ??_scale:	
  4381                           ; 1 bytes @ 0x1D
  4382                           
  4383  003D                     ___ftdiv@f1:	
  4384                           ; 1 bytes @ 0x1D
  4385                           
  4386                           
  4387                           ; 3 bytes @ 0x1D
  4388  003D                     	ds	2
  4389  003F                     _scale$1322:	
  4390                           
  4391                           ; 3 bytes @ 0x1F
  4392  003F                     	ds	1
  4393  0040                     ??___ftdiv:	
  4394                           
  4395                           ; 1 bytes @ 0x20
  4396  0040                     	ds	1
  4397  0041                     _fround$1321:	
  4398                           
  4399                           ; 3 bytes @ 0x21
  4400  0041                     	ds	1
  4401  0042                     scale@scl:	
  4402                           
  4403                           ; 1 bytes @ 0x22
  4404  0042                     	ds	1
  4405  0043                     ?___fttol:	
  4406  0043                     ___fttol@f1:	
  4407                           ; 4 bytes @ 0x23
  4408                           
  4409                           
  4410                           ; 3 bytes @ 0x23
  4411  0043                     	ds	1
  4412  0044                     ___ftdiv@cntr:	
  4413  0044                     _fround$1320:	
  4414                           ; 1 bytes @ 0x24
  4415                           
  4416                           
  4417                           ; 3 bytes @ 0x24
  4418  0044                     	ds	1
  4419  0045                     ___ftdiv@f3:	
  4420                           
  4421                           ; 3 bytes @ 0x25
  4422  0045                     	ds	2
  4423  0047                     ??___fttol:	
  4424  0047                     fround@prec:	
  4425                           ; 1 bytes @ 0x27
  4426                           
  4427                           
  4428                           ; 1 bytes @ 0x27
  4429  0047                     	ds	1
  4430  0048                     ?___ftadd:	
  4431  0048                     ___ftdiv@exp:	
  4432                           ; 3 bytes @ 0x28
  4433                           
  4434  0048                     ___ftadd@f1:	
  4435                           ; 1 bytes @ 0x28
  4436                           
  4437                           
  4438                           ; 3 bytes @ 0x28
  4439  0048                     	ds	1
  4440  0049                     ___ftdiv@sign:	
  4441                           
  4442                           ; 1 bytes @ 0x29
  4443  0049                     	ds	2
  4444  004B                     ___fttol@sign1:	
  4445  004B                     ___ftadd@f2:	
  4446                           ; 1 bytes @ 0x2B
  4447                           
  4448                           
  4449                           ; 3 bytes @ 0x2B
  4450  004B                     	ds	1
  4451  004C                     ___fttol@lval:	
  4452                           
  4453                           ; 4 bytes @ 0x2C
  4454  004C                     	ds	2
  4455  004E                     ??___ftadd:	
  4456                           
  4457                           ; 1 bytes @ 0x2E
  4458  004E                     	ds	2
  4459  0050                     ___fttol@exp1:	
  4460                           
  4461                           ; 1 bytes @ 0x30
  4462  0050                     	ds	2
  4463  0052                     ___ftadd@sign:	
  4464                           
  4465                           ; 1 bytes @ 0x32
  4466  0052                     	ds	1
  4467  0053                     ___ftadd@exp2:	
  4468                           
  4469                           ; 1 bytes @ 0x33
  4470  0053                     	ds	1
  4471  0054                     ___ftadd@exp1:	
  4472                           
  4473                           ; 1 bytes @ 0x34
  4474  0054                     	ds	1
  4475  0055                     ?___ftsub:	
  4476  0055                     ___ftsub@f2:	
  4477                           ; 3 bytes @ 0x35
  4478                           
  4479                           
  4480                           ; 3 bytes @ 0x35
  4481  0055                     	ds	3
  4482  0058                     ___ftsub@f1:	
  4483                           
  4484                           ; 3 bytes @ 0x38
  4485  0058                     	ds	3
  4486  005B                     ?_sprintf:	
  4487  005B                     sprintf@f:	
  4488                           ; 2 bytes @ 0x3B
  4489                           
  4490                           
  4491                           ; 2 bytes @ 0x3B
  4492  005B                     	ds	5
  4493  0060                     ??_sprintf:	
  4494                           
  4495                           ; 1 bytes @ 0x40
  4496  0060                     	ds	6
  4497  0066                     ?_USART_WriteValue:	
  4498  0066                     USART_WriteValue@_data:	
  4499                           ; 1 bytes @ 0x46
  4500                           
  4501                           
  4502                           ; 3 bytes @ 0x46
  4503  0066                     	ds	3
  4504  0069                     ??_USART_WriteValue:	
  4505                           
  4506                           ; 1 bytes @ 0x49
  4507  0069                     	ds	1
  4508  006A                     ??_main:	
  4509                           
  4510                           ; 1 bytes @ 0x4A
  4511  006A                     	ds	6
  4512                           
  4513                           	psect	maintext
  4514  048A                     __pmaintext:	
  4515 ;;
  4516 ;;Main: autosize = 0, tempsize = 6, incstack = 0, save=0
  4517 ;;
  4518 ;; *************** function _main *****************
  4519 ;; Defined at:
  4520 ;;		line 187 in file "main.c"
  4521 ;; Parameters:    Size  Location     Type
  4522 ;;		None
  4523 ;; Auto vars:     Size  Location     Type
  4524 ;;  tempVal         3    0        struct _floatToUN8
  4525 ;; Return value:  Size  Location     Type
  4526 ;;                  1    wreg      void 
  4527 ;; Registers used:
  4528 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4529 ;; Tracked objects:
  4530 ;;		On entry : B1F/0
  4531 ;;		On exit  : 0/0
  4532 ;;		Unchanged: 0/0
  4533 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4534 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4535 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  4536 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4537 ;;      Totals:         0       6       3       0       0       0       0       0       0       0       0       0       
      +0       0
  4538 ;;Total ram usage:        9 bytes
  4539 ;; Hardware stack levels required when called:    6
  4540 ;; This function calls:
  4541 ;;		_ADC_GetConversion
  4542 ;;		_ADC_Initialize
  4543 ;;		_CMP1_Initialize
  4544 ;;		_COG1_Initialize
  4545 ;;		_DAC_Initialize
  4546 ;;		_DAC_SetOutput
  4547 ;;		_OSC_Init
  4548 ;;		_PWM1_Initialize
  4549 ;;		_PWM2_Initialize
  4550 ;;		_TMR2_Initialize
  4551 ;;		_USART_Initialize
  4552 ;;		_USART_Write
  4553 ;;		_USART_WriteString
  4554 ;;		_USART_WriteValue
  4555 ;;		___ftadd
  4556 ;;		___ftdiv
  4557 ;;		___ftmul
  4558 ;;		___ftneg
  4559 ;;		___fttol
  4560 ;;		___lwtoft
  4561 ;;		_fabs
  4562 ;; This function is called by:
  4563 ;;		Startup code after reset
  4564 ;; This function uses a non-reentrant model
  4565 ;;
  4566                           
  4567                           
  4568                           ;psect for function _main
  4569  048A                     _main:	
  4570                           
  4571                           ;main.c: 189: OSC_Init();
  4572                           
  4573                           ;incstack = 0
  4574                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4575  048A  3195  250B  3184   	fcall	_OSC_Init
  4576                           
  4577                           ;main.c: 195: a0 = 0.0649 ; a1 = 0.00765; a2 = -0.0571;
  4578  048D  30EA               	movlw	234
  4579  048E  0021               	movlb	1	; select bank1
  4580  048F  00E3               	movwf	_a0^(0+128)
  4581  0490  3084               	movlw	132
  4582  0491  00E4               	movwf	(_a0+1)^(0+128)
  4583  0492  303D               	movlw	61
  4584  0493  00E5               	movwf	(_a0+2)^(0+128)
  4585  0494  30AD               	movlw	173
  4586  0495  0022               	movlb	2	; select bank2
  4587  0496  00AC               	movwf	_a1^(0+256)
  4588  0497  30FA               	movlw	250
  4589  0498  00AD               	movwf	(_a1+1)^(0+256)
  4590  0499  303B               	movlw	59
  4591  049A  00AE               	movwf	(_a1+2)^(0+256)
  4592  049B  30E2               	movlw	226
  4593  049C  00AF               	movwf	_a2^(0+256)
  4594  049D  3069               	movlw	105
  4595  049E  00B0               	movwf	(_a2+1)^(0+256)
  4596  049F  30BD               	movlw	189
  4597  04A0  00B1               	movwf	(_a2+2)^(0+256)
  4598                           
  4599                           ;main.c: 196: b1 = 0.77; b2 = 0.22;
  4600  04A1  301F               	movlw	31
  4601  04A2  00B2               	movwf	_b1^(0+256)
  4602  04A3  3045               	movlw	69
  4603  04A4  00B3               	movwf	(_b1+1)^(0+256)
  4604  04A5  303F               	movlw	63
  4605  04A6  00B4               	movwf	(_b1+2)^(0+256)
  4606  04A7  3048               	movlw	72
  4607  04A8  00B5               	movwf	_b2^(0+256)
  4608  04A9  3061               	movlw	97
  4609  04AA  00B6               	movwf	(_b2+1)^(0+256)
  4610  04AB  303E               	movlw	62
  4611  04AC  00B7               	movwf	(_b2+2)^(0+256)
  4612                           
  4613                           ;main.c: 198: M1 = 0; M2 = 0; rk = 0; rk_1 = 0; rk_2 = 0;
  4614  04AD  3000               	movlw	0
  4615  04AE  00A3               	movwf	_M1^(0+256)
  4616  04AF  3000               	movlw	0
  4617  04B0  00A4               	movwf	(_M1+1)^(0+256)
  4618  04B1  3000               	movlw	0
  4619  04B2  00A5               	movwf	(_M1+2)^(0+256)
  4620  04B3  3000               	movlw	0
  4621  04B4  00A6               	movwf	_M2^(0+256)
  4622  04B5  3000               	movlw	0
  4623  04B6  00A7               	movwf	(_M2+1)^(0+256)
  4624  04B7  3000               	movlw	0
  4625  04B8  00A8               	movwf	(_M2+2)^(0+256)
  4626  04B9  3000               	movlw	0
  4627  04BA  0021               	movlb	1	; select bank1
  4628  04BB  00E6               	movwf	_rk^(0+128)
  4629  04BC  3000               	movlw	0
  4630  04BD  00E7               	movwf	(_rk+1)^(0+128)
  4631  04BE  3000               	movlw	0
  4632  04BF  00E8               	movwf	(_rk+2)^(0+128)
  4633  04C0  3000               	movlw	0
  4634  04C1  00E9               	movwf	_rk_1^(0+128)
  4635  04C2  3000               	movlw	0
  4636  04C3  00EA               	movwf	(_rk_1+1)^(0+128)
  4637  04C4  3000               	movlw	0
  4638  04C5  00EB               	movwf	(_rk_1+2)^(0+128)
  4639  04C6  3000               	movlw	0
  4640  04C7  00EC               	movwf	_rk_2^(0+128)
  4641  04C8  3000               	movlw	0
  4642  04C9  00ED               	movwf	(_rk_2+1)^(0+128)
  4643  04CA  3000               	movlw	0
  4644  04CB  00EE               	movwf	(_rk_2+2)^(0+128)
  4645                           
  4646                           ;main.c: 199: Vref = 2.5;
  4647  04CC  3000               	movlw	0
  4648  04CD  0022               	movlb	2	; select bank2
  4649  04CE  00A9               	movwf	_Vref^(0+256)
  4650  04CF  3020               	movlw	32
  4651  04D0  00AA               	movwf	(_Vref+1)^(0+256)
  4652  04D1  3040               	movlw	64
  4653  04D2  00AB               	movwf	(_Vref+2)^(0+256)
  4654                           
  4655                           ;main.c: 201: DA_LSB = 5000.0/256.0;
  4656  04D3  3040               	movlw	64
  4657  04D4  0021               	movlb	1	; select bank1
  4658  04D5  00E0               	movwf	_DA_LSB^(0+128)
  4659  04D6  309C               	movlw	156
  4660  04D7  00E1               	movwf	(_DA_LSB+1)^(0+128)
  4661  04D8  3041               	movlw	65
  4662  04D9  00E2               	movwf	(_DA_LSB+2)^(0+128)
  4663                           
  4664                           ;main.c: 202: ADC_SCALE = 9.23;
  4665  04DA  30AE               	movlw	174
  4666  04DB  0022               	movlb	2	; select bank2
  4667  04DC  00A0               	movwf	_ADC_SCALE^(0+256)
  4668  04DD  3013               	movlw	19
  4669  04DE  00A1               	movwf	(_ADC_SCALE+1)^(0+256)
  4670  04DF  3041               	movlw	65
  4671  04E0  00A2               	movwf	(_ADC_SCALE+2)^(0+256)
  4672                           
  4673                           ;main.c: 214: TRISB6 = 0;
  4674  04E1  0021               	movlb	1	; select bank1
  4675  04E2  130D               	bcf	13,6	;volatile
  4676                           
  4677                           ;main.c: 215: LATB6 = 0;
  4678  04E3  0022               	movlb	2	; select bank2
  4679  04E4  130D               	bcf	13,6	;volatile
  4680                           
  4681                           ;main.c: 216: ANSELB &= ~0x40;
  4682  04E5  30BF               	movlw	191
  4683  04E6  0020               	movlb	0	; select bank0
  4684  04E7  00EA               	movwf	??_main
  4685  04E8  086A               	movf	??_main,w
  4686  04E9  0023               	movlb	3	; select bank3
  4687  04EA  058D               	andwf	13,f	;volatile
  4688                           
  4689                           ;main.c: 218: TRISA4 = 0;
  4690  04EB  0021               	movlb	1	; select bank1
  4691  04EC  120C               	bcf	12,4	;volatile
  4692                           
  4693                           ;main.c: 219: ANSELA &= ~0x10;
  4694  04ED  30EF               	movlw	239
  4695  04EE  0020               	movlb	0	; select bank0
  4696  04EF  00EA               	movwf	??_main
  4697  04F0  086A               	movf	??_main,w
  4698  04F1  0023               	movlb	3	; select bank3
  4699  04F2  058C               	andwf	12,f	;volatile
  4700                           
  4701                           ;main.c: 220: RA4PPS = 0x08;
  4702  04F3  3008               	movlw	8
  4703  04F4  003D               	movlb	29	; select bank29
  4704  04F5  0094               	movwf	20	;volatile
  4705                           
  4706                           ;main.c: 223: LATC3 = 0;
  4707  04F6  0022               	movlb	2	; select bank2
  4708  04F7  118E               	bcf	14,3	;volatile
  4709                           
  4710                           ;main.c: 224: ANSELC |= 0x80;
  4711  04F8  0023               	movlb	3	; select bank3
  4712  04F9  178E               	bsf	14,7	;volatile
  4713                           
  4714                           ;main.c: 225: TRISC |= 0x80;
  4715  04FA  0021               	movlb	1	; select bank1
  4716  04FB  178E               	bsf	14,7	;volatile
  4717                           
  4718                           ;main.c: 229: ANSELC |= 0x01;
  4719  04FC  0023               	movlb	3	; select bank3
  4720  04FD  140E               	bsf	14,0	;volatile
  4721                           
  4722                           ;main.c: 230: TRISC |= 0x01;
  4723  04FE  0021               	movlb	1	; select bank1
  4724  04FF  140E               	bsf	14,0	;volatile
  4725                           
  4726                           ;main.c: 233: LATC2 = 0;
  4727  0500  0022               	movlb	2	; select bank2
  4728  0501  110E               	bcf	14,2	;volatile
  4729                           
  4730                           ;main.c: 234: WPUC2 = 1;
  4731  0502  0024               	movlb	4	; select bank4
  4732  0503  150E               	bsf	14,2	;volatile
  4733                           
  4734                           ;main.c: 235: ANSELC |= 0x04;
  4735  0504  0023               	movlb	3	; select bank3
  4736  0505  150E               	bsf	14,2	;volatile
  4737                           
  4738                           ;main.c: 236: TRISC &= ~0x04;
  4739  0506  30FB               	movlw	251
  4740  0507  0020               	movlb	0	; select bank0
  4741  0508  00EA               	movwf	??_main
  4742  0509  086A               	movf	??_main,w
  4743  050A  0021               	movlb	1	; select bank1
  4744  050B  058E               	andwf	14,f	;volatile
  4745                           
  4746                           ;main.c: 237: RC2PPS = 0x14;
  4747  050C  3014               	movlw	20
  4748  050D  003D               	movlb	29	; select bank29
  4749  050E  00A2               	movwf	34	;volatile
  4750                           
  4751                           ;main.c: 250: PWM1_Initialize();
  4752  050F  3195  2527  3184   	fcall	_PWM1_Initialize
  4753                           
  4754                           ;main.c: 251: PWM2_Initialize();
  4755  0512  3195  2539  3184   	fcall	_PWM2_Initialize
  4756                           
  4757                           ;main.c: 252: TMR2_Initialize();
  4758  0515  3195  2530  3184   	fcall	_TMR2_Initialize
  4759                           
  4760                           ;main.c: 253: COG1_Initialize();
  4761  0518  3195  2562  3184   	fcall	_COG1_Initialize
  4762                           
  4763                           ;main.c: 255: DAC_Initialize();
  4764  051B  3195  2505  3184   	fcall	_DAC_Initialize
  4765                           
  4766                           ;main.c: 256: CMP1_Initialize();
  4767  051E  3187  27EF  3184   	fcall	_CMP1_Initialize
  4768                           
  4769                           ;main.c: 258: ADC_Initialize();
  4770  0521  3195  251E  3184   	fcall	_ADC_Initialize
  4771                           
  4772                           ;main.c: 259: ADC_GetConversion(channel_AN4);
  4773  0524  3004               	movlw	4
  4774  0525  3195  2579  3184   	fcall	_ADC_GetConversion
  4775                           
  4776                           ;main.c: 261: USART_Initialize();
  4777  0528  3195  2543  3184   	fcall	_USART_Initialize
  4778                           
  4779                           ;main.c: 262: _delay((unsigned long)((100)*(32000000/4000.0)));
  4780  052B  3005               	movlw	5
  4781  052C  0020               	movlb	0	; select bank0
  4782  052D  00EC               	movwf	??_main+2
  4783  052E  300F               	movlw	15
  4784  052F  00EB               	movwf	??_main+1
  4785  0530  30F4               	movlw	244
  4786  0531  00EA               	movwf	??_main
  4787  0532                     u3607:	
  4788  0532  0BEA               	decfsz	??_main,f
  4789  0533  2D32               	goto	u3607
  4790  0534  0BEB               	decfsz	??_main+1,f
  4791  0535  2D32               	goto	u3607
  4792  0536  0BEC               	decfsz	??_main+2,f
  4793  0537  2D32               	goto	u3607
  4794                           
  4795                           ;main.c: 263: USART_WriteString("Boost Initializing.....");
  4796  0538  3076               	movlw	low (STR_2| (0+32768))
  4797  0539  00F2               	movwf	USART_WriteString@_data
  4798  053A  3090               	movlw	high (STR_2| (0+32768))
  4799  053B  00F3               	movwf	USART_WriteString@_data+1
  4800  053C  3196  2610  3184   	fcall	_USART_WriteString
  4801                           
  4802                           ;main.c: 265: USART_Write('\n');
  4803  053F  300A               	movlw	10
  4804  0540  3195  2517  3184   	fcall	_USART_Write
  4805                           
  4806                           ;main.c: 267: GIE = 1;
  4807  0543  178B               	bsf	11,7	;volatile
  4808                           
  4809                           ;main.c: 268: PEIE = 1;
  4810  0544  170B               	bsf	11,6	;volatile
  4811  0545                     l3331:	
  4812                           ;main.c: 270: floatToUN8 tempVal;
  4813                           ;main.c: 272: while(1)
  4814                           
  4815                           
  4816                           ;main.c: 273: {
  4817                           ;main.c: 281: adcVal = ADC_GetConversion(channel_AN4) + ADC_GetConversion(channel_AN4) +
      +                           ADC_GetConversion(channel_AN4) + ADC_GetConversion(channel_AN4);
  4818  0545  3004               	movlw	4
  4819  0546  3195  2579  3184   	fcall	_ADC_GetConversion
  4820  0549  0871               	movf	?_ADC_GetConversion,w
  4821  054A  0020               	movlb	0	; select bank0
  4822  054B  00EA               	movwf	??_main
  4823  054C  0872               	movf	?_ADC_GetConversion+1,w
  4824  054D  00EB               	movwf	??_main+1
  4825  054E  3004               	movlw	4
  4826  054F  3195  2579  3184   	fcall	_ADC_GetConversion
  4827  0552  0871               	movf	?_ADC_GetConversion,w
  4828  0553  0020               	movlb	0	; select bank0
  4829  0554  076A               	addwf	??_main,w
  4830  0555  00EC               	movwf	??_main+2
  4831  0556  0872               	movf	?_ADC_GetConversion+1,w
  4832  0557  3D6B               	addwfc	??_main+1,w
  4833  0558  00ED               	movwf	??_main+3
  4834  0559  3004               	movlw	4
  4835  055A  3195  2579  3184   	fcall	_ADC_GetConversion
  4836  055D  0871               	movf	?_ADC_GetConversion,w
  4837  055E  0020               	movlb	0	; select bank0
  4838  055F  076C               	addwf	??_main+2,w
  4839  0560  00EE               	movwf	??_main+4
  4840  0561  0872               	movf	?_ADC_GetConversion+1,w
  4841  0562  3D6D               	addwfc	??_main+3,w
  4842  0563  00EF               	movwf	??_main+5
  4843  0564  3004               	movlw	4
  4844  0565  3195  2579  3184   	fcall	_ADC_GetConversion
  4845  0568  0871               	movf	?_ADC_GetConversion,w
  4846  0569  0020               	movlb	0	; select bank0
  4847  056A  076E               	addwf	??_main+4,w
  4848  056B  0021               	movlb	1	; select bank1
  4849  056C  00DA               	movwf	_adcVal^(0+128)
  4850  056D  0872               	movf	?_ADC_GetConversion+1,w
  4851  056E  0020               	movlb	0	; select bank0
  4852  056F  3D6F               	addwfc	??_main+5,w
  4853  0570  0021               	movlb	1	; select bank1
  4854  0571  00DB               	movwf	(_adcVal+1)^(0+128)
  4855                           
  4856                           ;main.c: 283: Vout = ((float)adcVal * 4.88)/4000;
  4857  0572  3000               	movlw	0
  4858  0573  0020               	movlb	0	; select bank0
  4859  0574  00BA               	movwf	___ftdiv@f2
  4860  0575  307A               	movlw	122
  4861  0576  00BB               	movwf	___ftdiv@f2+1
  4862  0577  3045               	movlw	69
  4863  0578  00BC               	movwf	___ftdiv@f2+2
  4864  0579  3029               	movlw	41
  4865  057A  00AA               	movwf	___ftmul@f1
  4866  057B  309C               	movlw	156
  4867  057C  00AB               	movwf	___ftmul@f1+1
  4868  057D  3040               	movlw	64
  4869  057E  00AC               	movwf	___ftmul@f1+2
  4870  057F  0021               	movlb	1	; select bank1
  4871  0580  085B               	movf	(_adcVal+1)^(0+128),w
  4872  0581  00FA               	movwf	___lwtoft@c+1
  4873  0582  085A               	movf	_adcVal^(0+128),w
  4874  0583  00F9               	movwf	___lwtoft@c
  4875  0584  3195  254F  3184   	fcall	___lwtoft
  4876  0587  0879               	movf	?___lwtoft,w
  4877  0588  0020               	movlb	0	; select bank0
  4878  0589  00AD               	movwf	___ftmul@f2
  4879  058A  087A               	movf	?___lwtoft+1,w
  4880  058B  00AE               	movwf	___ftmul@f2+1
  4881  058C  087B               	movf	?___lwtoft+2,w
  4882  058D  00AF               	movwf	___ftmul@f2+2
  4883  058E  3188  20DA  3184   	fcall	___ftmul
  4884  0591  0020               	movlb	0	; select bank0
  4885  0592  082A               	movf	?___ftmul,w
  4886  0593  00BD               	movwf	___ftdiv@f1
  4887  0594  082B               	movf	?___ftmul+1,w
  4888  0595  00BE               	movwf	___ftdiv@f1+1
  4889  0596  082C               	movf	?___ftmul+2,w
  4890  0597  00BF               	movwf	___ftdiv@f1+2
  4891  0598  3188  2031  3184   	fcall	___ftdiv
  4892  059B  0020               	movlb	0	; select bank0
  4893  059C  083A               	movf	?___ftdiv,w
  4894  059D  0021               	movlb	1	; select bank1
  4895  059E  00D5               	movwf	_Vout^(0+128)
  4896  059F  0020               	movlb	0	; select bank0
  4897  05A0  083B               	movf	?___ftdiv+1,w
  4898  05A1  0021               	movlb	1	; select bank1
  4899  05A2  00D6               	movwf	(_Vout+1)^(0+128)
  4900  05A3  0020               	movlb	0	; select bank0
  4901  05A4  083C               	movf	?___ftdiv+2,w
  4902  05A5  0021               	movlb	1	; select bank1
  4903  05A6  00D7               	movwf	(_Vout+2)^(0+128)
  4904                           
  4905                           ;main.c: 285: Ver = Vref - Vout;
  4906  05A7  0022               	movlb	2	; select bank2
  4907  05A8  0829               	movf	_Vref^(0+256),w
  4908  05A9  0020               	movlb	0	; select bank0
  4909  05AA  00C8               	movwf	___ftadd@f1
  4910  05AB  0022               	movlb	2	; select bank2
  4911  05AC  082A               	movf	(_Vref+1)^(0+256),w
  4912  05AD  0020               	movlb	0	; select bank0
  4913  05AE  00C9               	movwf	___ftadd@f1+1
  4914  05AF  0022               	movlb	2	; select bank2
  4915  05B0  082B               	movf	(_Vref+2)^(0+256),w
  4916  05B1  0020               	movlb	0	; select bank0
  4917  05B2  00CA               	movwf	___ftadd@f1+2
  4918  05B3  0021               	movlb	1	; select bank1
  4919  05B4  0855               	movf	_Vout^(0+128),w
  4920  05B5  00F1               	movwf	___ftneg@f1
  4921  05B6  0856               	movf	(_Vout+1)^(0+128),w
  4922  05B7  00F2               	movwf	___ftneg@f1+1
  4923  05B8  0857               	movf	(_Vout+2)^(0+128),w
  4924  05B9  00F3               	movwf	___ftneg@f1+2
  4925  05BA  3188  2000  3184   	fcall	___ftneg
  4926  05BD  0871               	movf	?___ftneg,w
  4927  05BE  0020               	movlb	0	; select bank0
  4928  05BF  00CB               	movwf	___ftadd@f2
  4929  05C0  0872               	movf	?___ftneg+1,w
  4930  05C1  00CC               	movwf	___ftadd@f2+1
  4931  05C2  0873               	movf	?___ftneg+2,w
  4932  05C3  00CD               	movwf	___ftadd@f2+2
  4933  05C4  318A  2244  3184   	fcall	___ftadd
  4934  05C7  0020               	movlb	0	; select bank0
  4935  05C8  0848               	movf	?___ftadd,w
  4936  05C9  0021               	movlb	1	; select bank1
  4937  05CA  00D2               	movwf	_Ver^(0+128)
  4938  05CB  0020               	movlb	0	; select bank0
  4939  05CC  0849               	movf	?___ftadd+1,w
  4940  05CD  0021               	movlb	1	; select bank1
  4941  05CE  00D3               	movwf	(_Ver+1)^(0+128)
  4942  05CF  0020               	movlb	0	; select bank0
  4943  05D0  084A               	movf	?___ftadd+2,w
  4944  05D1  0021               	movlb	1	; select bank1
  4945  05D2  00D4               	movwf	(_Ver+2)^(0+128)
  4946                           
  4947                           ;main.c: 290: rk = Ver + (b1 * rk_1) + (b2 * rk_2);
  4948  05D3  086C               	movf	_rk_2^(0+128),w
  4949  05D4  0020               	movlb	0	; select bank0
  4950  05D5  00AA               	movwf	___ftmul@f1
  4951  05D6  0021               	movlb	1	; select bank1
  4952  05D7  086D               	movf	(_rk_2+1)^(0+128),w
  4953  05D8  0020               	movlb	0	; select bank0
  4954  05D9  00AB               	movwf	___ftmul@f1+1
  4955  05DA  0021               	movlb	1	; select bank1
  4956  05DB  086E               	movf	(_rk_2+2)^(0+128),w
  4957  05DC  0020               	movlb	0	; select bank0
  4958  05DD  00AC               	movwf	___ftmul@f1+2
  4959  05DE  0022               	movlb	2	; select bank2
  4960  05DF  0835               	movf	_b2^(0+256),w
  4961  05E0  0020               	movlb	0	; select bank0
  4962  05E1  00AD               	movwf	___ftmul@f2
  4963  05E2  0022               	movlb	2	; select bank2
  4964  05E3  0836               	movf	(_b2+1)^(0+256),w
  4965  05E4  0020               	movlb	0	; select bank0
  4966  05E5  00AE               	movwf	___ftmul@f2+1
  4967  05E6  0022               	movlb	2	; select bank2
  4968  05E7  0837               	movf	(_b2+2)^(0+256),w
  4969  05E8  0020               	movlb	0	; select bank0
  4970  05E9  00AF               	movwf	___ftmul@f2+2
  4971  05EA  3188  20DA  3184   	fcall	___ftmul
  4972  05ED  0020               	movlb	0	; select bank0
  4973  05EE  082A               	movf	?___ftmul,w
  4974  05EF  00C8               	movwf	___ftadd@f1
  4975  05F0  082B               	movf	?___ftmul+1,w
  4976  05F1  00C9               	movwf	___ftadd@f1+1
  4977  05F2  082C               	movf	?___ftmul+2,w
  4978  05F3  00CA               	movwf	___ftadd@f1+2
  4979  05F4  0021               	movlb	1	; select bank1
  4980  05F5  0869               	movf	_rk_1^(0+128),w
  4981  05F6  0020               	movlb	0	; select bank0
  4982  05F7  00AA               	movwf	___ftmul@f1
  4983  05F8  0021               	movlb	1	; select bank1
  4984  05F9  086A               	movf	(_rk_1+1)^(0+128),w
  4985  05FA  0020               	movlb	0	; select bank0
  4986  05FB  00AB               	movwf	___ftmul@f1+1
  4987  05FC  0021               	movlb	1	; select bank1
  4988  05FD  086B               	movf	(_rk_1+2)^(0+128),w
  4989  05FE  0020               	movlb	0	; select bank0
  4990  05FF  00AC               	movwf	___ftmul@f1+2
  4991  0600  0022               	movlb	2	; select bank2
  4992  0601  0832               	movf	_b1^(0+256),w
  4993  0602  0020               	movlb	0	; select bank0
  4994  0603  00AD               	movwf	___ftmul@f2
  4995  0604  0022               	movlb	2	; select bank2
  4996  0605  0833               	movf	(_b1+1)^(0+256),w
  4997  0606  0020               	movlb	0	; select bank0
  4998  0607  00AE               	movwf	___ftmul@f2+1
  4999  0608  0022               	movlb	2	; select bank2
  5000  0609  0834               	movf	(_b1+2)^(0+256),w
  5001  060A  0020               	movlb	0	; select bank0
  5002  060B  00AF               	movwf	___ftmul@f2+2
  5003  060C  3188  20DA  3184   	fcall	___ftmul
  5004  060F  0020               	movlb	0	; select bank0
  5005  0610  082A               	movf	?___ftmul,w
  5006  0611  00CB               	movwf	___ftadd@f2
  5007  0612  082B               	movf	?___ftmul+1,w
  5008  0613  00CC               	movwf	___ftadd@f2+1
  5009  0614  082C               	movf	?___ftmul+2,w
  5010  0615  00CD               	movwf	___ftadd@f2+2
  5011  0616  318A  2244  3184   	fcall	___ftadd
  5012  0619  0020               	movlb	0	; select bank0
  5013  061A  0848               	movf	?___ftadd,w
  5014  061B  0021               	movlb	1	; select bank1
  5015  061C  00C6               	movwf	_main$1319^(0+128)
  5016  061D  0020               	movlb	0	; select bank0
  5017  061E  0849               	movf	?___ftadd+1,w
  5018  061F  0021               	movlb	1	; select bank1
  5019  0620  00C7               	movwf	(_main$1319+1)^(0+128)
  5020  0621  0020               	movlb	0	; select bank0
  5021  0622  084A               	movf	?___ftadd+2,w
  5022  0623  0021               	movlb	1	; select bank1
  5023  0624  00C8               	movwf	(_main$1319+2)^(0+128)
  5024                           
  5025                           ;main.c: 290: rk = Ver + (b1 * rk_1) + (b2 * rk_2);
  5026  0625  0852               	movf	_Ver^(0+128),w
  5027  0626  0020               	movlb	0	; select bank0
  5028  0627  00C8               	movwf	___ftadd@f1
  5029  0628  0021               	movlb	1	; select bank1
  5030  0629  0853               	movf	(_Ver+1)^(0+128),w
  5031  062A  0020               	movlb	0	; select bank0
  5032  062B  00C9               	movwf	___ftadd@f1+1
  5033  062C  0021               	movlb	1	; select bank1
  5034  062D  0854               	movf	(_Ver+2)^(0+128),w
  5035  062E  0020               	movlb	0	; select bank0
  5036  062F  00CA               	movwf	___ftadd@f1+2
  5037  0630  0021               	movlb	1	; select bank1
  5038  0631  0846               	movf	_main$1319^(0+128),w
  5039  0632  0020               	movlb	0	; select bank0
  5040  0633  00CB               	movwf	___ftadd@f2
  5041  0634  0021               	movlb	1	; select bank1
  5042  0635  0847               	movf	(_main$1319+1)^(0+128),w
  5043  0636  0020               	movlb	0	; select bank0
  5044  0637  00CC               	movwf	___ftadd@f2+1
  5045  0638  0021               	movlb	1	; select bank1
  5046  0639  0848               	movf	(_main$1319+2)^(0+128),w
  5047  063A  0020               	movlb	0	; select bank0
  5048  063B  00CD               	movwf	___ftadd@f2+2
  5049  063C  318A  2244  3184   	fcall	___ftadd
  5050  063F  0020               	movlb	0	; select bank0
  5051  0640  0848               	movf	?___ftadd,w
  5052  0641  0021               	movlb	1	; select bank1
  5053  0642  00E6               	movwf	_rk^(0+128)
  5054  0643  0020               	movlb	0	; select bank0
  5055  0644  0849               	movf	?___ftadd+1,w
  5056  0645  0021               	movlb	1	; select bank1
  5057  0646  00E7               	movwf	(_rk+1)^(0+128)
  5058  0647  0020               	movlb	0	; select bank0
  5059  0648  084A               	movf	?___ftadd+2,w
  5060  0649  0021               	movlb	1	; select bank1
  5061  064A  00E8               	movwf	(_rk+2)^(0+128)
  5062                           
  5063                           ;main.c: 291: Vc = (a0*rk) + (rk_1 * a1) + (rk_2 * a2);
  5064  064B  0022               	movlb	2	; select bank2
  5065  064C  082C               	movf	_a1^(0+256),w
  5066  064D  0020               	movlb	0	; select bank0
  5067  064E  00AA               	movwf	___ftmul@f1
  5068  064F  0022               	movlb	2	; select bank2
  5069  0650  082D               	movf	(_a1+1)^(0+256),w
  5070  0651  0020               	movlb	0	; select bank0
  5071  0652  00AB               	movwf	___ftmul@f1+1
  5072  0653  0022               	movlb	2	; select bank2
  5073  0654  082E               	movf	(_a1+2)^(0+256),w
  5074  0655  0020               	movlb	0	; select bank0
  5075  0656  00AC               	movwf	___ftmul@f1+2
  5076  0657  0021               	movlb	1	; select bank1
  5077  0658  0869               	movf	_rk_1^(0+128),w
  5078  0659  0020               	movlb	0	; select bank0
  5079  065A  00AD               	movwf	___ftmul@f2
  5080  065B  0021               	movlb	1	; select bank1
  5081  065C  086A               	movf	(_rk_1+1)^(0+128),w
  5082  065D  0020               	movlb	0	; select bank0
  5083  065E  00AE               	movwf	___ftmul@f2+1
  5084  065F  0021               	movlb	1	; select bank1
  5085  0660  086B               	movf	(_rk_1+2)^(0+128),w
  5086  0661  0020               	movlb	0	; select bank0
  5087  0662  00AF               	movwf	___ftmul@f2+2
  5088  0663  3188  20DA  3184   	fcall	___ftmul
  5089  0666  0020               	movlb	0	; select bank0
  5090  0667  082A               	movf	?___ftmul,w
  5091  0668  00C8               	movwf	___ftadd@f1
  5092  0669  082B               	movf	?___ftmul+1,w
  5093  066A  00C9               	movwf	___ftadd@f1+1
  5094  066B  082C               	movf	?___ftmul+2,w
  5095  066C  00CA               	movwf	___ftadd@f1+2
  5096  066D  0021               	movlb	1	; select bank1
  5097  066E  0866               	movf	_rk^(0+128),w
  5098  066F  0020               	movlb	0	; select bank0
  5099  0670  00AA               	movwf	___ftmul@f1
  5100  0671  0021               	movlb	1	; select bank1
  5101  0672  0867               	movf	(_rk+1)^(0+128),w
  5102  0673  0020               	movlb	0	; select bank0
  5103  0674  00AB               	movwf	___ftmul@f1+1
  5104  0675  0021               	movlb	1	; select bank1
  5105  0676  0868               	movf	(_rk+2)^(0+128),w
  5106  0677  0020               	movlb	0	; select bank0
  5107  0678  00AC               	movwf	___ftmul@f1+2
  5108  0679  0021               	movlb	1	; select bank1
  5109  067A  0863               	movf	_a0^(0+128),w
  5110  067B  0020               	movlb	0	; select bank0
  5111  067C  00AD               	movwf	___ftmul@f2
  5112  067D  0021               	movlb	1	; select bank1
  5113  067E  0864               	movf	(_a0+1)^(0+128),w
  5114  067F  0020               	movlb	0	; select bank0
  5115  0680  00AE               	movwf	___ftmul@f2+1
  5116  0681  0021               	movlb	1	; select bank1
  5117  0682  0865               	movf	(_a0+2)^(0+128),w
  5118  0683  0020               	movlb	0	; select bank0
  5119  0684  00AF               	movwf	___ftmul@f2+2
  5120  0685  3188  20DA  3184   	fcall	___ftmul
  5121  0688  0020               	movlb	0	; select bank0
  5122  0689  082A               	movf	?___ftmul,w
  5123  068A  00CB               	movwf	___ftadd@f2
  5124  068B  082B               	movf	?___ftmul+1,w
  5125  068C  00CC               	movwf	___ftadd@f2+1
  5126  068D  082C               	movf	?___ftmul+2,w
  5127  068E  00CD               	movwf	___ftadd@f2+2
  5128  068F  318A  2244  3184   	fcall	___ftadd
  5129  0692  0020               	movlb	0	; select bank0
  5130  0693  0848               	movf	?___ftadd,w
  5131  0694  0021               	movlb	1	; select bank1
  5132  0695  00C6               	movwf	_main$1319^(0+128)
  5133  0696  0020               	movlb	0	; select bank0
  5134  0697  0849               	movf	?___ftadd+1,w
  5135  0698  0021               	movlb	1	; select bank1
  5136  0699  00C7               	movwf	(_main$1319+1)^(0+128)
  5137  069A  0020               	movlb	0	; select bank0
  5138  069B  084A               	movf	?___ftadd+2,w
  5139  069C  0021               	movlb	1	; select bank1
  5140  069D  00C8               	movwf	(_main$1319+2)^(0+128)
  5141                           
  5142                           ;main.c: 291: Vc = (a0*rk) + (rk_1 * a1) + (rk_2 * a2);
  5143  069E  0022               	movlb	2	; select bank2
  5144  069F  082F               	movf	_a2^(0+256),w
  5145  06A0  0020               	movlb	0	; select bank0
  5146  06A1  00AA               	movwf	___ftmul@f1
  5147  06A2  0022               	movlb	2	; select bank2
  5148  06A3  0830               	movf	(_a2+1)^(0+256),w
  5149  06A4  0020               	movlb	0	; select bank0
  5150  06A5  00AB               	movwf	___ftmul@f1+1
  5151  06A6  0022               	movlb	2	; select bank2
  5152  06A7  0831               	movf	(_a2+2)^(0+256),w
  5153  06A8  0020               	movlb	0	; select bank0
  5154  06A9  00AC               	movwf	___ftmul@f1+2
  5155  06AA  0021               	movlb	1	; select bank1
  5156  06AB  086C               	movf	_rk_2^(0+128),w
  5157  06AC  0020               	movlb	0	; select bank0
  5158  06AD  00AD               	movwf	___ftmul@f2
  5159  06AE  0021               	movlb	1	; select bank1
  5160  06AF  086D               	movf	(_rk_2+1)^(0+128),w
  5161  06B0  0020               	movlb	0	; select bank0
  5162  06B1  00AE               	movwf	___ftmul@f2+1
  5163  06B2  0021               	movlb	1	; select bank1
  5164  06B3  086E               	movf	(_rk_2+2)^(0+128),w
  5165  06B4  0020               	movlb	0	; select bank0
  5166  06B5  00AF               	movwf	___ftmul@f2+2
  5167  06B6  3188  20DA  3184   	fcall	___ftmul
  5168  06B9  0020               	movlb	0	; select bank0
  5169  06BA  082A               	movf	?___ftmul,w
  5170  06BB  00C8               	movwf	___ftadd@f1
  5171  06BC  082B               	movf	?___ftmul+1,w
  5172  06BD  00C9               	movwf	___ftadd@f1+1
  5173  06BE  082C               	movf	?___ftmul+2,w
  5174  06BF  00CA               	movwf	___ftadd@f1+2
  5175  06C0  0021               	movlb	1	; select bank1
  5176  06C1  0846               	movf	_main$1319^(0+128),w
  5177  06C2  0020               	movlb	0	; select bank0
  5178  06C3  00CB               	movwf	___ftadd@f2
  5179  06C4  0021               	movlb	1	; select bank1
  5180  06C5  0847               	movf	(_main$1319+1)^(0+128),w
  5181  06C6  0020               	movlb	0	; select bank0
  5182  06C7  00CC               	movwf	___ftadd@f2+1
  5183  06C8  0021               	movlb	1	; select bank1
  5184  06C9  0848               	movf	(_main$1319+2)^(0+128),w
  5185  06CA  0020               	movlb	0	; select bank0
  5186  06CB  00CD               	movwf	___ftadd@f2+2
  5187  06CC  318A  2244  3184   	fcall	___ftadd
  5188  06CF  0020               	movlb	0	; select bank0
  5189  06D0  0848               	movf	?___ftadd,w
  5190  06D1  0021               	movlb	1	; select bank1
  5191  06D2  00CF               	movwf	_Vc^(0+128)
  5192  06D3  0020               	movlb	0	; select bank0
  5193  06D4  0849               	movf	?___ftadd+1,w
  5194  06D5  0021               	movlb	1	; select bank1
  5195  06D6  00D0               	movwf	(_Vc+1)^(0+128)
  5196  06D7  0020               	movlb	0	; select bank0
  5197  06D8  084A               	movf	?___ftadd+2,w
  5198  06D9  0021               	movlb	1	; select bank1
  5199  06DA  00D1               	movwf	(_Vc+2)^(0+128)
  5200                           
  5201                           ;main.c: 293: DAC_DISCRETE = Vc*DA_LSB;
  5202  06DB  0860               	movf	_DA_LSB^(0+128),w
  5203  06DC  0020               	movlb	0	; select bank0
  5204  06DD  00AA               	movwf	___ftmul@f1
  5205  06DE  0021               	movlb	1	; select bank1
  5206  06DF  0861               	movf	(_DA_LSB+1)^(0+128),w
  5207  06E0  0020               	movlb	0	; select bank0
  5208  06E1  00AB               	movwf	___ftmul@f1+1
  5209  06E2  0021               	movlb	1	; select bank1
  5210  06E3  0862               	movf	(_DA_LSB+2)^(0+128),w
  5211  06E4  0020               	movlb	0	; select bank0
  5212  06E5  00AC               	movwf	___ftmul@f1+2
  5213  06E6  0021               	movlb	1	; select bank1
  5214  06E7  084F               	movf	_Vc^(0+128),w
  5215  06E8  0020               	movlb	0	; select bank0
  5216  06E9  00AD               	movwf	___ftmul@f2
  5217  06EA  0021               	movlb	1	; select bank1
  5218  06EB  0850               	movf	(_Vc+1)^(0+128),w
  5219  06EC  0020               	movlb	0	; select bank0
  5220  06ED  00AE               	movwf	___ftmul@f2+1
  5221  06EE  0021               	movlb	1	; select bank1
  5222  06EF  0851               	movf	(_Vc+2)^(0+128),w
  5223  06F0  0020               	movlb	0	; select bank0
  5224  06F1  00AF               	movwf	___ftmul@f2+2
  5225  06F2  3188  20DA  3184   	fcall	___ftmul
  5226  06F5  0020               	movlb	0	; select bank0
  5227  06F6  082A               	movf	?___ftmul,w
  5228  06F7  0021               	movlb	1	; select bank1
  5229  06F8  00CC               	movwf	_DAC_DISCRETE^(0+128)
  5230  06F9  0020               	movlb	0	; select bank0
  5231  06FA  082B               	movf	?___ftmul+1,w
  5232  06FB  0021               	movlb	1	; select bank1
  5233  06FC  00CD               	movwf	(_DAC_DISCRETE+1)^(0+128)
  5234  06FD  0020               	movlb	0	; select bank0
  5235  06FE  082C               	movf	?___ftmul+2,w
  5236  06FF  0021               	movlb	1	; select bank1
  5237  0700  00CE               	movwf	(_DAC_DISCRETE+2)^(0+128)
  5238                           
  5239                           ;main.c: 298: DAC_SetOutput((unsigned int)fabs(DAC_DISCRETE));
  5240  0701  084C               	movf	_DAC_DISCRETE^(0+128),w
  5241  0702  00FA               	movwf	fabs@d
  5242  0703  084D               	movf	(_DAC_DISCRETE+1)^(0+128),w
  5243  0704  00FB               	movwf	fabs@d+1
  5244  0705  084E               	movf	(_DAC_DISCRETE+2)^(0+128),w
  5245  0706  00FC               	movwf	fabs@d+2
  5246  0707  3195  25CC  3184   	fcall	_fabs
  5247  070A  087A               	movf	?_fabs,w
  5248  070B  0020               	movlb	0	; select bank0
  5249  070C  00C3               	movwf	___fttol@f1
  5250  070D  087B               	movf	?_fabs+1,w
  5251  070E  00C4               	movwf	___fttol@f1+1
  5252  070F  087C               	movf	?_fabs+2,w
  5253  0710  00C5               	movwf	___fttol@f1+2
  5254  0711  3187  2768  3184   	fcall	___fttol
  5255  0714  0020               	movlb	0	; select bank0
  5256  0715  0843               	movf	?___fttol,w
  5257  0716  3195  2500  3184   	fcall	_DAC_SetOutput
  5258                           
  5259                           ;main.c: 300: rk_2 = rk_1;
  5260  0719  0021               	movlb	1	; select bank1
  5261  071A  0869               	movf	_rk_1^(0+128),w
  5262  071B  00EC               	movwf	_rk_2^(0+128)
  5263  071C  086A               	movf	(_rk_1+1)^(0+128),w
  5264  071D  00ED               	movwf	(_rk_2+1)^(0+128)
  5265  071E  086B               	movf	(_rk_1+2)^(0+128),w
  5266  071F  00EE               	movwf	(_rk_2+2)^(0+128)
  5267                           
  5268                           ;main.c: 301: rk_1 = rk;
  5269  0720  0866               	movf	_rk^(0+128),w
  5270  0721  00E9               	movwf	_rk_1^(0+128)
  5271  0722  0867               	movf	(_rk+1)^(0+128),w
  5272  0723  00EA               	movwf	(_rk_1+1)^(0+128)
  5273  0724  0868               	movf	(_rk+2)^(0+128),w
  5274  0725  00EB               	movwf	(_rk_1+2)^(0+128)
  5275                           
  5276                           ;main.c: 303: USART_WriteString("Ver : ");
  5277  0726  3095               	movlw	low (STR_3| (0+32768))
  5278  0727  00F2               	movwf	USART_WriteString@_data
  5279  0728  3090               	movlw	high (STR_3| (0+32768))
  5280  0729  00F3               	movwf	USART_WriteString@_data+1
  5281  072A  3196  2610  3184   	fcall	_USART_WriteString
  5282                           
  5283                           ;main.c: 304: USART_WriteValue(Ver);
  5284  072D  0021               	movlb	1	; select bank1
  5285  072E  0852               	movf	_Ver^(0+128),w
  5286  072F  0020               	movlb	0	; select bank0
  5287  0730  00E6               	movwf	USART_WriteValue@_data
  5288  0731  0021               	movlb	1	; select bank1
  5289  0732  0853               	movf	(_Ver+1)^(0+128),w
  5290  0733  0020               	movlb	0	; select bank0
  5291  0734  00E7               	movwf	USART_WriteValue@_data+1
  5292  0735  0021               	movlb	1	; select bank1
  5293  0736  0854               	movf	(_Ver+2)^(0+128),w
  5294  0737  0020               	movlb	0	; select bank0
  5295  0738  00E8               	movwf	USART_WriteValue@_data+2
  5296  0739  3195  25EC  3184   	fcall	_USART_WriteValue
  5297                           
  5298                           ;main.c: 306: USART_WriteString("      ");
  5299  073C  308E               	movlw	low (STR_4| (0+32768))
  5300  073D  00F2               	movwf	USART_WriteString@_data
  5301  073E  3090               	movlw	high (STR_4| (0+32768))
  5302  073F  00F3               	movwf	USART_WriteString@_data+1
  5303  0740  3196  2610  3184   	fcall	_USART_WriteString
  5304                           
  5305                           ;main.c: 308: USART_WriteString("Vc : ");
  5306  0743  309C               	movlw	low (STR_5| (0+32768))
  5307  0744  00F2               	movwf	USART_WriteString@_data
  5308  0745  3090               	movlw	high (STR_5| (0+32768))
  5309  0746  00F3               	movwf	USART_WriteString@_data+1
  5310  0747  3196  2610  3184   	fcall	_USART_WriteString
  5311                           
  5312                           ;main.c: 309: USART_WriteValue(Vc);
  5313  074A  0021               	movlb	1	; select bank1
  5314  074B  084F               	movf	_Vc^(0+128),w
  5315  074C  0020               	movlb	0	; select bank0
  5316  074D  00E6               	movwf	USART_WriteValue@_data
  5317  074E  0021               	movlb	1	; select bank1
  5318  074F  0850               	movf	(_Vc+1)^(0+128),w
  5319  0750  0020               	movlb	0	; select bank0
  5320  0751  00E7               	movwf	USART_WriteValue@_data+1
  5321  0752  0021               	movlb	1	; select bank1
  5322  0753  0851               	movf	(_Vc+2)^(0+128),w
  5323  0754  0020               	movlb	0	; select bank0
  5324  0755  00E8               	movwf	USART_WriteValue@_data+2
  5325  0756  3195  25EC  3184   	fcall	_USART_WriteValue
  5326                           
  5327                           ;main.c: 311: USART_Write('\n');
  5328  0759  300A               	movlw	10
  5329  075A  3195  2517  3184   	fcall	_USART_Write
  5330                           
  5331                           ;main.c: 313: _delay((unsigned long)((10)*(32000000/4000.0)));
  5332  075D  3068               	movlw	104
  5333  075E  0020               	movlb	0	; select bank0
  5334  075F  00EB               	movwf	??_main+1
  5335  0760  30E4               	movlw	228
  5336  0761  00EA               	movwf	??_main
  5337  0762                     u3617:	
  5338  0762  0BEA               	decfsz	??_main,f
  5339  0763  2F62               	goto	u3617
  5340  0764  0BEB               	decfsz	??_main+1,f
  5341  0765  2F62               	goto	u3617
  5342  0766  0000               	nop
  5343  0767  2D45               	goto	l3331
  5344  0768                     __end_of_main:	
  5345                           ;main.c: 315: }
  5346                           ;main.c: 316: return;
  5347                           
  5348                           
  5349                           	psect	text1
  5350  15CC                     __ptext1:	
  5351 ;; *************** function _fabs *****************
  5352 ;; Defined at:
  5353 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v1.38\sources\common\fabs.c"
  5354 ;; Parameters:    Size  Location     Type
  5355 ;;  d               3   10[COMMON] void 
  5356 ;; Auto vars:     Size  Location     Type
  5357 ;;		None
  5358 ;; Return value:  Size  Location     Type
  5359 ;;                  3   10[COMMON] void 
  5360 ;; Registers used:
  5361 ;;		wreg, status,2, status,0, pclath, cstack
  5362 ;; Tracked objects:
  5363 ;;		On entry : 0/0
  5364 ;;		On exit  : 0/0
  5365 ;;		Unchanged: 0/0
  5366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5367 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5368 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5369 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5370 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5371 ;;Total ram usage:        3 bytes
  5372 ;; Hardware stack levels used:    1
  5373 ;; Hardware stack levels required when called:    2
  5374 ;; This function calls:
  5375 ;;		___ftge
  5376 ;;		___ftneg
  5377 ;; This function is called by:
  5378 ;;		_main
  5379 ;; This function uses a non-reentrant model
  5380 ;;
  5381                           
  5382                           
  5383                           ;psect for function _fabs
  5384  15CC                     _fabs:	
  5385                           
  5386                           ;incstack = 0
  5387                           ; Regs used in _fabs: [wreg+status,2+status,0+pclath+cstack]
  5388  15CC  087A               	movf	fabs@d,w
  5389  15CD  00F1               	movwf	___ftge@ff1
  5390  15CE  087B               	movf	fabs@d+1,w
  5391  15CF  00F2               	movwf	___ftge@ff1+1
  5392  15D0  087C               	movf	fabs@d+2,w
  5393  15D1  00F3               	movwf	___ftge@ff1+2
  5394  15D2  3000               	movlw	0
  5395  15D3  00F4               	movwf	___ftge@ff2
  5396  15D4  3000               	movlw	0
  5397  15D5  00F5               	movwf	___ftge@ff2+1
  5398  15D6  3000               	movlw	0
  5399  15D7  00F6               	movwf	___ftge@ff2+2
  5400  15D8  3196  2635  3195   	fcall	___ftge
  5401  15DB  1803               	btfsc	3,0
  5402  15DC  0008               	return
  5403  15DD  087A               	movf	fabs@d,w
  5404  15DE  00F1               	movwf	___ftneg@f1
  5405  15DF  087B               	movf	fabs@d+1,w
  5406  15E0  00F2               	movwf	___ftneg@f1+1
  5407  15E1  087C               	movf	fabs@d+2,w
  5408  15E2  00F3               	movwf	___ftneg@f1+2
  5409  15E3  3188  2000         	fcall	___ftneg
  5410  15E5  0871               	movf	?___ftneg,w
  5411  15E6  00FA               	movwf	?_fabs
  5412  15E7  0872               	movf	?___ftneg+1,w
  5413  15E8  00FB               	movwf	?_fabs+1
  5414  15E9  0873               	movf	?___ftneg+2,w
  5415  15EA  00FC               	movwf	?_fabs+2
  5416  15EB  0008               	return
  5417  15EC                     __end_of_fabs:	
  5418                           
  5419                           	psect	text2
  5420  154F                     __ptext2:	
  5421 ;; *************** function ___lwtoft *****************
  5422 ;; Defined at:
  5423 ;;		line 28 in file "C:\Program Files\Microchip\xc8\v1.38\sources\common\lwtoft.c"
  5424 ;; Parameters:    Size  Location     Type
  5425 ;;  c               2    9[COMMON] unsigned int 
  5426 ;; Auto vars:     Size  Location     Type
  5427 ;;		None
  5428 ;; Return value:  Size  Location     Type
  5429 ;;                  3    9[COMMON] float 
  5430 ;; Registers used:
  5431 ;;		wreg, status,2, status,0, pclath, cstack
  5432 ;; Tracked objects:
  5433 ;;		On entry : 0/0
  5434 ;;		On exit  : 0/0
  5435 ;;		Unchanged: 0/0
  5436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5437 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5438 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5439 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5440 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5441 ;;Total ram usage:        4 bytes
  5442 ;; Hardware stack levels used:    1
  5443 ;; Hardware stack levels required when called:    2
  5444 ;; This function calls:
  5445 ;;		___ftpack
  5446 ;; This function is called by:
  5447 ;;		_main
  5448 ;; This function uses a non-reentrant model
  5449 ;;
  5450                           
  5451                           
  5452                           ;psect for function ___lwtoft
  5453  154F                     ___lwtoft:	
  5454                           
  5455                           ;incstack = 0
  5456                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  5457  154F  0879               	movf	___lwtoft@c,w
  5458  1550  00F1               	movwf	___ftpack@arg
  5459  1551  087A               	movf	___lwtoft@c+1,w
  5460  1552  00F2               	movwf	___ftpack@arg+1
  5461  1553  01F3               	clrf	___ftpack@arg+2
  5462  1554  308E               	movlw	142
  5463  1555  00FC               	movwf	??___lwtoft
  5464  1556  087C               	movf	??___lwtoft,w
  5465  1557  00F4               	movwf	___ftpack@exp
  5466  1558  01F5               	clrf	___ftpack@sign
  5467  1559  3197  279C         	fcall	___ftpack
  5468  155B  0871               	movf	?___ftpack,w
  5469  155C  00F9               	movwf	?___lwtoft
  5470  155D  0872               	movf	?___ftpack+1,w
  5471  155E  00FA               	movwf	?___lwtoft+1
  5472  155F  0873               	movf	?___ftpack+2,w
  5473  1560  00FB               	movwf	?___lwtoft+2
  5474  1561  0008               	return
  5475  1562                     __end_of___lwtoft:	
  5476                           
  5477                           	psect	text3
  5478  0831                     __ptext3:	
  5479 ;; *************** function ___ftdiv *****************
  5480 ;; Defined at:
  5481 ;;		line 56 in file "C:\Program Files\Microchip\xc8\v1.38\sources\common\ftdiv.c"
  5482 ;; Parameters:    Size  Location     Type
  5483 ;;  f2              3   26[BANK0 ] float 
  5484 ;;  f1              3   29[BANK0 ] float 
  5485 ;; Auto vars:     Size  Location     Type
  5486 ;;  f3              3   37[BANK0 ] float 
  5487 ;;  sign            1   41[BANK0 ] unsigned char 
  5488 ;;  exp             1   40[BANK0 ] unsigned char 
  5489 ;;  cntr            1   36[BANK0 ] unsigned char 
  5490 ;; Return value:  Size  Location     Type
  5491 ;;                  3   26[BANK0 ] float 
  5492 ;; Registers used:
  5493 ;;		wreg, status,2, status,0, pclath, cstack
  5494 ;; Tracked objects:
  5495 ;;		On entry : 0/0
  5496 ;;		On exit  : 0/0
  5497 ;;		Unchanged: 0/0
  5498 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5499 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5500 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5501 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5502 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5503 ;;Total ram usage:       16 bytes
  5504 ;; Hardware stack levels used:    1
  5505 ;; Hardware stack levels required when called:    2
  5506 ;; This function calls:
  5507 ;;		___ftpack
  5508 ;; This function is called by:
  5509 ;;		_main
  5510 ;; This function uses a non-reentrant model
  5511 ;;
  5512                           
  5513                           
  5514                           ;psect for function ___ftdiv
  5515  0831                     ___ftdiv:	
  5516                           
  5517                           ;incstack = 0
  5518                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  5519  0831  0020               	movlb	0	; select bank0
  5520  0832  083D               	movf	___ftdiv@f1,w
  5521  0833  00C0               	movwf	??___ftdiv
  5522  0834  083E               	movf	___ftdiv@f1+1,w
  5523  0835  00C1               	movwf	??___ftdiv+1
  5524  0836  083F               	movf	___ftdiv@f1+2,w
  5525  0837  00C2               	movwf	??___ftdiv+2
  5526  0838  1003               	clrc
  5527  0839  0D41               	rlf	??___ftdiv+1,w
  5528  083A  0D42               	rlf	??___ftdiv+2,w
  5529  083B  00C3               	movwf	??___ftdiv+3
  5530  083C  0843               	movf	??___ftdiv+3,w
  5531  083D  00C8               	movwf	___ftdiv@exp
  5532  083E  0848               	movf	___ftdiv@exp,w
  5533  083F  1D03               	btfss	3,2
  5534  0840  2848               	goto	l3159
  5535  0841  3000               	movlw	0
  5536  0842  00BA               	movwf	?___ftdiv
  5537  0843  3000               	movlw	0
  5538  0844  00BB               	movwf	?___ftdiv+1
  5539  0845  3000               	movlw	0
  5540  0846  00BC               	movwf	?___ftdiv+2
  5541  0847  0008               	return
  5542  0848                     l3159:	
  5543  0848  083A               	movf	___ftdiv@f2,w
  5544  0849  00C0               	movwf	??___ftdiv
  5545  084A  083B               	movf	___ftdiv@f2+1,w
  5546  084B  00C1               	movwf	??___ftdiv+1
  5547  084C  083C               	movf	___ftdiv@f2+2,w
  5548  084D  00C2               	movwf	??___ftdiv+2
  5549  084E  1003               	clrc
  5550  084F  0D41               	rlf	??___ftdiv+1,w
  5551  0850  0D42               	rlf	??___ftdiv+2,w
  5552  0851  00C3               	movwf	??___ftdiv+3
  5553  0852  0843               	movf	??___ftdiv+3,w
  5554  0853  00C9               	movwf	___ftdiv@sign
  5555  0854  0849               	movf	___ftdiv@sign,w
  5556  0855  1D03               	btfss	3,2
  5557  0856  285E               	goto	l3165
  5558  0857  3000               	movlw	0
  5559  0858  00BA               	movwf	?___ftdiv
  5560  0859  3000               	movlw	0
  5561  085A  00BB               	movwf	?___ftdiv+1
  5562  085B  3000               	movlw	0
  5563  085C  00BC               	movwf	?___ftdiv+2
  5564  085D  0008               	return
  5565  085E                     l3165:	
  5566  085E  3000               	movlw	0
  5567  085F  00C5               	movwf	___ftdiv@f3
  5568  0860  3000               	movlw	0
  5569  0861  00C6               	movwf	___ftdiv@f3+1
  5570  0862  3000               	movlw	0
  5571  0863  00C7               	movwf	___ftdiv@f3+2
  5572  0864  3089               	movlw	137
  5573  0865  0749               	addwf	___ftdiv@sign,w
  5574  0866  00C0               	movwf	??___ftdiv
  5575  0867  0840               	movf	??___ftdiv,w
  5576  0868  02C8               	subwf	___ftdiv@exp,f
  5577  0869  083D               	movf	___ftdiv@f1,w
  5578  086A  00C0               	movwf	??___ftdiv
  5579  086B  083E               	movf	___ftdiv@f1+1,w
  5580  086C  00C1               	movwf	??___ftdiv+1
  5581  086D  083F               	movf	___ftdiv@f1+2,w
  5582  086E  00C2               	movwf	??___ftdiv+2
  5583  086F  3010               	movlw	16
  5584  0870                     u3525:	
  5585  0870  36C2               	lsrf	??___ftdiv+2,f
  5586  0871  0CC1               	rrf	??___ftdiv+1,f
  5587  0872  0CC0               	rrf	??___ftdiv,f
  5588  0873  0B89               	decfsz	9,f
  5589  0874  2870               	goto	u3525
  5590  0875  0840               	movf	??___ftdiv,w
  5591  0876  00C3               	movwf	??___ftdiv+3
  5592  0877  0843               	movf	??___ftdiv+3,w
  5593  0878  00C9               	movwf	___ftdiv@sign
  5594  0879  083A               	movf	___ftdiv@f2,w
  5595  087A  00C0               	movwf	??___ftdiv
  5596  087B  083B               	movf	___ftdiv@f2+1,w
  5597  087C  00C1               	movwf	??___ftdiv+1
  5598  087D  083C               	movf	___ftdiv@f2+2,w
  5599  087E  00C2               	movwf	??___ftdiv+2
  5600  087F  3010               	movlw	16
  5601  0880                     u3535:	
  5602  0880  36C2               	lsrf	??___ftdiv+2,f
  5603  0881  0CC1               	rrf	??___ftdiv+1,f
  5604  0882  0CC0               	rrf	??___ftdiv,f
  5605  0883  0B89               	decfsz	9,f
  5606  0884  2880               	goto	u3535
  5607  0885  0840               	movf	??___ftdiv,w
  5608  0886  00C3               	movwf	??___ftdiv+3
  5609  0887  0843               	movf	??___ftdiv+3,w
  5610  0888  06C9               	xorwf	___ftdiv@sign,f
  5611  0889  3080               	movlw	128
  5612  088A  00C0               	movwf	??___ftdiv
  5613  088B  0840               	movf	??___ftdiv,w
  5614  088C  05C9               	andwf	___ftdiv@sign,f
  5615  088D  17BE               	bsf	___ftdiv@f1+1,7
  5616  088E  30FF               	movlw	255
  5617  088F  05BD               	andwf	___ftdiv@f1,f
  5618  0890  30FF               	movlw	255
  5619  0891  05BE               	andwf	___ftdiv@f1+1,f
  5620  0892  3000               	movlw	0
  5621  0893  05BF               	andwf	___ftdiv@f1+2,f
  5622  0894  17BB               	bsf	___ftdiv@f2+1,7
  5623  0895  30FF               	movlw	255
  5624  0896  05BA               	andwf	___ftdiv@f2,f
  5625  0897  30FF               	movlw	255
  5626  0898  05BB               	andwf	___ftdiv@f2+1,f
  5627  0899  3000               	movlw	0
  5628  089A  05BC               	andwf	___ftdiv@f2+2,f
  5629  089B  3018               	movlw	24
  5630  089C  00C0               	movwf	??___ftdiv
  5631  089D  0840               	movf	??___ftdiv,w
  5632  089E  00C4               	movwf	___ftdiv@cntr
  5633  089F                     l3179:	
  5634  089F  3001               	movlw	1
  5635  08A0                     u3545:	
  5636  08A0  35C5               	lslf	___ftdiv@f3,f
  5637  08A1  0DC6               	rlf	___ftdiv@f3+1,f
  5638  08A2  0DC7               	rlf	___ftdiv@f3+2,f
  5639  08A3  0B89               	decfsz	9,f
  5640  08A4  28A0               	goto	u3545
  5641  08A5  083C               	movf	___ftdiv@f2+2,w
  5642  08A6  023F               	subwf	___ftdiv@f1+2,w
  5643  08A7  1D03               	skipz
  5644  08A8  28AF               	goto	u3555
  5645  08A9  083B               	movf	___ftdiv@f2+1,w
  5646  08AA  023E               	subwf	___ftdiv@f1+1,w
  5647  08AB  1D03               	skipz
  5648  08AC  28AF               	goto	u3555
  5649  08AD  083A               	movf	___ftdiv@f2,w
  5650  08AE  023D               	subwf	___ftdiv@f1,w
  5651  08AF                     u3555:	
  5652  08AF  1C03               	skipc
  5653  08B0  28B8               	goto	l3187
  5654  08B1  083A               	movf	___ftdiv@f2,w
  5655  08B2  02BD               	subwf	___ftdiv@f1,f
  5656  08B3  083B               	movf	___ftdiv@f2+1,w
  5657  08B4  3BBE               	subwfb	___ftdiv@f1+1,f
  5658  08B5  083C               	movf	___ftdiv@f2+2,w
  5659  08B6  3BBF               	subwfb	___ftdiv@f1+2,f
  5660  08B7  1445               	bsf	___ftdiv@f3,0
  5661  08B8                     l3187:	
  5662  08B8  3001               	movlw	1
  5663  08B9                     u3565:	
  5664  08B9  35BD               	lslf	___ftdiv@f1,f
  5665  08BA  0DBE               	rlf	___ftdiv@f1+1,f
  5666  08BB  0DBF               	rlf	___ftdiv@f1+2,f
  5667  08BC  0B89               	decfsz	9,f
  5668  08BD  28B9               	goto	u3565
  5669  08BE  3001               	movlw	1
  5670  08BF  02C4               	subwf	___ftdiv@cntr,f
  5671  08C0  1D03               	btfss	3,2
  5672  08C1  289F               	goto	l3179
  5673  08C2  0845               	movf	___ftdiv@f3,w
  5674  08C3  00F1               	movwf	___ftpack@arg
  5675  08C4  0846               	movf	___ftdiv@f3+1,w
  5676  08C5  00F2               	movwf	___ftpack@arg+1
  5677  08C6  0847               	movf	___ftdiv@f3+2,w
  5678  08C7  00F3               	movwf	___ftpack@arg+2
  5679  08C8  0848               	movf	___ftdiv@exp,w
  5680  08C9  00C0               	movwf	??___ftdiv
  5681  08CA  0840               	movf	??___ftdiv,w
  5682  08CB  00F4               	movwf	___ftpack@exp
  5683  08CC  0849               	movf	___ftdiv@sign,w
  5684  08CD  00C1               	movwf	??___ftdiv+1
  5685  08CE  0841               	movf	??___ftdiv+1,w
  5686  08CF  00F5               	movwf	___ftpack@sign
  5687  08D0  3197  279C         	fcall	___ftpack
  5688  08D2  0871               	movf	?___ftpack,w
  5689  08D3  0020               	movlb	0	; select bank0
  5690  08D4  00BA               	movwf	?___ftdiv
  5691  08D5  0872               	movf	?___ftpack+1,w
  5692  08D6  00BB               	movwf	?___ftdiv+1
  5693  08D7  0873               	movf	?___ftpack+2,w
  5694  08D8  00BC               	movwf	?___ftdiv+2
  5695  08D9  0008               	return
  5696  08DA                     __end_of___ftdiv:	
  5697                           
  5698                           	psect	text4
  5699  15EC                     __ptext4:	
  5700 ;; *************** function _USART_WriteValue *****************
  5701 ;; Defined at:
  5702 ;;		line 180 in file "main.c"
  5703 ;; Parameters:    Size  Location     Type
  5704 ;;  _data           3   70[BANK0 ] float 
  5705 ;; Auto vars:     Size  Location     Type
  5706 ;;  buf            15   23[BANK1 ] unsigned char [15]
  5707 ;; Return value:  Size  Location     Type
  5708 ;;                  1    wreg      void 
  5709 ;; Registers used:
  5710 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5711 ;; Tracked objects:
  5712 ;;		On entry : 0/0
  5713 ;;		On exit  : 0/0
  5714 ;;		Unchanged: 0/0
  5715 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5716 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5717 ;;      Locals:         0       0      15       0       0       0       0       0       0       0       0       0       
      +0       0
  5718 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5719 ;;      Totals:         0       4      15       0       0       0       0       0       0       0       0       0       
      +0       0
  5720 ;;Total ram usage:       19 bytes
  5721 ;; Hardware stack levels used:    1
  5722 ;; Hardware stack levels required when called:    5
  5723 ;; This function calls:
  5724 ;;		_USART_WriteString
  5725 ;;		_sprintf
  5726 ;; This function is called by:
  5727 ;;		_main
  5728 ;; This function uses a non-reentrant model
  5729 ;;
  5730                           
  5731                           
  5732                           ;psect for function _USART_WriteValue
  5733  15EC                     _USART_WriteValue:	
  5734                           
  5735                           ;main.c: 182: uint8_t buf[15] = {0};
  5736                           
  5737                           ;incstack = 0
  5738                           ; Regs used in _USART_WriteValue: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5739  15EC  3038               	movlw	low USART_WriteValue@F5504
  5740  15ED  0086               	movwf	6
  5741  15EE  3001               	movlw	high USART_WriteValue@F5504
  5742  15EF  0087               	movwf	7
  5743  15F0  30B7               	movlw	low USART_WriteValue@buf
  5744  15F1  0084               	movwf	4
  5745  15F2  3000               	movlw	high USART_WriteValue@buf
  5746  15F3  0085               	movwf	5
  5747  15F4  300F               	movlw	15
  5748  15F5  0020               	movlb	0	; select bank0
  5749  15F6  00E9               	movwf	??_USART_WriteValue
  5750  15F7                     u3480:	
  5751  15F7  0016               	moviw fsr1++
  5752  15F8  001A               	movwi fsr0++
  5753  15F9  0BE9               	decfsz	??_USART_WriteValue,f
  5754  15FA  2DF7               	goto	u3480
  5755                           
  5756                           ;main.c: 183: sprintf (buf, "%f", _data);
  5757  15FB  30A2               	movlw	low (STR_1| (0+32768))
  5758  15FC  00DB               	movwf	sprintf@f
  5759  15FD  3090               	movlw	high (STR_1| (0+32768))
  5760  15FE  00DC               	movwf	sprintf@f+1
  5761  15FF  0866               	movf	USART_WriteValue@_data,w
  5762  1600  00DD               	movwf	?_sprintf+2
  5763  1601  0867               	movf	USART_WriteValue@_data+1,w
  5764  1602  00DE               	movwf	?_sprintf+3
  5765  1603  0868               	movf	USART_WriteValue@_data+2,w
  5766  1604  00DF               	movwf	?_sprintf+4
  5767  1605  30B7               	movlw	(low (USART_WriteValue@buf| 0))& (0+255)
  5768  1606  3180  2038  3195   	fcall	_sprintf
  5769                           
  5770                           ;main.c: 184: USART_WriteString(buf);
  5771  1609  30B7               	movlw	low USART_WriteValue@buf
  5772  160A  00F2               	movwf	USART_WriteString@_data
  5773  160B  3000               	movlw	high USART_WriteValue@buf
  5774  160C  00F3               	movwf	USART_WriteString@_data+1
  5775  160D  3196  2610         	fcall	_USART_WriteString
  5776  160F  0008               	return
  5777  1610                     __end_of_USART_WriteValue:	
  5778                           
  5779                           	psect	text5
  5780  0038                     __ptext5:	
  5781 ;; *************** function _sprintf *****************
  5782 ;; Defined at:
  5783 ;;		line 492 in file "C:\Program Files\Microchip\xc8\v1.38\sources\common\doprnt.c"
  5784 ;; Parameters:    Size  Location     Type
  5785 ;;  sp              1    wreg     PTR unsigned char 
  5786 ;;		 -> USART_WriteValue@buf(15), 
  5787 ;;  f               2   59[BANK0 ] PTR const unsigned char 
  5788 ;;		 -> STR_1(3), 
  5789 ;; Auto vars:     Size  Location     Type
  5790 ;;  sp              1   18[BANK1 ] PTR unsigned char 
  5791 ;;		 -> USART_WriteValue@buf(15), 
  5792 ;;  tmpval          4   14[BANK1 ] struct .
  5793 ;;  val             4    8[BANK1 ] unsigned long 
  5794 ;;  fval            3   19[BANK1 ] unsigned long 
  5795 ;;  exp             2   12[BANK1 ] int 
  5796 ;;  prec            2    6[BANK1 ] int 
  5797 ;;  flag            2    4[BANK1 ] unsigned short 
  5798 ;;  cp              2    0        PTR const unsigned char 
  5799 ;;  len             2    0        unsigned int 
  5800 ;;  width           2    0        int 
  5801 ;;  c               1   22[BANK1 ] char 
  5802 ;;  ap              1    3[BANK1 ] PTR void [1]
  5803 ;;		 -> ?_sprintf(2), 
  5804 ;;  d               1    0        unsigned char 
  5805 ;; Return value:  Size  Location     Type
  5806 ;;                  2   59[BANK0 ] int 
  5807 ;; Registers used:
  5808 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5809 ;; Tracked objects:
  5810 ;;		On entry : 0/0
  5811 ;;		On exit  : 0/0
  5812 ;;		Unchanged: 0/0
  5813 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5814 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5815 ;;      Locals:         0       0      23       0       0       0       0       0       0       0       0       0       
      +0       0
  5816 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5817 ;;      Totals:         0      11      23       0       0       0       0       0       0       0       0       0       
      +0       0
  5818 ;;Total ram usage:       34 bytes
  5819 ;; Hardware stack levels used:    1
  5820 ;; Hardware stack levels required when called:    4
  5821 ;; This function calls:
  5822 ;;		___awdiv
  5823 ;;		___ftadd
  5824 ;;		___ftge
  5825 ;;		___ftmul
  5826 ;;		___ftneg
  5827 ;;		___ftsub
  5828 ;;		___fttol
  5829 ;;		___lldiv
  5830 ;;		___llmod
  5831 ;;		___lltoft
  5832 ;;		___wmul
  5833 ;;		__div_to_l_
  5834 ;;		__tdiv_to_l_
  5835 ;;		_fround
  5836 ;;		_scale
  5837 ;; This function is called by:
  5838 ;;		_USART_WriteValue
  5839 ;; This function uses a non-reentrant model
  5840 ;;
  5841                           
  5842                           
  5843                           ;psect for function _sprintf
  5844  0038                     _sprintf:	
  5845                           
  5846                           ;incstack = 0
  5847                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5848                           ;sprintf@sp stored from wreg
  5849  0038  0021               	movlb	1	; select bank1
  5850  0039  00B2               	movwf	sprintf@sp^(0+128)
  5851                           
  5852                           ;doprnt.c: 494: va_list ap;
  5853                           ;doprnt.c: 499: signed char c;
  5854                           ;doprnt.c: 501: int width;
  5855                           ;doprnt.c: 504: int prec;
  5856                           ;doprnt.c: 508: unsigned short flag;
  5857                           ;doprnt.c: 515: char d;
  5858                           ;doprnt.c: 516: double fval;
  5859                           ;doprnt.c: 517: int exp;
  5860                           ;doprnt.c: 523: union {
  5861                           ;doprnt.c: 524: unsigned long vd;
  5862                           ;doprnt.c: 525: double integ;
  5863                           ;doprnt.c: 526: } tmpval;
  5864                           ;doprnt.c: 528: unsigned long val;
  5865                           ;doprnt.c: 529: unsigned len;
  5866                           ;doprnt.c: 530: const char * cp;
  5867                           ;doprnt.c: 533: *ap = __va_start();
  5868  003A  305D               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  5869  003B  0020               	movlb	0	; select bank0
  5870  003C  00E0               	movwf	??_sprintf
  5871  003D  0860               	movf	??_sprintf,w
  5872  003E  0021               	movlb	1	; select bank1
  5873  003F  00A3               	movwf	sprintf@ap^(0+128)
  5874  0040                     l3055:	
  5875                           ;doprnt.c: 536: while(c = *f++) {
  5876                           
  5877  0040  0020               	movlb	0	; select bank0
  5878  0041  085C               	movf	sprintf@f+1,w
  5879  0042  00E1               	movwf	??_sprintf+1
  5880  0043  085B               	movf	sprintf@f,w
  5881  0044  00E0               	movwf	??_sprintf
  5882  0045  0ADB               	incf	sprintf@f,f
  5883  0046  1903               	skipnz
  5884  0047  0ADC               	incf	sprintf@f+1,f
  5885  0048  0860               	movf	??_sprintf,w
  5886  0049  0084               	movwf	4
  5887  004A  0861               	movf	??_sprintf+1,w
  5888  004B  0085               	movwf	5
  5889  004C  0800               	movf	0,w	;code access
  5890  004D  00E2               	movwf	??_sprintf+2
  5891  004E  0862               	movf	??_sprintf+2,w
  5892  004F  0021               	movlb	1	; select bank1
  5893  0050  00B6               	movwf	sprintf@c^(0+128)
  5894  0051  0836               	movf	sprintf@c^(0+128),w
  5895  0052  1903               	btfsc	3,2
  5896  0053  2C85               	goto	l3057
  5897                           
  5898                           ;doprnt.c: 538: if(c != '%')
  5899  0054  3025               	movlw	37
  5900  0055  0636               	xorwf	sprintf@c^(0+128),w
  5901  0056  1903               	btfsc	3,2
  5902  0057  285B               	goto	l2901
  5903                           
  5904                           ;doprnt.c: 540: {
  5905                           ;doprnt.c: 541: ((*sp++ = (c)));
  5906  0058  0836               	movf	sprintf@c^(0+128),w
  5907  0059  0020               	movlb	0	; select bank0
  5908  005A  2C77               	goto	L5
  5909  005B                     l2901:	
  5910                           ;doprnt.c: 542: continue;
  5911                           
  5912                           
  5913                           ;doprnt.c: 543: }
  5914                           ;doprnt.c: 548: flag = 0;
  5915  005B  01A4               	clrf	sprintf@flag^(0+128)
  5916  005C  01A5               	clrf	(sprintf@flag+1)^(0+128)
  5917                           
  5918                           ;doprnt.c: 635: switch(c = *f++) {
  5919  005D  2860               	goto	l2905
  5920  005E                     l607:	
  5921                           ;doprnt.c: 662: case 'f':
  5922                           
  5923                           ;doprnt.c: 638: goto alldone;
  5924                           
  5925                           ;doprnt.c: 637: case 0:
  5926                           
  5927                           
  5928                           ;doprnt.c: 663: flag |= 0x400;
  5929  005E  1525               	bsf	(sprintf@flag^(0+128)+1),2
  5930                           
  5931                           ;doprnt.c: 664: break;
  5932  005F  2876               	goto	l2907
  5933  0060                     l2905:	
  5934                           ;doprnt.c: 822: }
  5935                           
  5936                           ;doprnt.c: 813: continue;
  5937                           
  5938                           ;doprnt.c: 802: default:
  5939                           
  5940  0060  0020               	movlb	0	; select bank0
  5941  0061  085C               	movf	sprintf@f+1,w
  5942  0062  00E1               	movwf	??_sprintf+1
  5943  0063  085B               	movf	sprintf@f,w
  5944  0064  00E0               	movwf	??_sprintf
  5945  0065  0ADB               	incf	sprintf@f,f
  5946  0066  1903               	skipnz
  5947  0067  0ADC               	incf	sprintf@f+1,f
  5948  0068  0860               	movf	??_sprintf,w
  5949  0069  0084               	movwf	4
  5950  006A  0861               	movf	??_sprintf+1,w
  5951  006B  0085               	movwf	5
  5952  006C  0800               	movf	0,w	;code access
  5953  006D  0021               	movlb	1	; select bank1
  5954  006E  00B6               	movwf	sprintf@c^(0+128)
  5955                           
  5956                           ; Switch size 1, requested type "space"
  5957                           ; Number of cases is 2, Range of values is 0 to 102
  5958                           ; switch strategies available:
  5959                           ; Name         Instructions Cycles
  5960                           ; simple_byte            7     4 (average)
  5961                           ; direct_byte          212     6 (fixed)
  5962                           ; jumptable            260     6 (fixed)
  5963                           ;	Chosen strategy is simple_byte
  5964  006F  3A00               	xorlw	0	; case 0
  5965  0070  1903               	skipnz
  5966  0071  2C85               	goto	l3057
  5967  0072  3A66               	xorlw	102	; case 102
  5968  0073  1903               	skipnz
  5969  0074  285E               	goto	l607
  5970  0075  2840               	goto	l3055
  5971  0076                     l2907:	
  5972                           
  5973                           ;doprnt.c: 825: if(flag & (0x700)) {
  5974  0076  3000               	movlw	0
  5975  0077  0524               	andwf	sprintf@flag^(0+128),w
  5976  0078  0020               	movlb	0	; select bank0
  5977  0079  00E0               	movwf	??_sprintf
  5978  007A  3007               	movlw	7
  5979  007B  0021               	movlb	1	; select bank1
  5980  007C  0525               	andwf	(sprintf@flag+1)^(0+128),w
  5981  007D  0020               	movlb	0	; select bank0
  5982  007E  00E1               	movwf	??_sprintf+1
  5983  007F  0860               	movf	??_sprintf,w
  5984  0080  0461               	iorwf	??_sprintf+1,w
  5985  0081  1903               	btfsc	3,2
  5986  0082  2C68               	goto	l3049
  5987                           
  5988                           ;doprnt.c: 829: prec = 6;
  5989  0083  3006               	movlw	6
  5990  0084  0021               	movlb	1	; select bank1
  5991  0085  00A6               	movwf	sprintf@prec^(0+128)
  5992  0086  3000               	movlw	0
  5993  0087  00A7               	movwf	(sprintf@prec^(0+128)+1)
  5994                           
  5995                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  5996  0088  0823               	movf	sprintf@ap^(0+128),w
  5997  0089  0086               	movwf	6
  5998  008A  0187               	clrf	7
  5999  008B  3F40               	moviw [0]fsr1
  6000  008C  00B3               	movwf	sprintf@fval^(0+128)
  6001  008D  3F41               	moviw [1]fsr1
  6002  008E  00B4               	movwf	(sprintf@fval+1)^(0+128)
  6003  008F  3F42               	moviw [2]fsr1
  6004  0090  00B5               	movwf	(sprintf@fval+2)^(0+128)
  6005  0091  3003               	movlw	3
  6006  0092  0020               	movlb	0	; select bank0
  6007  0093  00E0               	movwf	??_sprintf
  6008  0094  0860               	movf	??_sprintf,w
  6009  0095  0021               	movlb	1	; select bank1
  6010  0096  07A3               	addwf	sprintf@ap^(0+128),f
  6011                           
  6012                           ;doprnt.c: 831: if(fval < 0.0) {
  6013  0097  0833               	movf	sprintf@fval^(0+128),w
  6014  0098  00F1               	movwf	___ftge@ff1
  6015  0099  0834               	movf	(sprintf@fval+1)^(0+128),w
  6016  009A  00F2               	movwf	___ftge@ff1+1
  6017  009B  0835               	movf	(sprintf@fval+2)^(0+128),w
  6018  009C  00F3               	movwf	___ftge@ff1+2
  6019  009D  3000               	movlw	0
  6020  009E  00F4               	movwf	___ftge@ff2
  6021  009F  3000               	movlw	0
  6022  00A0  00F5               	movwf	___ftge@ff2+1
  6023  00A1  3000               	movlw	0
  6024  00A2  00F6               	movwf	___ftge@ff2+2
  6025  00A3  3196  2635  3180   	fcall	___ftge
  6026  00A6  1803               	btfsc	3,0
  6027  00A7  28BD               	goto	l2921
  6028                           
  6029                           ;doprnt.c: 832: fval = -fval;
  6030  00A8  0021               	movlb	1	; select bank1
  6031  00A9  0833               	movf	sprintf@fval^(0+128),w
  6032  00AA  00F1               	movwf	___ftneg@f1
  6033  00AB  0834               	movf	(sprintf@fval+1)^(0+128),w
  6034  00AC  00F2               	movwf	___ftneg@f1+1
  6035  00AD  0835               	movf	(sprintf@fval+2)^(0+128),w
  6036  00AE  00F3               	movwf	___ftneg@f1+2
  6037  00AF  3188  2000  3180   	fcall	___ftneg
  6038  00B2  0871               	movf	?___ftneg,w
  6039  00B3  0021               	movlb	1	; select bank1
  6040  00B4  00B3               	movwf	sprintf@fval^(0+128)
  6041  00B5  0872               	movf	?___ftneg+1,w
  6042  00B6  00B4               	movwf	(sprintf@fval+1)^(0+128)
  6043  00B7  0873               	movf	?___ftneg+2,w
  6044  00B8  00B5               	movwf	(sprintf@fval+2)^(0+128)
  6045                           
  6046                           ;doprnt.c: 833: flag |= 0x03;
  6047  00B9  3003               	movlw	3
  6048  00BA  04A4               	iorwf	sprintf@flag^(0+128),f
  6049  00BB  3000               	movlw	0
  6050  00BC  04A5               	iorwf	(sprintf@flag+1)^(0+128),f
  6051  00BD                     l2921:	
  6052                           
  6053                           ;doprnt.c: 834: }
  6054                           ;doprnt.c: 835: exp = 0;
  6055  00BD  0021               	movlb	1	; select bank1
  6056  00BE  01AC               	clrf	sprintf@exp^(0+128)
  6057  00BF  01AD               	clrf	(sprintf@exp+1)^(0+128)
  6058                           
  6059                           ;doprnt.c: 836: if( fval!=0) {
  6060  00C0  0835               	movf	(sprintf@fval+2)^(0+128),w
  6061  00C1  0434               	iorwf	(sprintf@fval+1)^(0+128),w
  6062  00C2  0433               	iorwf	sprintf@fval^(0+128),w
  6063  00C3  1903               	skipnz
  6064  00C4  297D               	goto	l612
  6065                           
  6066                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  6067  00C5  30B3               	movlw	low (sprintf@fval| 0)
  6068  00C6  0086               	movwf	6
  6069  00C7  0187               	clrf	7
  6070  00C8  3F40               	moviw [0]fsr1
  6071  00C9  0020               	movlb	0	; select bank0
  6072  00CA  00E0               	movwf	??_sprintf
  6073  00CB  3F41               	moviw [1]fsr1
  6074  00CC  00E1               	movwf	??_sprintf+1
  6075  00CD  3F42               	moviw [2]fsr1
  6076  00CE  00E2               	movwf	??_sprintf+2
  6077  00CF  3F43               	moviw [3]fsr1
  6078  00D0  00E3               	movwf	??_sprintf+3
  6079  00D1  300F               	movlw	15
  6080  00D2                     u3255:	
  6081  00D2  36E3               	lsrf	??_sprintf+3,f
  6082  00D3  0CE2               	rrf	??_sprintf+2,f
  6083  00D4  0CE1               	rrf	??_sprintf+1,f
  6084  00D5  0CE0               	rrf	??_sprintf,f
  6085  00D6  0B89               	decfsz	9,f
  6086  00D7  28D2               	goto	u3255
  6087  00D8  30FF               	movlw	255
  6088  00D9  0560               	andwf	??_sprintf,w
  6089  00DA  00E4               	movwf	??_sprintf+4
  6090  00DB  3000               	movlw	0
  6091  00DC  0561               	andwf	??_sprintf+1,w
  6092  00DD  00E5               	movwf	??_sprintf+5
  6093  00DE  0864               	movf	??_sprintf+4,w
  6094  00DF  3E82               	addlw	130
  6095  00E0  0021               	movlb	1	; select bank1
  6096  00E1  00AC               	movwf	sprintf@exp^(0+128)
  6097  00E2  30FF               	movlw	255
  6098  00E3  0020               	movlb	0	; select bank0
  6099  00E4  3D65               	addwfc	??_sprintf+5,w
  6100  00E5  0021               	movlb	1	; select bank1
  6101  00E6  00AD               	movwf	(sprintf@exp+1)^(0+128)
  6102                           
  6103                           ;doprnt.c: 838: exp--;
  6104  00E7  30FF               	movlw	255
  6105  00E8  07AC               	addwf	sprintf@exp^(0+128),f
  6106  00E9  30FF               	movlw	255
  6107  00EA  3DAD               	addwfc	(sprintf@exp+1)^(0+128),f
  6108                           
  6109                           ;doprnt.c: 839: exp *= 3;
  6110  00EB  3003               	movlw	3
  6111  00EC  0020               	movlb	0	; select bank0
  6112  00ED  00A4               	movwf	___wmul@multiplier
  6113  00EE  3000               	movlw	0
  6114  00EF  00A5               	movwf	___wmul@multiplier+1
  6115  00F0  0021               	movlb	1	; select bank1
  6116  00F1  082D               	movf	(sprintf@exp+1)^(0+128),w
  6117  00F2  0020               	movlb	0	; select bank0
  6118  00F3  00A7               	movwf	___wmul@multiplicand+1
  6119  00F4  0021               	movlb	1	; select bank1
  6120  00F5  082C               	movf	sprintf@exp^(0+128),w
  6121  00F6  0020               	movlb	0	; select bank0
  6122  00F7  00A6               	movwf	___wmul@multiplicand
  6123  00F8  3195  2592  3180   	fcall	___wmul
  6124  00FB  0020               	movlb	0	; select bank0
  6125  00FC  0825               	movf	?___wmul+1,w
  6126  00FD  0021               	movlb	1	; select bank1
  6127  00FE  00AD               	movwf	(sprintf@exp+1)^(0+128)
  6128  00FF  0020               	movlb	0	; select bank0
  6129  0100  0824               	movf	?___wmul,w
  6130  0101  0021               	movlb	1	; select bank1
  6131  0102  00AC               	movwf	sprintf@exp^(0+128)
  6132                           
  6133                           ;doprnt.c: 840: exp /= 10;
  6134  0103  300A               	movlw	10
  6135  0104  00F8               	movwf	___awdiv@divisor
  6136  0105  3000               	movlw	0
  6137  0106  00F9               	movwf	___awdiv@divisor+1
  6138  0107  082D               	movf	(sprintf@exp+1)^(0+128),w
  6139  0108  00FB               	movwf	___awdiv@dividend+1
  6140  0109  082C               	movf	sprintf@exp^(0+128),w
  6141  010A  00FA               	movwf	___awdiv@dividend
  6142  010B  3196  26F7  3180   	fcall	___awdiv
  6143  010E  0879               	movf	?___awdiv+1,w
  6144  010F  0021               	movlb	1	; select bank1
  6145  0110  00AD               	movwf	(sprintf@exp+1)^(0+128)
  6146  0111  0878               	movf	?___awdiv,w
  6147  0112  00AC               	movwf	sprintf@exp^(0+128)
  6148                           
  6149                           ;doprnt.c: 841: if(exp < 0)
  6150  0113  1FAD               	btfss	(sprintf@exp+1)^(0+128),7
  6151  0114  2919               	goto	l2937
  6152                           
  6153                           ;doprnt.c: 842: exp--;
  6154  0115  30FF               	movlw	255
  6155  0116  07AC               	addwf	sprintf@exp^(0+128),f
  6156  0117  30FF               	movlw	255
  6157  0118  3DAD               	addwfc	(sprintf@exp+1)^(0+128),f
  6158  0119                     l2937:	
  6159                           
  6160                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  6161  0119  032C               	decf	sprintf@exp^(0+128),w
  6162  011A  3AFF               	xorlw	255
  6163  011B  318D  25BC  3180   	fcall	_scale
  6164  011E  0020               	movlb	0	; select bank0
  6165  011F  083A               	movf	?_scale,w
  6166  0120  0021               	movlb	1	; select bank1
  6167  0121  00AE               	movwf	sprintf@tmpval^(0+128)
  6168  0122  0020               	movlb	0	; select bank0
  6169  0123  083B               	movf	?_scale+1,w
  6170  0124  0021               	movlb	1	; select bank1
  6171  0125  00AF               	movwf	(sprintf@tmpval+1)^(0+128)
  6172  0126  0020               	movlb	0	; select bank0
  6173  0127  083C               	movf	?_scale+2,w
  6174  0128  0021               	movlb	1	; select bank1
  6175  0129  00B0               	movwf	(sprintf@tmpval+2)^(0+128)
  6176                           
  6177                           ;doprnt.c: 847: tmpval.integ *= fval;
  6178  012A  0833               	movf	sprintf@fval^(0+128),w
  6179  012B  0020               	movlb	0	; select bank0
  6180  012C  00AA               	movwf	___ftmul@f1
  6181  012D  0021               	movlb	1	; select bank1
  6182  012E  0834               	movf	(sprintf@fval+1)^(0+128),w
  6183  012F  0020               	movlb	0	; select bank0
  6184  0130  00AB               	movwf	___ftmul@f1+1
  6185  0131  0021               	movlb	1	; select bank1
  6186  0132  0835               	movf	(sprintf@fval+2)^(0+128),w
  6187  0133  0020               	movlb	0	; select bank0
  6188  0134  00AC               	movwf	___ftmul@f1+2
  6189  0135  0021               	movlb	1	; select bank1
  6190  0136  082E               	movf	sprintf@tmpval^(0+128),w
  6191  0137  0020               	movlb	0	; select bank0
  6192  0138  00AD               	movwf	___ftmul@f2
  6193  0139  0021               	movlb	1	; select bank1
  6194  013A  082F               	movf	(sprintf@tmpval+1)^(0+128),w
  6195  013B  0020               	movlb	0	; select bank0
  6196  013C  00AE               	movwf	___ftmul@f2+1
  6197  013D  0021               	movlb	1	; select bank1
  6198  013E  0830               	movf	(sprintf@tmpval+2)^(0+128),w
  6199  013F  0020               	movlb	0	; select bank0
  6200  0140  00AF               	movwf	___ftmul@f2+2
  6201  0141  3188  20DA  3180   	fcall	___ftmul
  6202  0144  0020               	movlb	0	; select bank0
  6203  0145  082A               	movf	?___ftmul,w
  6204  0146  0021               	movlb	1	; select bank1
  6205  0147  00AE               	movwf	sprintf@tmpval^(0+128)
  6206  0148  0020               	movlb	0	; select bank0
  6207  0149  082B               	movf	?___ftmul+1,w
  6208  014A  0021               	movlb	1	; select bank1
  6209  014B  00AF               	movwf	(sprintf@tmpval+1)^(0+128)
  6210  014C  0020               	movlb	0	; select bank0
  6211  014D  082C               	movf	?___ftmul+2,w
  6212  014E  0021               	movlb	1	; select bank1
  6213  014F  00B0               	movwf	(sprintf@tmpval+2)^(0+128)
  6214                           
  6215                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  6216  0150  082E               	movf	sprintf@tmpval^(0+128),w
  6217  0151  00F1               	movwf	___ftge@ff1
  6218  0152  082F               	movf	(sprintf@tmpval+1)^(0+128),w
  6219  0153  00F2               	movwf	___ftge@ff1+1
  6220  0154  0830               	movf	(sprintf@tmpval+2)^(0+128),w
  6221  0155  00F3               	movwf	___ftge@ff1+2
  6222  0156  3000               	movlw	0
  6223  0157  00F4               	movwf	___ftge@ff2
  6224  0158  3080               	movlw	128
  6225  0159  00F5               	movwf	___ftge@ff2+1
  6226  015A  303F               	movlw	63
  6227  015B  00F6               	movwf	___ftge@ff2+2
  6228  015C  3196  2635  3180   	fcall	___ftge
  6229  015F  1803               	btfsc	3,0
  6230  0160  2966               	goto	l2945
  6231                           
  6232                           ;doprnt.c: 849: exp--;
  6233  0161  30FF               	movlw	255
  6234  0162  0021               	movlb	1	; select bank1
  6235  0163  07AC               	addwf	sprintf@exp^(0+128),f
  6236  0164  30FF               	movlw	255
  6237  0165  297C               	goto	L1
  6238  0166                     l2945:	
  6239                           
  6240                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  6241  0166  0021               	movlb	1	; select bank1
  6242  0167  082E               	movf	sprintf@tmpval^(0+128),w
  6243  0168  00F1               	movwf	___ftge@ff1
  6244  0169  082F               	movf	(sprintf@tmpval+1)^(0+128),w
  6245  016A  00F2               	movwf	___ftge@ff1+1
  6246  016B  0830               	movf	(sprintf@tmpval+2)^(0+128),w
  6247  016C  00F3               	movwf	___ftge@ff1+2
  6248  016D  3000               	movlw	0
  6249  016E  00F4               	movwf	___ftge@ff2
  6250  016F  3020               	movlw	32
  6251  0170  00F5               	movwf	___ftge@ff2+1
  6252  0171  3041               	movlw	65
  6253  0172  00F6               	movwf	___ftge@ff2+2
  6254  0173  3196  2635  3180   	fcall	___ftge
  6255  0176  1C03               	btfss	3,0
  6256  0177  297D               	goto	l612
  6257                           
  6258                           ;doprnt.c: 851: exp++;
  6259  0178  3001               	movlw	1
  6260  0179  0021               	movlb	1	; select bank1
  6261  017A  07AC               	addwf	sprintf@exp^(0+128),f
  6262  017B  3000               	movlw	0
  6263  017C                     L1:	
  6264  017C  3DAD               	addwfc	(sprintf@exp+1)^(0+128),f
  6265  017D                     l612:	
  6266                           
  6267                           ;doprnt.c: 852: }
  6268                           ;doprnt.c: 1112: if(prec <= 12)
  6269  017D  0021               	movlb	1	; select bank1
  6270  017E  0827               	movf	(sprintf@prec+1)^(0+128),w
  6271  017F  3A80               	xorlw	128
  6272  0180  0020               	movlb	0	; select bank0
  6273  0181  00E0               	movwf	??_sprintf
  6274  0182  3080               	movlw	128
  6275  0183  0260               	subwf	??_sprintf,w
  6276  0184  1D03               	skipz
  6277  0185  2989               	goto	u3295
  6278  0186  300D               	movlw	13
  6279  0187  0021               	movlb	1	; select bank1
  6280  0188  0226               	subwf	sprintf@prec^(0+128),w
  6281  0189                     u3295:	
  6282  0189  1803               	skipnc
  6283  018A  29B2               	goto	l2951
  6284                           
  6285                           ;doprnt.c: 1113: fval += fround(prec);
  6286  018B  0021               	movlb	1	; select bank1
  6287  018C  0826               	movf	sprintf@prec^(0+128),w
  6288  018D  318C  2457  3180   	fcall	_fround
  6289  0190  0020               	movlb	0	; select bank0
  6290  0191  083A               	movf	?_fround,w
  6291  0192  00C8               	movwf	___ftadd@f1
  6292  0193  083B               	movf	?_fround+1,w
  6293  0194  00C9               	movwf	___ftadd@f1+1
  6294  0195  083C               	movf	?_fround+2,w
  6295  0196  00CA               	movwf	___ftadd@f1+2
  6296  0197  0021               	movlb	1	; select bank1
  6297  0198  0833               	movf	sprintf@fval^(0+128),w
  6298  0199  0020               	movlb	0	; select bank0
  6299  019A  00CB               	movwf	___ftadd@f2
  6300  019B  0021               	movlb	1	; select bank1
  6301  019C  0834               	movf	(sprintf@fval+1)^(0+128),w
  6302  019D  0020               	movlb	0	; select bank0
  6303  019E  00CC               	movwf	___ftadd@f2+1
  6304  019F  0021               	movlb	1	; select bank1
  6305  01A0  0835               	movf	(sprintf@fval+2)^(0+128),w
  6306  01A1  0020               	movlb	0	; select bank0
  6307  01A2  00CD               	movwf	___ftadd@f2+2
  6308  01A3  318A  2244  3180   	fcall	___ftadd
  6309  01A6  0020               	movlb	0	; select bank0
  6310  01A7  0848               	movf	?___ftadd,w
  6311  01A8  0021               	movlb	1	; select bank1
  6312  01A9  00B3               	movwf	sprintf@fval^(0+128)
  6313  01AA  0020               	movlb	0	; select bank0
  6314  01AB  0849               	movf	?___ftadd+1,w
  6315  01AC  0021               	movlb	1	; select bank1
  6316  01AD  00B4               	movwf	(sprintf@fval+1)^(0+128)
  6317  01AE  0020               	movlb	0	; select bank0
  6318  01AF  084A               	movf	?___ftadd+2,w
  6319  01B0  0021               	movlb	1	; select bank1
  6320  01B1  00B5               	movwf	(sprintf@fval+2)^(0+128)
  6321  01B2                     l2951:	
  6322                           
  6323                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  6324  01B2  0021               	movlb	1	; select bank1
  6325  01B3  082D               	movf	(sprintf@exp+1)^(0+128),w
  6326  01B4  3A80               	xorlw	128
  6327  01B5  0020               	movlb	0	; select bank0
  6328  01B6  00E0               	movwf	??_sprintf
  6329  01B7  3080               	movlw	128
  6330  01B8  0260               	subwf	??_sprintf,w
  6331  01B9  1D03               	skipz
  6332  01BA  29BE               	goto	u3305
  6333  01BB  300A               	movlw	10
  6334  01BC  0021               	movlb	1	; select bank1
  6335  01BD  022C               	subwf	sprintf@exp^(0+128),w
  6336  01BE                     u3305:	
  6337  01BE  1803               	skipnc
  6338  01BF  29E9               	goto	l2959
  6339  01C0  0021               	movlb	1	; select bank1
  6340  01C1  0835               	movf	(sprintf@fval+2)^(0+128),w
  6341  01C2  0434               	iorwf	(sprintf@fval+1)^(0+128),w
  6342  01C3  0433               	iorwf	sprintf@fval^(0+128),w
  6343  01C4  1903               	skipnz
  6344  01C5  2A31               	goto	l2973
  6345  01C6  0833               	movf	sprintf@fval^(0+128),w
  6346  01C7  0020               	movlb	0	; select bank0
  6347  01C8  00C3               	movwf	___fttol@f1
  6348  01C9  0021               	movlb	1	; select bank1
  6349  01CA  0834               	movf	(sprintf@fval+1)^(0+128),w
  6350  01CB  0020               	movlb	0	; select bank0
  6351  01CC  00C4               	movwf	___fttol@f1+1
  6352  01CD  0021               	movlb	1	; select bank1
  6353  01CE  0835               	movf	(sprintf@fval+2)^(0+128),w
  6354  01CF  0020               	movlb	0	; select bank0
  6355  01D0  00C5               	movwf	___fttol@f1+2
  6356  01D1  3187  2768  3180   	fcall	___fttol
  6357  01D4  0020               	movlb	0	; select bank0
  6358  01D5  0846               	movf	?___fttol+3,w
  6359  01D6  0445               	iorwf	?___fttol+2,w
  6360  01D7  0444               	iorwf	?___fttol+1,w
  6361  01D8  0443               	iorwf	?___fttol,w
  6362  01D9  1D03               	skipz
  6363  01DA  2A31               	goto	l2973
  6364  01DB  0021               	movlb	1	; select bank1
  6365  01DC  082D               	movf	(sprintf@exp+1)^(0+128),w
  6366  01DD  3A80               	xorlw	128
  6367  01DE  0020               	movlb	0	; select bank0
  6368  01DF  00E0               	movwf	??_sprintf
  6369  01E0  3080               	movlw	128
  6370  01E1  0260               	subwf	??_sprintf,w
  6371  01E2  1D03               	skipz
  6372  01E3  29E7               	goto	u3335
  6373  01E4  3002               	movlw	2
  6374  01E5  0021               	movlb	1	; select bank1
  6375  01E6  022C               	subwf	sprintf@exp^(0+128),w
  6376  01E7                     u3335:	
  6377  01E7  1C03               	skipc
  6378  01E8  2A31               	goto	l2973
  6379  01E9                     l2959:	
  6380                           
  6381                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  6382  01E9  0021               	movlb	1	; select bank1
  6383  01EA  082E               	movf	sprintf@tmpval^(0+128),w
  6384  01EB  00F1               	movwf	___ftge@ff1
  6385  01EC  082F               	movf	(sprintf@tmpval+1)^(0+128),w
  6386  01ED  00F2               	movwf	___ftge@ff1+1
  6387  01EE  0830               	movf	(sprintf@tmpval+2)^(0+128),w
  6388  01EF  00F3               	movwf	___ftge@ff1+2
  6389  01F0  3070               	movlw	112
  6390  01F1  00F4               	movwf	___ftge@ff2
  6391  01F2  3089               	movlw	137
  6392  01F3  00F5               	movwf	___ftge@ff2+1
  6393  01F4  3040               	movlw	64
  6394  01F5  00F6               	movwf	___ftge@ff2+2
  6395  01F6  3196  2635  3180   	fcall	___ftge
  6396  01F9  1803               	btfsc	3,0
  6397  01FA  29FD               	goto	l2963
  6398                           
  6399                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  6400  01FB  30F7               	movlw	247
  6401  01FC  29FE               	goto	L2
  6402  01FD                     l2963:	
  6403                           ;doprnt.c: 1122: }else{
  6404                           
  6405                           
  6406                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  6407  01FD  30F8               	movlw	248
  6408  01FE                     L2:	
  6409  01FE  0021               	movlb	1	; select bank1
  6410  01FF  07AC               	addwf	sprintf@exp^(0+128),f
  6411  0200  30FF               	movlw	255
  6412  0201  3DAD               	addwfc	(sprintf@exp+1)^(0+128),f
  6413                           
  6414                           ;doprnt.c: 1124: }
  6415                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  6416  0202  082C               	movf	sprintf@exp^(0+128),w
  6417  0203  318D  25BC  3180   	fcall	_scale
  6418  0206  0020               	movlb	0	; select bank0
  6419  0207  083A               	movf	?_scale,w
  6420  0208  0021               	movlb	1	; select bank1
  6421  0209  00AE               	movwf	sprintf@tmpval^(0+128)
  6422  020A  0020               	movlb	0	; select bank0
  6423  020B  083B               	movf	?_scale+1,w
  6424  020C  0021               	movlb	1	; select bank1
  6425  020D  00AF               	movwf	(sprintf@tmpval+1)^(0+128)
  6426  020E  0020               	movlb	0	; select bank0
  6427  020F  083C               	movf	?_scale+2,w
  6428  0210  0021               	movlb	1	; select bank1
  6429  0211  00B0               	movwf	(sprintf@tmpval+2)^(0+128)
  6430                           
  6431                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  6432  0212  0833               	movf	sprintf@fval^(0+128),w
  6433  0213  00F1               	movwf	__tdiv_to_l_@f1
  6434  0214  0834               	movf	(sprintf@fval+1)^(0+128),w
  6435  0215  00F2               	movwf	__tdiv_to_l_@f1+1
  6436  0216  0835               	movf	(sprintf@fval+2)^(0+128),w
  6437  0217  00F3               	movwf	__tdiv_to_l_@f1+2
  6438  0218  082E               	movf	sprintf@tmpval^(0+128),w
  6439  0219  00F4               	movwf	__tdiv_to_l_@f2
  6440  021A  082F               	movf	(sprintf@tmpval+1)^(0+128),w
  6441  021B  00F5               	movwf	__tdiv_to_l_@f2+1
  6442  021C  0830               	movf	(sprintf@tmpval+2)^(0+128),w
  6443  021D  00F6               	movwf	__tdiv_to_l_@f2+2
  6444  021E  3189  218E  3180   	fcall	__tdiv_to_l_
  6445  0221  0874               	movf	?__tdiv_to_l_+3,w
  6446  0222  0021               	movlb	1	; select bank1
  6447  0223  00AB               	movwf	(sprintf@val+3)^(0+128)
  6448  0224  0873               	movf	?__tdiv_to_l_+2,w
  6449  0225  00AA               	movwf	(sprintf@val+2)^(0+128)
  6450  0226  0872               	movf	?__tdiv_to_l_+1,w
  6451  0227  00A9               	movwf	(sprintf@val+1)^(0+128)
  6452  0228  0871               	movf	?__tdiv_to_l_,w
  6453  0229  00A8               	movwf	sprintf@val^(0+128)
  6454                           
  6455                           ;doprnt.c: 1129: fval = 0.0;
  6456  022A  3000               	movlw	0
  6457  022B  00B3               	movwf	sprintf@fval^(0+128)
  6458  022C  3000               	movlw	0
  6459  022D  00B4               	movwf	(sprintf@fval+1)^(0+128)
  6460  022E  3000               	movlw	0
  6461  022F  00B5               	movwf	(sprintf@fval+2)^(0+128)
  6462                           
  6463                           ;doprnt.c: 1130: } else {
  6464  0230  2A7F               	goto	l2977
  6465  0231                     l2973:	
  6466                           
  6467                           ;doprnt.c: 1131: val = (unsigned long)fval;
  6468  0231  0021               	movlb	1	; select bank1
  6469  0232  0833               	movf	sprintf@fval^(0+128),w
  6470  0233  0020               	movlb	0	; select bank0
  6471  0234  00C3               	movwf	___fttol@f1
  6472  0235  0021               	movlb	1	; select bank1
  6473  0236  0834               	movf	(sprintf@fval+1)^(0+128),w
  6474  0237  0020               	movlb	0	; select bank0
  6475  0238  00C4               	movwf	___fttol@f1+1
  6476  0239  0021               	movlb	1	; select bank1
  6477  023A  0835               	movf	(sprintf@fval+2)^(0+128),w
  6478  023B  0020               	movlb	0	; select bank0
  6479  023C  00C5               	movwf	___fttol@f1+2
  6480  023D  3187  2768  3180   	fcall	___fttol
  6481  0240  0020               	movlb	0	; select bank0
  6482  0241  0846               	movf	?___fttol+3,w
  6483  0242  0021               	movlb	1	; select bank1
  6484  0243  00AB               	movwf	(sprintf@val+3)^(0+128)
  6485  0244  0020               	movlb	0	; select bank0
  6486  0245  0845               	movf	?___fttol+2,w
  6487  0246  0021               	movlb	1	; select bank1
  6488  0247  00AA               	movwf	(sprintf@val+2)^(0+128)
  6489  0248  0020               	movlb	0	; select bank0
  6490  0249  0844               	movf	?___fttol+1,w
  6491  024A  0021               	movlb	1	; select bank1
  6492  024B  00A9               	movwf	(sprintf@val+1)^(0+128)
  6493  024C  0020               	movlb	0	; select bank0
  6494  024D  0843               	movf	?___fttol,w
  6495  024E  0021               	movlb	1	; select bank1
  6496  024F  00A8               	movwf	sprintf@val^(0+128)
  6497                           
  6498                           ;doprnt.c: 1132: fval -= (double)val;
  6499  0250  082B               	movf	(sprintf@val+3)^(0+128),w
  6500  0251  00FC               	movwf	___lltoft@c+3
  6501  0252  082A               	movf	(sprintf@val+2)^(0+128),w
  6502  0253  00FB               	movwf	___lltoft@c+2
  6503  0254  0829               	movf	(sprintf@val+1)^(0+128),w
  6504  0255  00FA               	movwf	___lltoft@c+1
  6505  0256  0828               	movf	sprintf@val^(0+128),w
  6506  0257  00F9               	movwf	___lltoft@c
  6507  0258  3188  2008  3180   	fcall	___lltoft
  6508  025B  0879               	movf	?___lltoft,w
  6509  025C  0020               	movlb	0	; select bank0
  6510  025D  00D5               	movwf	___ftsub@f2
  6511  025E  087A               	movf	?___lltoft+1,w
  6512  025F  00D6               	movwf	___ftsub@f2+1
  6513  0260  087B               	movf	?___lltoft+2,w
  6514  0261  00D7               	movwf	___ftsub@f2+2
  6515  0262  0021               	movlb	1	; select bank1
  6516  0263  0833               	movf	sprintf@fval^(0+128),w
  6517  0264  0020               	movlb	0	; select bank0
  6518  0265  00D8               	movwf	___ftsub@f1
  6519  0266  0021               	movlb	1	; select bank1
  6520  0267  0834               	movf	(sprintf@fval+1)^(0+128),w
  6521  0268  0020               	movlb	0	; select bank0
  6522  0269  00D9               	movwf	___ftsub@f1+1
  6523  026A  0021               	movlb	1	; select bank1
  6524  026B  0835               	movf	(sprintf@fval+2)^(0+128),w
  6525  026C  0020               	movlb	0	; select bank0
  6526  026D  00DA               	movwf	___ftsub@f1+2
  6527  026E  3195  25AE  3180   	fcall	___ftsub
  6528  0271  0020               	movlb	0	; select bank0
  6529  0272  0855               	movf	?___ftsub,w
  6530  0273  0021               	movlb	1	; select bank1
  6531  0274  00B3               	movwf	sprintf@fval^(0+128)
  6532  0275  0020               	movlb	0	; select bank0
  6533  0276  0856               	movf	?___ftsub+1,w
  6534  0277  0021               	movlb	1	; select bank1
  6535  0278  00B4               	movwf	(sprintf@fval+1)^(0+128)
  6536  0279  0020               	movlb	0	; select bank0
  6537  027A  0857               	movf	?___ftsub+2,w
  6538  027B  0021               	movlb	1	; select bank1
  6539  027C  00B5               	movwf	(sprintf@fval+2)^(0+128)
  6540                           
  6541                           ;doprnt.c: 1133: exp = 0;
  6542  027D  01AC               	clrf	sprintf@exp^(0+128)
  6543  027E  01AD               	clrf	(sprintf@exp+1)^(0+128)
  6544  027F                     l2977:	
  6545                           
  6546                           ;doprnt.c: 1134: }
  6547                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  6548  027F  01B6               	clrf	sprintf@c^(0+128)
  6549  0280  0AB6               	incf	sprintf@c^(0+128),f
  6550  0281  300A               	movlw	10
  6551  0282  0636               	xorwf	sprintf@c^(0+128),w
  6552  0283  1903               	btfsc	3,2
  6553  0284  2ABC               	goto	l2989
  6554  0285                     l2983:	
  6555                           
  6556                           ;doprnt.c: 1137: if(val < dpowers[c])
  6557  0285  0836               	movf	sprintf@c^(0+128),w
  6558  0286  0020               	movlb	0	; select bank0
  6559  0287  00E0               	movwf	??_sprintf
  6560  0288  01E1               	clrf	??_sprintf+1
  6561  0289  35E0               	lslf	??_sprintf,f
  6562  028A  0DE1               	rlf	??_sprintf+1,f
  6563  028B  35E0               	lslf	??_sprintf,f
  6564  028C  0DE1               	rlf	??_sprintf+1,f
  6565  028D  3000               	movlw	low (_dpowers| (0+32768))
  6566  028E  0760               	addwf	??_sprintf,w
  6567  028F  0084               	movwf	4
  6568  0290  3090               	movlw	high (_dpowers| (0+32768))
  6569  0291  3D61               	addwfc	??_sprintf+1,w
  6570  0292  0085               	movwf	5
  6571  0293  3F00               	moviw [0]fsr0
  6572  0294  00E2               	movwf	??_sprintf+2
  6573  0295  3F01               	moviw [1]fsr0
  6574  0296  00E3               	movwf	??_sprintf+3
  6575  0297  3F02               	moviw [2]fsr0
  6576  0298  00E4               	movwf	??_sprintf+4
  6577  0299  3F03               	moviw [3]fsr0
  6578  029A  00E5               	movwf	??_sprintf+5
  6579  029B  0865               	movf	??_sprintf+5,w
  6580  029C  0021               	movlb	1	; select bank1
  6581  029D  022B               	subwf	(sprintf@val+3)^(0+128),w
  6582  029E  1D03               	skipz
  6583  029F  2AB0               	goto	u3365
  6584  02A0  0020               	movlb	0	; select bank0
  6585  02A1  0864               	movf	??_sprintf+4,w
  6586  02A2  0021               	movlb	1	; select bank1
  6587  02A3  022A               	subwf	(sprintf@val+2)^(0+128),w
  6588  02A4  1D03               	skipz
  6589  02A5  2AB0               	goto	u3365
  6590  02A6  0020               	movlb	0	; select bank0
  6591  02A7  0863               	movf	??_sprintf+3,w
  6592  02A8  0021               	movlb	1	; select bank1
  6593  02A9  0229               	subwf	(sprintf@val+1)^(0+128),w
  6594  02AA  1D03               	skipz
  6595  02AB  2AB0               	goto	u3365
  6596  02AC  0020               	movlb	0	; select bank0
  6597  02AD  0862               	movf	??_sprintf+2,w
  6598  02AE  0021               	movlb	1	; select bank1
  6599  02AF  0228               	subwf	sprintf@val^(0+128),w
  6600  02B0                     u3365:	
  6601  02B0  1C03               	btfss	3,0
  6602  02B1  2ABC               	goto	l2989
  6603                           
  6604                           ;doprnt.c: 1138: break;
  6605  02B2  3001               	movlw	1
  6606  02B3  0020               	movlb	0	; select bank0
  6607  02B4  00E0               	movwf	??_sprintf
  6608  02B5  0860               	movf	??_sprintf,w
  6609  02B6  0021               	movlb	1	; select bank1
  6610  02B7  07B6               	addwf	sprintf@c^(0+128),f
  6611  02B8  300A               	movlw	10
  6612  02B9  0636               	xorwf	sprintf@c^(0+128),w
  6613  02BA  1D03               	btfss	3,2
  6614  02BB  2A85               	goto	l2983
  6615  02BC                     l2989:	
  6616                           
  6617                           ;doprnt.c: 1175: {
  6618                           ;doprnt.c: 1188: if(flag & 0x03)
  6619  02BC  3003               	movlw	3
  6620  02BD  0524               	andwf	sprintf@flag^(0+128),w
  6621  02BE  0020               	movlb	0	; select bank0
  6622  02BF  00E0               	movwf	??_sprintf
  6623  02C0  3000               	movlw	0
  6624  02C1  0021               	movlb	1	; select bank1
  6625  02C2  0525               	andwf	(sprintf@flag+1)^(0+128),w
  6626  02C3  0020               	movlb	0	; select bank0
  6627  02C4  00E1               	movwf	??_sprintf+1
  6628  02C5  0860               	movf	??_sprintf,w
  6629  02C6  0461               	iorwf	??_sprintf+1,w
  6630  02C7  1903               	btfsc	3,2
  6631  02C8  2AD7               	goto	l3003
  6632                           
  6633                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  6634  02C9  302D               	movlw	45
  6635  02CA                     L6:	
  6636  02CA  00E0               	movwf	??_sprintf
  6637  02CB  0021               	movlb	1	; select bank1
  6638  02CC  0832               	movf	sprintf@sp^(0+128),w
  6639  02CD  0086               	movwf	6
  6640  02CE  0187               	clrf	7
  6641  02CF  0020               	movlb	0	; select bank0
  6642  02D0  0860               	movf	??_sprintf,w
  6643  02D1  0081               	movwf	1
  6644  02D2  3001               	movlw	1
  6645  02D3  00E0               	movwf	??_sprintf
  6646  02D4  0860               	movf	??_sprintf,w
  6647  02D5  0021               	movlb	1	; select bank1
  6648  02D6  07B2               	addwf	sprintf@sp^(0+128),f
  6649  02D7                     l3003:	
  6650  02D7  30FF               	movlw	255
  6651  02D8  0020               	movlb	0	; select bank0
  6652  02D9  00E0               	movwf	??_sprintf
  6653  02DA  0860               	movf	??_sprintf,w
  6654  02DB  0021               	movlb	1	; select bank1
  6655  02DC  07B6               	addwf	sprintf@c^(0+128),f
  6656  02DD  0A36               	incf	sprintf@c^(0+128),w
  6657  02DE  1903               	btfsc	3,2
  6658  02DF  2B3E               	goto	l3011
  6659                           
  6660                           ;doprnt.c: 1200: {
  6661                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  6662                           
  6663                           ;doprnt.c: 1195: }
  6664                           ;doprnt.c: 1196: while(c--) {
  6665  02E0  0836               	movf	sprintf@c^(0+128),w
  6666  02E1  0020               	movlb	0	; select bank0
  6667  02E2  00E0               	movwf	??_sprintf
  6668  02E3  01E1               	clrf	??_sprintf+1
  6669  02E4  35E0               	lslf	??_sprintf,f
  6670  02E5  0DE1               	rlf	??_sprintf+1,f
  6671  02E6  35E0               	lslf	??_sprintf,f
  6672  02E7  0DE1               	rlf	??_sprintf+1,f
  6673  02E8  3000               	movlw	low (_dpowers| (0+32768))
  6674  02E9  0760               	addwf	??_sprintf,w
  6675  02EA  0084               	movwf	4
  6676  02EB  3090               	movlw	high (_dpowers| (0+32768))
  6677  02EC  3D61               	addwfc	??_sprintf+1,w
  6678  02ED  0085               	movwf	5
  6679  02EE  3F00               	moviw [0]fsr0
  6680  02EF  00F1               	movwf	___lldiv@divisor
  6681  02F0  3F01               	moviw [1]fsr0
  6682  02F1  00F2               	movwf	___lldiv@divisor+1
  6683  02F2  3F02               	moviw [2]fsr0
  6684  02F3  00F3               	movwf	___lldiv@divisor+2
  6685  02F4  3F03               	moviw [3]fsr0
  6686  02F5  00F4               	movwf	___lldiv@divisor+3
  6687  02F6  0021               	movlb	1	; select bank1
  6688  02F7  082B               	movf	(sprintf@val+3)^(0+128),w
  6689  02F8  00F8               	movwf	___lldiv@dividend+3
  6690  02F9  082A               	movf	(sprintf@val+2)^(0+128),w
  6691  02FA  00F7               	movwf	___lldiv@dividend+2
  6692  02FB  0829               	movf	(sprintf@val+1)^(0+128),w
  6693  02FC  00F6               	movwf	___lldiv@dividend+1
  6694  02FD  0828               	movf	sprintf@val^(0+128),w
  6695  02FE  00F5               	movwf	___lldiv@dividend
  6696  02FF  3197  2749  3180   	fcall	___lldiv
  6697  0302  0874               	movf	?___lldiv+3,w
  6698  0303  0021               	movlb	1	; select bank1
  6699  0304  00B1               	movwf	(sprintf@tmpval+3)^(0+128)
  6700  0305  0873               	movf	?___lldiv+2,w
  6701  0306  00B0               	movwf	(sprintf@tmpval+2)^(0+128)
  6702  0307  0872               	movf	?___lldiv+1,w
  6703  0308  00AF               	movwf	(sprintf@tmpval+1)^(0+128)
  6704  0309  0871               	movf	?___lldiv,w
  6705  030A  00AE               	movwf	sprintf@tmpval^(0+128)
  6706                           
  6707                           ;doprnt.c: 1202: tmpval.vd %= 10;
  6708  030B  3000               	movlw	0
  6709  030C  00F4               	movwf	___llmod@divisor+3
  6710  030D  3000               	movlw	0
  6711  030E  00F3               	movwf	___llmod@divisor+2
  6712  030F  3000               	movlw	0
  6713  0310  00F2               	movwf	___llmod@divisor+1
  6714  0311  300A               	movlw	10
  6715  0312  00F1               	movwf	___llmod@divisor
  6716  0313  0831               	movf	(sprintf@tmpval+3)^(0+128),w
  6717  0314  00F8               	movwf	___llmod@dividend+3
  6718  0315  0830               	movf	(sprintf@tmpval+2)^(0+128),w
  6719  0316  00F7               	movwf	___llmod@dividend+2
  6720  0317  082F               	movf	(sprintf@tmpval+1)^(0+128),w
  6721  0318  00F6               	movwf	___llmod@dividend+1
  6722  0319  082E               	movf	sprintf@tmpval^(0+128),w
  6723  031A  00F5               	movwf	___llmod@dividend
  6724  031B  3196  2670  3180   	fcall	___llmod
  6725  031E  0874               	movf	?___llmod+3,w
  6726  031F  0021               	movlb	1	; select bank1
  6727  0320  00B1               	movwf	(sprintf@tmpval+3)^(0+128)
  6728  0321  0873               	movf	?___llmod+2,w
  6729  0322  00B0               	movwf	(sprintf@tmpval+2)^(0+128)
  6730  0323  0872               	movf	?___llmod+1,w
  6731  0324  00AF               	movwf	(sprintf@tmpval+1)^(0+128)
  6732  0325  0871               	movf	?___llmod,w
  6733  0326  00AE               	movwf	sprintf@tmpval^(0+128)
  6734                           
  6735                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  6736  0327  082E               	movf	sprintf@tmpval^(0+128),w
  6737  0328  3E30               	addlw	48
  6738  0329  0020               	movlb	0	; select bank0
  6739  032A  2ACA               	goto	L6
  6740  032B                     l3005:	
  6741                           ;doprnt.c: 1204: }
  6742                           ;doprnt.c: 1206: }
  6743                           ;doprnt.c: 1207: while(exp > 0) {
  6744                           
  6745                           
  6746                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  6747  032B  3030               	movlw	48
  6748  032C  0020               	movlb	0	; select bank0
  6749  032D  00E0               	movwf	??_sprintf
  6750  032E  0021               	movlb	1	; select bank1
  6751  032F  0832               	movf	sprintf@sp^(0+128),w
  6752  0330  0086               	movwf	6
  6753  0331  0187               	clrf	7
  6754  0332  0020               	movlb	0	; select bank0
  6755  0333  0860               	movf	??_sprintf,w
  6756  0334  0081               	movwf	1
  6757  0335  3001               	movlw	1
  6758  0336  00E0               	movwf	??_sprintf
  6759  0337  0860               	movf	??_sprintf,w
  6760  0338  0021               	movlb	1	; select bank1
  6761  0339  07B2               	addwf	sprintf@sp^(0+128),f
  6762                           
  6763                           ;doprnt.c: 1209: exp--;
  6764  033A  30FF               	movlw	255
  6765  033B  07AC               	addwf	sprintf@exp^(0+128),f
  6766  033C  30FF               	movlw	255
  6767  033D  3DAD               	addwfc	(sprintf@exp+1)^(0+128),f
  6768  033E                     l3011:	
  6769  033E  082D               	movf	(sprintf@exp+1)^(0+128),w
  6770  033F  3A80               	xorlw	128
  6771  0340  0020               	movlb	0	; select bank0
  6772  0341  00E0               	movwf	??_sprintf
  6773  0342  3080               	movlw	128
  6774  0343  0260               	subwf	??_sprintf,w
  6775  0344  1D03               	skipz
  6776  0345  2B49               	goto	u3405
  6777  0346  3001               	movlw	1
  6778  0347  0021               	movlb	1	; select bank1
  6779  0348  022C               	subwf	sprintf@exp^(0+128),w
  6780  0349                     u3405:	
  6781  0349  1803               	skipnc
  6782  034A  2B2B               	goto	l3005
  6783                           
  6784                           ;doprnt.c: 1210: }
  6785                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  6786  034B  0021               	movlb	1	; select bank1
  6787  034C  0827               	movf	(sprintf@prec+1)^(0+128),w
  6788  034D  3A80               	xorlw	128
  6789  034E  0020               	movlb	0	; select bank0
  6790  034F  00E0               	movwf	??_sprintf
  6791  0350  3080               	movlw	128
  6792  0351  0260               	subwf	??_sprintf,w
  6793  0352  1D03               	skipz
  6794  0353  2B57               	goto	u3415
  6795  0354  3009               	movlw	9
  6796  0355  0021               	movlb	1	; select bank1
  6797  0356  0226               	subwf	sprintf@prec^(0+128),w
  6798  0357                     u3415:	
  6799  0357  1C03               	skipc
  6800  0358  2B5B               	goto	l3017
  6801                           
  6802                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  6803  0359  3008               	movlw	8
  6804  035A  2B5D               	goto	L3
  6805  035B                     l3017:	
  6806                           
  6807                           ;doprnt.c: 1213: else
  6808                           ;doprnt.c: 1214: c = prec;
  6809  035B  0021               	movlb	1	; select bank1
  6810  035C  0826               	movf	sprintf@prec^(0+128),w
  6811  035D                     L3:	
  6812  035D  0020               	movlb	0	; select bank0
  6813  035E  00E0               	movwf	??_sprintf
  6814  035F  0860               	movf	??_sprintf,w
  6815  0360  0021               	movlb	1	; select bank1
  6816  0361  00B6               	movwf	sprintf@c^(0+128)
  6817                           
  6818                           ;doprnt.c: 1215: prec -= c;
  6819  0362  0836               	movf	sprintf@c^(0+128),w
  6820  0363  0020               	movlb	0	; select bank0
  6821  0364  00E0               	movwf	??_sprintf
  6822  0365  01E1               	clrf	??_sprintf+1
  6823  0366  1BE0               	btfsc	??_sprintf,7
  6824  0367  03E1               	decf	??_sprintf+1,f
  6825  0368  0860               	movf	??_sprintf,w
  6826  0369  0021               	movlb	1	; select bank1
  6827  036A  02A6               	subwf	sprintf@prec^(0+128),f
  6828  036B  0020               	movlb	0	; select bank0
  6829  036C  0861               	movf	??_sprintf+1,w
  6830  036D  0021               	movlb	1	; select bank1
  6831  036E  3BA7               	subwfb	(sprintf@prec+1)^(0+128),f
  6832                           
  6833                           ;doprnt.c: 1219: if(c)
  6834  036F  0836               	movf	sprintf@c^(0+128),w
  6835  0370  1903               	btfsc	3,2
  6836  0371  2B81               	goto	l3025
  6837                           
  6838                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  6839  0372  302E               	movlw	46
  6840  0373  0020               	movlb	0	; select bank0
  6841  0374  00E0               	movwf	??_sprintf
  6842  0375  0021               	movlb	1	; select bank1
  6843  0376  0832               	movf	sprintf@sp^(0+128),w
  6844  0377  0086               	movwf	6
  6845  0378  0187               	clrf	7
  6846  0379  0020               	movlb	0	; select bank0
  6847  037A  0860               	movf	??_sprintf,w
  6848  037B  0081               	movwf	1
  6849  037C  3001               	movlw	1
  6850  037D  00E0               	movwf	??_sprintf
  6851  037E  0860               	movf	??_sprintf,w
  6852  037F  0021               	movlb	1	; select bank1
  6853  0380  07B2               	addwf	sprintf@sp^(0+128),f
  6854  0381                     l3025:	
  6855                           
  6856                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  6857  0381  0836               	movf	sprintf@c^(0+128),w
  6858  0382  318D  25BC  3180   	fcall	_scale
  6859  0385  0020               	movlb	0	; select bank0
  6860  0386  083A               	movf	?_scale,w
  6861  0387  0021               	movlb	1	; select bank1
  6862  0388  00A0               	movwf	_sprintf$1323^(0+128)
  6863  0389  0020               	movlb	0	; select bank0
  6864  038A  083B               	movf	?_scale+1,w
  6865  038B  0021               	movlb	1	; select bank1
  6866  038C  00A1               	movwf	(_sprintf$1323+1)^(0+128)
  6867  038D  0020               	movlb	0	; select bank0
  6868  038E  083C               	movf	?_scale+2,w
  6869  038F  0021               	movlb	1	; select bank1
  6870  0390  00A2               	movwf	(_sprintf$1323+2)^(0+128)
  6871                           
  6872                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  6873  0391  0820               	movf	_sprintf$1323^(0+128),w
  6874  0392  0020               	movlb	0	; select bank0
  6875  0393  00AD               	movwf	___ftmul@f2
  6876  0394  0021               	movlb	1	; select bank1
  6877  0395  0821               	movf	(_sprintf$1323+1)^(0+128),w
  6878  0396  0020               	movlb	0	; select bank0
  6879  0397  00AE               	movwf	___ftmul@f2+1
  6880  0398  0021               	movlb	1	; select bank1
  6881  0399  0822               	movf	(_sprintf$1323+2)^(0+128),w
  6882  039A  0020               	movlb	0	; select bank0
  6883  039B  00AF               	movwf	___ftmul@f2+2
  6884  039C  0021               	movlb	1	; select bank1
  6885  039D  0833               	movf	sprintf@fval^(0+128),w
  6886  039E  0020               	movlb	0	; select bank0
  6887  039F  00AA               	movwf	___ftmul@f1
  6888  03A0  0021               	movlb	1	; select bank1
  6889  03A1  0834               	movf	(sprintf@fval+1)^(0+128),w
  6890  03A2  0020               	movlb	0	; select bank0
  6891  03A3  00AB               	movwf	___ftmul@f1+1
  6892  03A4  0021               	movlb	1	; select bank1
  6893  03A5  0835               	movf	(sprintf@fval+2)^(0+128),w
  6894  03A6  0020               	movlb	0	; select bank0
  6895  03A7  00AC               	movwf	___ftmul@f1+2
  6896  03A8  3188  20DA  3180   	fcall	___ftmul
  6897  03AB  0020               	movlb	0	; select bank0
  6898  03AC  082A               	movf	?___ftmul,w
  6899  03AD  00C3               	movwf	___fttol@f1
  6900  03AE  082B               	movf	?___ftmul+1,w
  6901  03AF  00C4               	movwf	___fttol@f1+1
  6902  03B0  082C               	movf	?___ftmul+2,w
  6903  03B1  00C5               	movwf	___fttol@f1+2
  6904  03B2  3187  2768  3180   	fcall	___fttol
  6905  03B5  0020               	movlb	0	; select bank0
  6906  03B6  0846               	movf	?___fttol+3,w
  6907  03B7  0021               	movlb	1	; select bank1
  6908  03B8  00AB               	movwf	(sprintf@val+3)^(0+128)
  6909  03B9  0020               	movlb	0	; select bank0
  6910  03BA  0845               	movf	?___fttol+2,w
  6911  03BB  0021               	movlb	1	; select bank1
  6912  03BC  00AA               	movwf	(sprintf@val+2)^(0+128)
  6913  03BD  0020               	movlb	0	; select bank0
  6914  03BE  0844               	movf	?___fttol+1,w
  6915  03BF  0021               	movlb	1	; select bank1
  6916  03C0  00A9               	movwf	(sprintf@val+1)^(0+128)
  6917  03C1  0020               	movlb	0	; select bank0
  6918  03C2  0843               	movf	?___fttol,w
  6919  03C3  0021               	movlb	1	; select bank1
  6920  03C4                     L4:	
  6921  03C4  00A8               	movwf	sprintf@val^(0+128)
  6922  03C5  30FF               	movlw	255
  6923  03C6  0020               	movlb	0	; select bank0
  6924  03C7  00E0               	movwf	??_sprintf
  6925  03C8  0860               	movf	??_sprintf,w
  6926  03C9  0021               	movlb	1	; select bank1
  6927  03CA  07B6               	addwf	sprintf@c^(0+128),f
  6928  03CB  0A36               	incf	sprintf@c^(0+128),w
  6929  03CC  1903               	btfsc	3,2
  6930  03CD  2C63               	goto	l3047
  6931                           
  6932                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  6933                           
  6934                           ;doprnt.c: 1228: while(c--) {
  6935  03CE  0836               	movf	sprintf@c^(0+128),w
  6936  03CF  0020               	movlb	0	; select bank0
  6937  03D0  00E0               	movwf	??_sprintf
  6938  03D1  01E1               	clrf	??_sprintf+1
  6939  03D2  35E0               	lslf	??_sprintf,f
  6940  03D3  0DE1               	rlf	??_sprintf+1,f
  6941  03D4  35E0               	lslf	??_sprintf,f
  6942  03D5  0DE1               	rlf	??_sprintf+1,f
  6943  03D6  3000               	movlw	low (_dpowers| (0+32768))
  6944  03D7  0760               	addwf	??_sprintf,w
  6945  03D8  0084               	movwf	4
  6946  03D9  3090               	movlw	high (_dpowers| (0+32768))
  6947  03DA  3D61               	addwfc	??_sprintf+1,w
  6948  03DB  0085               	movwf	5
  6949  03DC  3F00               	moviw [0]fsr0
  6950  03DD  00F1               	movwf	___lldiv@divisor
  6951  03DE  3F01               	moviw [1]fsr0
  6952  03DF  00F2               	movwf	___lldiv@divisor+1
  6953  03E0  3F02               	moviw [2]fsr0
  6954  03E1  00F3               	movwf	___lldiv@divisor+2
  6955  03E2  3F03               	moviw [3]fsr0
  6956  03E3  00F4               	movwf	___lldiv@divisor+3
  6957  03E4  0021               	movlb	1	; select bank1
  6958  03E5  082B               	movf	(sprintf@val+3)^(0+128),w
  6959  03E6  00F8               	movwf	___lldiv@dividend+3
  6960  03E7  082A               	movf	(sprintf@val+2)^(0+128),w
  6961  03E8  00F7               	movwf	___lldiv@dividend+2
  6962  03E9  0829               	movf	(sprintf@val+1)^(0+128),w
  6963  03EA  00F6               	movwf	___lldiv@dividend+1
  6964  03EB  0828               	movf	sprintf@val^(0+128),w
  6965  03EC  00F5               	movwf	___lldiv@dividend
  6966  03ED  3197  2749  3180   	fcall	___lldiv
  6967  03F0  0874               	movf	?___lldiv+3,w
  6968  03F1  0021               	movlb	1	; select bank1
  6969  03F2  00B1               	movwf	(sprintf@tmpval+3)^(0+128)
  6970  03F3  0873               	movf	?___lldiv+2,w
  6971  03F4  00B0               	movwf	(sprintf@tmpval+2)^(0+128)
  6972  03F5  0872               	movf	?___lldiv+1,w
  6973  03F6  00AF               	movwf	(sprintf@tmpval+1)^(0+128)
  6974  03F7  0871               	movf	?___lldiv,w
  6975  03F8  00AE               	movwf	sprintf@tmpval^(0+128)
  6976                           
  6977                           ;doprnt.c: 1230: tmpval.vd %= 10;
  6978  03F9  3000               	movlw	0
  6979  03FA  00F4               	movwf	___llmod@divisor+3
  6980  03FB  3000               	movlw	0
  6981  03FC  00F3               	movwf	___llmod@divisor+2
  6982  03FD  3000               	movlw	0
  6983  03FE  00F2               	movwf	___llmod@divisor+1
  6984  03FF  300A               	movlw	10
  6985  0400  00F1               	movwf	___llmod@divisor
  6986  0401  0831               	movf	(sprintf@tmpval+3)^(0+128),w
  6987  0402  00F8               	movwf	___llmod@dividend+3
  6988  0403  0830               	movf	(sprintf@tmpval+2)^(0+128),w
  6989  0404  00F7               	movwf	___llmod@dividend+2
  6990  0405  082F               	movf	(sprintf@tmpval+1)^(0+128),w
  6991  0406  00F6               	movwf	___llmod@dividend+1
  6992  0407  082E               	movf	sprintf@tmpval^(0+128),w
  6993  0408  00F5               	movwf	___llmod@dividend
  6994  0409  3196  2670  3180   	fcall	___llmod
  6995  040C  0874               	movf	?___llmod+3,w
  6996  040D  0021               	movlb	1	; select bank1
  6997  040E  00B1               	movwf	(sprintf@tmpval+3)^(0+128)
  6998  040F  0873               	movf	?___llmod+2,w
  6999  0410  00B0               	movwf	(sprintf@tmpval+2)^(0+128)
  7000  0411  0872               	movf	?___llmod+1,w
  7001  0412  00AF               	movwf	(sprintf@tmpval+1)^(0+128)
  7002  0413  0871               	movf	?___llmod,w
  7003  0414  00AE               	movwf	sprintf@tmpval^(0+128)
  7004                           
  7005                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  7006  0415  082E               	movf	sprintf@tmpval^(0+128),w
  7007  0416  3E30               	addlw	48
  7008  0417  0020               	movlb	0	; select bank0
  7009  0418  00E0               	movwf	??_sprintf
  7010  0419  0021               	movlb	1	; select bank1
  7011  041A  0832               	movf	sprintf@sp^(0+128),w
  7012  041B  0086               	movwf	6
  7013  041C  0187               	clrf	7
  7014  041D  0020               	movlb	0	; select bank0
  7015  041E  0860               	movf	??_sprintf,w
  7016  041F  0081               	movwf	1
  7017  0420  3001               	movlw	1
  7018  0421  00E0               	movwf	??_sprintf
  7019  0422  0860               	movf	??_sprintf,w
  7020  0423  0021               	movlb	1	; select bank1
  7021  0424  07B2               	addwf	sprintf@sp^(0+128),f
  7022                           
  7023                           ;doprnt.c: 1232: val %= dpowers[c];
  7024  0425  0836               	movf	sprintf@c^(0+128),w
  7025  0426  0020               	movlb	0	; select bank0
  7026  0427  00E0               	movwf	??_sprintf
  7027  0428  01E1               	clrf	??_sprintf+1
  7028  0429  35E0               	lslf	??_sprintf,f
  7029  042A  0DE1               	rlf	??_sprintf+1,f
  7030  042B  35E0               	lslf	??_sprintf,f
  7031  042C  0DE1               	rlf	??_sprintf+1,f
  7032  042D  3000               	movlw	low (_dpowers| (0+32768))
  7033  042E  0760               	addwf	??_sprintf,w
  7034  042F  0084               	movwf	4
  7035  0430  3090               	movlw	high (_dpowers| (0+32768))
  7036  0431  3D61               	addwfc	??_sprintf+1,w
  7037  0432  0085               	movwf	5
  7038  0433  3F00               	moviw [0]fsr0
  7039  0434  00F1               	movwf	___llmod@divisor
  7040  0435  3F01               	moviw [1]fsr0
  7041  0436  00F2               	movwf	___llmod@divisor+1
  7042  0437  3F02               	moviw [2]fsr0
  7043  0438  00F3               	movwf	___llmod@divisor+2
  7044  0439  3F03               	moviw [3]fsr0
  7045  043A  00F4               	movwf	___llmod@divisor+3
  7046  043B  0021               	movlb	1	; select bank1
  7047  043C  082B               	movf	(sprintf@val+3)^(0+128),w
  7048  043D  00F8               	movwf	___llmod@dividend+3
  7049  043E  082A               	movf	(sprintf@val+2)^(0+128),w
  7050  043F  00F7               	movwf	___llmod@dividend+2
  7051  0440  0829               	movf	(sprintf@val+1)^(0+128),w
  7052  0441  00F6               	movwf	___llmod@dividend+1
  7053  0442  0828               	movf	sprintf@val^(0+128),w
  7054  0443  00F5               	movwf	___llmod@dividend
  7055  0444  3196  2670  3180   	fcall	___llmod
  7056  0447  0874               	movf	?___llmod+3,w
  7057  0448  0021               	movlb	1	; select bank1
  7058  0449  00AB               	movwf	(sprintf@val+3)^(0+128)
  7059  044A  0873               	movf	?___llmod+2,w
  7060  044B  00AA               	movwf	(sprintf@val+2)^(0+128)
  7061  044C  0872               	movf	?___llmod+1,w
  7062  044D  00A9               	movwf	(sprintf@val+1)^(0+128)
  7063  044E  0871               	movf	?___llmod,w
  7064  044F  2BC4               	goto	L4
  7065  0450                     l3041:	
  7066                           ;doprnt.c: 1233: }
  7067                           ;doprnt.c: 1235: while(prec) {
  7068                           
  7069                           
  7070                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  7071  0450  3030               	movlw	48
  7072  0451  0020               	movlb	0	; select bank0
  7073  0452  00E0               	movwf	??_sprintf
  7074  0453  0021               	movlb	1	; select bank1
  7075  0454  0832               	movf	sprintf@sp^(0+128),w
  7076  0455  0086               	movwf	6
  7077  0456  0187               	clrf	7
  7078  0457  0020               	movlb	0	; select bank0
  7079  0458  0860               	movf	??_sprintf,w
  7080  0459  0081               	movwf	1
  7081  045A  3001               	movlw	1
  7082  045B  00E0               	movwf	??_sprintf
  7083  045C  0860               	movf	??_sprintf,w
  7084  045D  0021               	movlb	1	; select bank1
  7085  045E  07B2               	addwf	sprintf@sp^(0+128),f
  7086                           
  7087                           ;doprnt.c: 1237: prec--;
  7088  045F  30FF               	movlw	255
  7089  0460  07A6               	addwf	sprintf@prec^(0+128),f
  7090  0461  30FF               	movlw	255
  7091  0462  3DA7               	addwfc	(sprintf@prec+1)^(0+128),f
  7092  0463                     l3047:	
  7093  0463  0826               	movf	sprintf@prec^(0+128),w
  7094  0464  0427               	iorwf	(sprintf@prec+1)^(0+128),w
  7095  0465  1903               	btfsc	3,2
  7096  0466  2840               	goto	l3055
  7097  0467  2C50               	goto	l3041
  7098  0468                     l3049:	
  7099                           ;doprnt.c: 1238: }
  7100                           ;doprnt.c: 1245: continue;
  7101                           
  7102                           
  7103                           ;doprnt.c: 1246: }
  7104                           ;doprnt.c: 1422: {
  7105                           ;doprnt.c: 1438: if(flag & 0x03)
  7106  0468  3003               	movlw	3
  7107  0469  0021               	movlb	1	; select bank1
  7108  046A  0524               	andwf	sprintf@flag^(0+128),w
  7109  046B  0020               	movlb	0	; select bank0
  7110  046C  00E0               	movwf	??_sprintf
  7111  046D  3000               	movlw	0
  7112  046E  0021               	movlb	1	; select bank1
  7113  046F  0525               	andwf	(sprintf@flag+1)^(0+128),w
  7114  0470  0020               	movlb	0	; select bank0
  7115  0471  00E1               	movwf	??_sprintf+1
  7116  0472  0860               	movf	??_sprintf,w
  7117  0473  0461               	iorwf	??_sprintf+1,w
  7118  0474  1903               	btfsc	3,2
  7119  0475  2840               	goto	l3055
  7120                           
  7121                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  7122  0476  302D               	movlw	45
  7123  0477                     L5:	
  7124  0477  00E0               	movwf	??_sprintf
  7125  0478  0021               	movlb	1	; select bank1
  7126  0479  0832               	movf	sprintf@sp^(0+128),w
  7127  047A  0086               	movwf	6
  7128  047B  0187               	clrf	7
  7129  047C  0020               	movlb	0	; select bank0
  7130  047D  0860               	movf	??_sprintf,w
  7131  047E  0081               	movwf	1
  7132  047F  3001               	movlw	1
  7133  0480  00E0               	movwf	??_sprintf
  7134  0481  0860               	movf	??_sprintf,w
  7135  0482  0021               	movlb	1	; select bank1
  7136  0483  07B2               	addwf	sprintf@sp^(0+128),f
  7137  0484  2840               	goto	l3055
  7138  0485                     l3057:	
  7139                           ;doprnt.c: 1469: }
  7140                           ;doprnt.c: 1533: }
  7141                           ;doprnt.c: 1535: alldone:
  7142                           
  7143                           
  7144                           ;doprnt.c: 1538: *sp = 0;
  7145  0485  0832               	movf	sprintf@sp^(0+128),w
  7146  0486  0086               	movwf	6
  7147  0487  0187               	clrf	7
  7148  0488  0181               	clrf	1
  7149  0489  0008               	return
  7150  048A                     __end_of_sprintf:	
  7151                           ;doprnt.c: 1540: return 0;
  7152                           ;	Return value of _sprintf is never used
  7153                           
  7154                           
  7155                           	psect	text6
  7156  0DBC                     __ptext6:	
  7157 ;; *************** function _scale *****************
  7158 ;; Defined at:
  7159 ;;		line 425 in file "C:\Program Files\Microchip\xc8\v1.38\sources\common\doprnt.c"
  7160 ;; Parameters:    Size  Location     Type
  7161 ;;  scl             1    wreg     char 
  7162 ;; Auto vars:     Size  Location     Type
  7163 ;;  scl             1   34[BANK0 ] char 
  7164 ;; Return value:  Size  Location     Type
  7165 ;;                  3   26[BANK0 ] char 
  7166 ;; Registers used:
  7167 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7168 ;; Tracked objects:
  7169 ;;		On entry : 0/0
  7170 ;;		On exit  : 0/0
  7171 ;;		Unchanged: 0/0
  7172 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7173 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7174 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7175 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7176 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7177 ;;Total ram usage:        9 bytes
  7178 ;; Hardware stack levels used:    1
  7179 ;; Hardware stack levels required when called:    3
  7180 ;; This function calls:
  7181 ;;		___awdiv
  7182 ;;		___awmod
  7183 ;;		___ftmul
  7184 ;;		___wmul
  7185 ;; This function is called by:
  7186 ;;		_sprintf
  7187 ;; This function uses a non-reentrant model
  7188 ;;
  7189                           
  7190                           
  7191                           ;psect for function _scale
  7192  0DBC                     _scale:	
  7193                           
  7194                           ;incstack = 0
  7195                           ; Regs used in _scale: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7196                           ;scale@scl stored from wreg
  7197  0DBC  0020               	movlb	0	; select bank0
  7198  0DBD  00C2               	movwf	scale@scl
  7199                           
  7200                           ;doprnt.c: 428: if(scl < 0) {
  7201  0DBE  1FC2               	btfss	scale@scl,7
  7202  0DBF  2EE1               	goto	l2625
  7203                           
  7204                           ;doprnt.c: 429: scl = -scl;
  7205  0DC0  09C2               	comf	scale@scl,f
  7206  0DC1  0AC2               	incf	scale@scl,f
  7207                           
  7208                           ;doprnt.c: 430: if(scl>=110)
  7209  0DC2  0842               	movf	scale@scl,w
  7210  0DC3  3A80               	xorlw	128
  7211  0DC4  3E12               	addlw	-238
  7212  0DC5  1C03               	skipc
  7213  0DC6  2E65               	goto	l2615
  7214                           
  7215                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  7216  0DC7  300A               	movlw	10
  7217  0DC8  00F8               	movwf	___awdiv@divisor
  7218  0DC9  3000               	movlw	0
  7219  0DCA  00F9               	movwf	___awdiv@divisor+1
  7220  0DCB  0842               	movf	scale@scl,w
  7221  0DCC  00F3               	movwf	___awmod@dividend
  7222  0DCD  01F4               	clrf	___awmod@dividend+1
  7223  0DCE  1BF3               	btfsc	___awmod@dividend,7
  7224  0DCF  03F4               	decf	___awmod@dividend+1,f
  7225  0DD0  3064               	movlw	100
  7226  0DD1  00F1               	movwf	___awmod@divisor
  7227  0DD2  3000               	movlw	0
  7228  0DD3  00F2               	movwf	___awmod@divisor+1
  7229  0DD4  3196  26B2  318D   	fcall	___awmod
  7230  0DD7  0872               	movf	?___awmod+1,w
  7231  0DD8  00FB               	movwf	___awdiv@dividend+1
  7232  0DD9  0871               	movf	?___awmod,w
  7233  0DDA  00FA               	movwf	___awdiv@dividend
  7234  0DDB  3196  26F7  318D   	fcall	___awdiv
  7235  0DDE  0878               	movf	?___awdiv,w
  7236  0DDF  3E09               	addlw	9
  7237  0DE0  0020               	movlb	0	; select bank0
  7238  0DE1  00A4               	movwf	___wmul@multiplier
  7239  0DE2  3000               	movlw	0
  7240  0DE3  3D79               	addwfc	?___awdiv+1,w
  7241  0DE4  00A5               	movwf	___wmul@multiplier+1
  7242  0DE5  3003               	movlw	3
  7243  0DE6  00A6               	movwf	___wmul@multiplicand
  7244  0DE7  3000               	movlw	0
  7245  0DE8  00A7               	movwf	___wmul@multiplicand+1
  7246  0DE9  3195  2592  318D   	fcall	___wmul
  7247  0DEC  0020               	movlb	0	; select bank0
  7248  0DED  0825               	movf	?___wmul+1,w
  7249  0DEE  0085               	movwf	5
  7250  0DEF  0824               	movf	?___wmul,w
  7251  0DF0  0084               	movwf	4
  7252  0DF1  3028               	movlw	low (__npowers_| (0+32768))
  7253  0DF2  0784               	addwf	4,f
  7254  0DF3  3090               	movlw	high (__npowers_| (0+32768))
  7255  0DF4  3D85               	addwfc	5,f
  7256  0DF5  3F00               	moviw [0]fsr0
  7257  0DF6  00AA               	movwf	___ftmul@f1
  7258  0DF7  3F01               	moviw [1]fsr0
  7259  0DF8  00AB               	movwf	___ftmul@f1+1
  7260  0DF9  3F02               	moviw [2]fsr0
  7261  0DFA  00AC               	movwf	___ftmul@f1+2
  7262  0DFB  3064               	movlw	100
  7263  0DFC  00F8               	movwf	___awdiv@divisor
  7264  0DFD  3000               	movlw	0
  7265  0DFE  00F9               	movwf	___awdiv@divisor+1
  7266  0DFF  0842               	movf	scale@scl,w
  7267  0E00  00FA               	movwf	___awdiv@dividend
  7268  0E01  01FB               	clrf	___awdiv@dividend+1
  7269  0E02  1BFA               	btfsc	___awdiv@dividend,7
  7270  0E03  03FB               	decf	___awdiv@dividend+1,f
  7271  0E04  3196  26F7  318D   	fcall	___awdiv
  7272  0E07  0878               	movf	?___awdiv,w
  7273  0E08  3E12               	addlw	18
  7274  0E09  0020               	movlb	0	; select bank0
  7275  0E0A  00A4               	movwf	___wmul@multiplier
  7276  0E0B  3000               	movlw	0
  7277  0E0C  3D79               	addwfc	?___awdiv+1,w
  7278  0E0D  00A5               	movwf	___wmul@multiplier+1
  7279  0E0E  3003               	movlw	3
  7280  0E0F  00A6               	movwf	___wmul@multiplicand
  7281  0E10  3000               	movlw	0
  7282  0E11  00A7               	movwf	___wmul@multiplicand+1
  7283  0E12  3195  2592  318D   	fcall	___wmul
  7284  0E15  0020               	movlb	0	; select bank0
  7285  0E16  0825               	movf	?___wmul+1,w
  7286  0E17  0085               	movwf	5
  7287  0E18  0824               	movf	?___wmul,w
  7288  0E19  0084               	movwf	4
  7289  0E1A  3028               	movlw	low (__npowers_| (0+32768))
  7290  0E1B  0784               	addwf	4,f
  7291  0E1C  3090               	movlw	high (__npowers_| (0+32768))
  7292  0E1D  3D85               	addwfc	5,f
  7293  0E1E  3F00               	moviw [0]fsr0
  7294  0E1F  00AD               	movwf	___ftmul@f2
  7295  0E20  3F01               	moviw [1]fsr0
  7296  0E21  00AE               	movwf	___ftmul@f2+1
  7297  0E22  3F02               	moviw [2]fsr0
  7298  0E23  00AF               	movwf	___ftmul@f2+2
  7299  0E24  3188  20DA  318D   	fcall	___ftmul
  7300  0E27  0020               	movlb	0	; select bank0
  7301  0E28  082A               	movf	?___ftmul,w
  7302  0E29  00BF               	movwf	_scale$1322
  7303  0E2A  082B               	movf	?___ftmul+1,w
  7304  0E2B  00C0               	movwf	_scale$1322+1
  7305  0E2C  082C               	movf	?___ftmul+2,w
  7306  0E2D  00C1               	movwf	_scale$1322+2
  7307                           
  7308                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  7309  0E2E  0842               	movf	scale@scl,w
  7310  0E2F  00F3               	movwf	___awmod@dividend
  7311  0E30  01F4               	clrf	___awmod@dividend+1
  7312  0E31  1BF3               	btfsc	___awmod@dividend,7
  7313  0E32  03F4               	decf	___awmod@dividend+1,f
  7314  0E33  300A               	movlw	10
  7315  0E34  00F1               	movwf	___awmod@divisor
  7316  0E35  3000               	movlw	0
  7317  0E36  00F2               	movwf	___awmod@divisor+1
  7318  0E37  3196  26B2  318D   	fcall	___awmod
  7319  0E3A  0872               	movf	?___awmod+1,w
  7320  0E3B  0020               	movlb	0	; select bank0
  7321  0E3C  00A5               	movwf	___wmul@multiplier+1
  7322  0E3D  0871               	movf	?___awmod,w
  7323  0E3E  00A4               	movwf	___wmul@multiplier
  7324  0E3F  3003               	movlw	3
  7325  0E40  00A6               	movwf	___wmul@multiplicand
  7326  0E41  3000               	movlw	0
  7327  0E42  00A7               	movwf	___wmul@multiplicand+1
  7328  0E43  3195  2592  318D   	fcall	___wmul
  7329  0E46  0020               	movlb	0	; select bank0
  7330  0E47  0825               	movf	?___wmul+1,w
  7331  0E48  0085               	movwf	5
  7332  0E49  0824               	movf	?___wmul,w
  7333  0E4A  0084               	movwf	4
  7334  0E4B  3028               	movlw	low (__npowers_| (0+32768))
  7335  0E4C  0784               	addwf	4,f
  7336  0E4D  3090               	movlw	high (__npowers_| (0+32768))
  7337  0E4E  3D85               	addwfc	5,f
  7338  0E4F  3F00               	moviw [0]fsr0
  7339  0E50  00AA               	movwf	___ftmul@f1
  7340  0E51  3F01               	moviw [1]fsr0
  7341  0E52  00AB               	movwf	___ftmul@f1+1
  7342  0E53  3F02               	moviw [2]fsr0
  7343  0E54  00AC               	movwf	___ftmul@f1+2
  7344  0E55  083F               	movf	_scale$1322,w
  7345  0E56  00AD               	movwf	___ftmul@f2
  7346  0E57  0840               	movf	_scale$1322+1,w
  7347  0E58  00AE               	movwf	___ftmul@f2+1
  7348  0E59  0841               	movf	_scale$1322+2,w
  7349  0E5A  00AF               	movwf	___ftmul@f2+2
  7350  0E5B  3188  20DA         	fcall	___ftmul
  7351  0E5D  0020               	movlb	0	; select bank0
  7352  0E5E  082A               	movf	?___ftmul,w
  7353  0E5F  00BA               	movwf	?_scale
  7354  0E60  082B               	movf	?___ftmul+1,w
  7355  0E61  00BB               	movwf	?_scale+1
  7356  0E62  082C               	movf	?___ftmul+2,w
  7357  0E63  00BC               	movwf	?_scale+2
  7358  0E64  0008               	return
  7359  0E65                     l2615:	
  7360                           
  7361                           ;doprnt.c: 432: else if(scl > 10)
  7362  0E65  0842               	movf	scale@scl,w
  7363  0E66  3A80               	xorlw	128
  7364  0E67  3E75               	addlw	-139
  7365  0E68  1C03               	skipc
  7366  0E69  2EC4               	goto	l2621
  7367                           
  7368                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  7369  0E6A  0842               	movf	scale@scl,w
  7370  0E6B  00F3               	movwf	___awmod@dividend
  7371  0E6C  01F4               	clrf	___awmod@dividend+1
  7372  0E6D  1BF3               	btfsc	___awmod@dividend,7
  7373  0E6E  03F4               	decf	___awmod@dividend+1,f
  7374  0E6F  300A               	movlw	10
  7375  0E70  00F1               	movwf	___awmod@divisor
  7376  0E71  3000               	movlw	0
  7377  0E72  00F2               	movwf	___awmod@divisor+1
  7378  0E73  3196  26B2  318D   	fcall	___awmod
  7379  0E76  0872               	movf	?___awmod+1,w
  7380  0E77  0020               	movlb	0	; select bank0
  7381  0E78  00A5               	movwf	___wmul@multiplier+1
  7382  0E79  0871               	movf	?___awmod,w
  7383  0E7A  00A4               	movwf	___wmul@multiplier
  7384  0E7B  3003               	movlw	3
  7385  0E7C  00A6               	movwf	___wmul@multiplicand
  7386  0E7D  3000               	movlw	0
  7387  0E7E  00A7               	movwf	___wmul@multiplicand+1
  7388  0E7F  3195  2592  318D   	fcall	___wmul
  7389  0E82  0020               	movlb	0	; select bank0
  7390  0E83  0825               	movf	?___wmul+1,w
  7391  0E84  0085               	movwf	5
  7392  0E85  0824               	movf	?___wmul,w
  7393  0E86  0084               	movwf	4
  7394  0E87  3028               	movlw	low (__npowers_| (0+32768))
  7395  0E88  0784               	addwf	4,f
  7396  0E89  3090               	movlw	high (__npowers_| (0+32768))
  7397  0E8A  3D85               	addwfc	5,f
  7398  0E8B  3F00               	moviw [0]fsr0
  7399  0E8C  00AA               	movwf	___ftmul@f1
  7400  0E8D  3F01               	moviw [1]fsr0
  7401  0E8E  00AB               	movwf	___ftmul@f1+1
  7402  0E8F  3F02               	moviw [2]fsr0
  7403  0E90  00AC               	movwf	___ftmul@f1+2
  7404  0E91  300A               	movlw	10
  7405  0E92  00F8               	movwf	___awdiv@divisor
  7406  0E93  3000               	movlw	0
  7407  0E94  00F9               	movwf	___awdiv@divisor+1
  7408  0E95  0842               	movf	scale@scl,w
  7409  0E96  00FA               	movwf	___awdiv@dividend
  7410  0E97  01FB               	clrf	___awdiv@dividend+1
  7411  0E98  1BFA               	btfsc	___awdiv@dividend,7
  7412  0E99  03FB               	decf	___awdiv@dividend+1,f
  7413  0E9A  3196  26F7  318D   	fcall	___awdiv
  7414  0E9D  0878               	movf	?___awdiv,w
  7415  0E9E  3E09               	addlw	9
  7416  0E9F  0020               	movlb	0	; select bank0
  7417  0EA0  00A4               	movwf	___wmul@multiplier
  7418  0EA1  3000               	movlw	0
  7419  0EA2  3D79               	addwfc	?___awdiv+1,w
  7420  0EA3  00A5               	movwf	___wmul@multiplier+1
  7421  0EA4  3003               	movlw	3
  7422  0EA5  00A6               	movwf	___wmul@multiplicand
  7423  0EA6  3000               	movlw	0
  7424  0EA7  00A7               	movwf	___wmul@multiplicand+1
  7425  0EA8  3195  2592  318D   	fcall	___wmul
  7426  0EAB  0020               	movlb	0	; select bank0
  7427  0EAC  0825               	movf	?___wmul+1,w
  7428  0EAD  0085               	movwf	5
  7429  0EAE  0824               	movf	?___wmul,w
  7430  0EAF  0084               	movwf	4
  7431  0EB0  3028               	movlw	low (__npowers_| (0+32768))
  7432  0EB1  0784               	addwf	4,f
  7433  0EB2  3090               	movlw	high (__npowers_| (0+32768))
  7434  0EB3  3D85               	addwfc	5,f
  7435  0EB4  3F00               	moviw [0]fsr0
  7436  0EB5  00AD               	movwf	___ftmul@f2
  7437  0EB6  3F01               	moviw [1]fsr0
  7438  0EB7  00AE               	movwf	___ftmul@f2+1
  7439  0EB8  3F02               	moviw [2]fsr0
  7440  0EB9  00AF               	movwf	___ftmul@f2+2
  7441  0EBA  3188  20DA         	fcall	___ftmul
  7442  0EBC  0020               	movlb	0	; select bank0
  7443  0EBD  082A               	movf	?___ftmul,w
  7444  0EBE  00BA               	movwf	?_scale
  7445  0EBF  082B               	movf	?___ftmul+1,w
  7446  0EC0  00BB               	movwf	?_scale+1
  7447  0EC1  082C               	movf	?___ftmul+2,w
  7448  0EC2  00BC               	movwf	?_scale+2
  7449  0EC3  0008               	return
  7450  0EC4                     l2621:	
  7451                           
  7452                           ;doprnt.c: 434: return _npowers_[scl];
  7453  0EC4  0842               	movf	scale@scl,w
  7454  0EC5  00BD               	movwf	??_scale
  7455  0EC6  01BE               	clrf	??_scale+1
  7456  0EC7  083D               	movf	??_scale,w
  7457  0EC8  00A4               	movwf	___wmul@multiplier
  7458  0EC9  083E               	movf	??_scale+1,w
  7459  0ECA  00A5               	movwf	___wmul@multiplier+1
  7460  0ECB  3003               	movlw	3
  7461  0ECC  00A6               	movwf	___wmul@multiplicand
  7462  0ECD  3000               	movlw	0
  7463  0ECE  00A7               	movwf	___wmul@multiplicand+1
  7464  0ECF  3195  2592         	fcall	___wmul
  7465  0ED1  0020               	movlb	0	; select bank0
  7466  0ED2  0825               	movf	?___wmul+1,w
  7467  0ED3  0085               	movwf	5
  7468  0ED4  0824               	movf	?___wmul,w
  7469  0ED5  0084               	movwf	4
  7470  0ED6  3028               	movlw	low (__npowers_| (0+32768))
  7471  0ED7  0784               	addwf	4,f
  7472  0ED8  3090               	movlw	high (__npowers_| (0+32768))
  7473  0ED9  3D85               	addwfc	5,f
  7474  0EDA  3F00               	moviw [0]fsr0
  7475  0EDB  00BA               	movwf	?_scale
  7476  0EDC  3F01               	moviw [1]fsr0
  7477  0EDD  00BB               	movwf	?_scale+1
  7478  0EDE  3F02               	moviw [2]fsr0
  7479  0EDF  00BC               	movwf	?_scale+2
  7480  0EE0  0008               	return
  7481  0EE1                     l2625:	
  7482                           
  7483                           ;doprnt.c: 435: }
  7484                           ;doprnt.c: 436: if(scl>=110)
  7485  0EE1  0842               	movf	scale@scl,w
  7486  0EE2  3A80               	xorlw	128
  7487  0EE3  3E12               	addlw	-238
  7488  0EE4  1C03               	skipc
  7489  0EE5  2F84               	goto	l2633
  7490                           
  7491                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  7492  0EE6  300A               	movlw	10
  7493  0EE7  00F8               	movwf	___awdiv@divisor
  7494  0EE8  3000               	movlw	0
  7495  0EE9  00F9               	movwf	___awdiv@divisor+1
  7496  0EEA  0842               	movf	scale@scl,w
  7497  0EEB  00F3               	movwf	___awmod@dividend
  7498  0EEC  01F4               	clrf	___awmod@dividend+1
  7499  0EED  1BF3               	btfsc	___awmod@dividend,7
  7500  0EEE  03F4               	decf	___awmod@dividend+1,f
  7501  0EEF  3064               	movlw	100
  7502  0EF0  00F1               	movwf	___awmod@divisor
  7503  0EF1  3000               	movlw	0
  7504  0EF2  00F2               	movwf	___awmod@divisor+1
  7505  0EF3  3196  26B2  318D   	fcall	___awmod
  7506  0EF6  0872               	movf	?___awmod+1,w
  7507  0EF7  00FB               	movwf	___awdiv@dividend+1
  7508  0EF8  0871               	movf	?___awmod,w
  7509  0EF9  00FA               	movwf	___awdiv@dividend
  7510  0EFA  3196  26F7  318D   	fcall	___awdiv
  7511  0EFD  0878               	movf	?___awdiv,w
  7512  0EFE  3E09               	addlw	9
  7513  0EFF  0020               	movlb	0	; select bank0
  7514  0F00  00A4               	movwf	___wmul@multiplier
  7515  0F01  3000               	movlw	0
  7516  0F02  3D79               	addwfc	?___awdiv+1,w
  7517  0F03  00A5               	movwf	___wmul@multiplier+1
  7518  0F04  3003               	movlw	3
  7519  0F05  00A6               	movwf	___wmul@multiplicand
  7520  0F06  3000               	movlw	0
  7521  0F07  00A7               	movwf	___wmul@multiplicand+1
  7522  0F08  3195  2592  318D   	fcall	___wmul
  7523  0F0B  0020               	movlb	0	; select bank0
  7524  0F0C  0825               	movf	?___wmul+1,w
  7525  0F0D  0085               	movwf	5
  7526  0F0E  0824               	movf	?___wmul,w
  7527  0F0F  0084               	movwf	4
  7528  0F10  304F               	movlw	low (__powers_| (0+32768))
  7529  0F11  0784               	addwf	4,f
  7530  0F12  3090               	movlw	high (__powers_| (0+32768))
  7531  0F13  3D85               	addwfc	5,f
  7532  0F14  3F00               	moviw [0]fsr0
  7533  0F15  00AA               	movwf	___ftmul@f1
  7534  0F16  3F01               	moviw [1]fsr0
  7535  0F17  00AB               	movwf	___ftmul@f1+1
  7536  0F18  3F02               	moviw [2]fsr0
  7537  0F19  00AC               	movwf	___ftmul@f1+2
  7538  0F1A  3064               	movlw	100
  7539  0F1B  00F8               	movwf	___awdiv@divisor
  7540  0F1C  3000               	movlw	0
  7541  0F1D  00F9               	movwf	___awdiv@divisor+1
  7542  0F1E  0842               	movf	scale@scl,w
  7543  0F1F  00FA               	movwf	___awdiv@dividend
  7544  0F20  01FB               	clrf	___awdiv@dividend+1
  7545  0F21  1BFA               	btfsc	___awdiv@dividend,7
  7546  0F22  03FB               	decf	___awdiv@dividend+1,f
  7547  0F23  3196  26F7  318D   	fcall	___awdiv
  7548  0F26  0878               	movf	?___awdiv,w
  7549  0F27  3E12               	addlw	18
  7550  0F28  0020               	movlb	0	; select bank0
  7551  0F29  00A4               	movwf	___wmul@multiplier
  7552  0F2A  3000               	movlw	0
  7553  0F2B  3D79               	addwfc	?___awdiv+1,w
  7554  0F2C  00A5               	movwf	___wmul@multiplier+1
  7555  0F2D  3003               	movlw	3
  7556  0F2E  00A6               	movwf	___wmul@multiplicand
  7557  0F2F  3000               	movlw	0
  7558  0F30  00A7               	movwf	___wmul@multiplicand+1
  7559  0F31  3195  2592  318D   	fcall	___wmul
  7560  0F34  0020               	movlb	0	; select bank0
  7561  0F35  0825               	movf	?___wmul+1,w
  7562  0F36  0085               	movwf	5
  7563  0F37  0824               	movf	?___wmul,w
  7564  0F38  0084               	movwf	4
  7565  0F39  304F               	movlw	low (__powers_| (0+32768))
  7566  0F3A  0784               	addwf	4,f
  7567  0F3B  3090               	movlw	high (__powers_| (0+32768))
  7568  0F3C  3D85               	addwfc	5,f
  7569  0F3D  3F00               	moviw [0]fsr0
  7570  0F3E  00AD               	movwf	___ftmul@f2
  7571  0F3F  3F01               	moviw [1]fsr0
  7572  0F40  00AE               	movwf	___ftmul@f2+1
  7573  0F41  3F02               	moviw [2]fsr0
  7574  0F42  00AF               	movwf	___ftmul@f2+2
  7575  0F43  3188  20DA  318D   	fcall	___ftmul
  7576  0F46  0020               	movlb	0	; select bank0
  7577  0F47  082A               	movf	?___ftmul,w
  7578  0F48  00BF               	movwf	_scale$1322
  7579  0F49  082B               	movf	?___ftmul+1,w
  7580  0F4A  00C0               	movwf	_scale$1322+1
  7581  0F4B  082C               	movf	?___ftmul+2,w
  7582  0F4C  00C1               	movwf	_scale$1322+2
  7583                           
  7584                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  7585  0F4D  0842               	movf	scale@scl,w
  7586  0F4E  00F3               	movwf	___awmod@dividend
  7587  0F4F  01F4               	clrf	___awmod@dividend+1
  7588  0F50  1BF3               	btfsc	___awmod@dividend,7
  7589  0F51  03F4               	decf	___awmod@dividend+1,f
  7590  0F52  300A               	movlw	10
  7591  0F53  00F1               	movwf	___awmod@divisor
  7592  0F54  3000               	movlw	0
  7593  0F55  00F2               	movwf	___awmod@divisor+1
  7594  0F56  3196  26B2  318D   	fcall	___awmod
  7595  0F59  0872               	movf	?___awmod+1,w
  7596  0F5A  0020               	movlb	0	; select bank0
  7597  0F5B  00A5               	movwf	___wmul@multiplier+1
  7598  0F5C  0871               	movf	?___awmod,w
  7599  0F5D  00A4               	movwf	___wmul@multiplier
  7600  0F5E  3003               	movlw	3
  7601  0F5F  00A6               	movwf	___wmul@multiplicand
  7602  0F60  3000               	movlw	0
  7603  0F61  00A7               	movwf	___wmul@multiplicand+1
  7604  0F62  3195  2592  318D   	fcall	___wmul
  7605  0F65  0020               	movlb	0	; select bank0
  7606  0F66  0825               	movf	?___wmul+1,w
  7607  0F67  0085               	movwf	5
  7608  0F68  0824               	movf	?___wmul,w
  7609  0F69  0084               	movwf	4
  7610  0F6A  304F               	movlw	low (__powers_| (0+32768))
  7611  0F6B  0784               	addwf	4,f
  7612  0F6C  3090               	movlw	high (__powers_| (0+32768))
  7613  0F6D  3D85               	addwfc	5,f
  7614  0F6E  3F00               	moviw [0]fsr0
  7615  0F6F  00AA               	movwf	___ftmul@f1
  7616  0F70  3F01               	moviw [1]fsr0
  7617  0F71  00AB               	movwf	___ftmul@f1+1
  7618  0F72  3F02               	moviw [2]fsr0
  7619  0F73  00AC               	movwf	___ftmul@f1+2
  7620  0F74  083F               	movf	_scale$1322,w
  7621  0F75  00AD               	movwf	___ftmul@f2
  7622  0F76  0840               	movf	_scale$1322+1,w
  7623  0F77  00AE               	movwf	___ftmul@f2+1
  7624  0F78  0841               	movf	_scale$1322+2,w
  7625  0F79  00AF               	movwf	___ftmul@f2+2
  7626  0F7A  3188  20DA         	fcall	___ftmul
  7627  0F7C  0020               	movlb	0	; select bank0
  7628  0F7D  082A               	movf	?___ftmul,w
  7629  0F7E  00BA               	movwf	?_scale
  7630  0F7F  082B               	movf	?___ftmul+1,w
  7631  0F80  00BB               	movwf	?_scale+1
  7632  0F81  082C               	movf	?___ftmul+2,w
  7633  0F82  00BC               	movwf	?_scale+2
  7634  0F83  0008               	return
  7635  0F84                     l2633:	
  7636                           
  7637                           ;doprnt.c: 438: else if(scl > 10)
  7638  0F84  0842               	movf	scale@scl,w
  7639  0F85  3A80               	xorlw	128
  7640  0F86  3E75               	addlw	-139
  7641  0F87  1C03               	skipc
  7642  0F88  2FE3               	goto	l2639
  7643                           
  7644                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  7645  0F89  0842               	movf	scale@scl,w
  7646  0F8A  00F3               	movwf	___awmod@dividend
  7647  0F8B  01F4               	clrf	___awmod@dividend+1
  7648  0F8C  1BF3               	btfsc	___awmod@dividend,7
  7649  0F8D  03F4               	decf	___awmod@dividend+1,f
  7650  0F8E  300A               	movlw	10
  7651  0F8F  00F1               	movwf	___awmod@divisor
  7652  0F90  3000               	movlw	0
  7653  0F91  00F2               	movwf	___awmod@divisor+1
  7654  0F92  3196  26B2  318D   	fcall	___awmod
  7655  0F95  0872               	movf	?___awmod+1,w
  7656  0F96  0020               	movlb	0	; select bank0
  7657  0F97  00A5               	movwf	___wmul@multiplier+1
  7658  0F98  0871               	movf	?___awmod,w
  7659  0F99  00A4               	movwf	___wmul@multiplier
  7660  0F9A  3003               	movlw	3
  7661  0F9B  00A6               	movwf	___wmul@multiplicand
  7662  0F9C  3000               	movlw	0
  7663  0F9D  00A7               	movwf	___wmul@multiplicand+1
  7664  0F9E  3195  2592  318D   	fcall	___wmul
  7665  0FA1  0020               	movlb	0	; select bank0
  7666  0FA2  0825               	movf	?___wmul+1,w
  7667  0FA3  0085               	movwf	5
  7668  0FA4  0824               	movf	?___wmul,w
  7669  0FA5  0084               	movwf	4
  7670  0FA6  304F               	movlw	low (__powers_| (0+32768))
  7671  0FA7  0784               	addwf	4,f
  7672  0FA8  3090               	movlw	high (__powers_| (0+32768))
  7673  0FA9  3D85               	addwfc	5,f
  7674  0FAA  3F00               	moviw [0]fsr0
  7675  0FAB  00AA               	movwf	___ftmul@f1
  7676  0FAC  3F01               	moviw [1]fsr0
  7677  0FAD  00AB               	movwf	___ftmul@f1+1
  7678  0FAE  3F02               	moviw [2]fsr0
  7679  0FAF  00AC               	movwf	___ftmul@f1+2
  7680  0FB0  300A               	movlw	10
  7681  0FB1  00F8               	movwf	___awdiv@divisor
  7682  0FB2  3000               	movlw	0
  7683  0FB3  00F9               	movwf	___awdiv@divisor+1
  7684  0FB4  0842               	movf	scale@scl,w
  7685  0FB5  00FA               	movwf	___awdiv@dividend
  7686  0FB6  01FB               	clrf	___awdiv@dividend+1
  7687  0FB7  1BFA               	btfsc	___awdiv@dividend,7
  7688  0FB8  03FB               	decf	___awdiv@dividend+1,f
  7689  0FB9  3196  26F7  318D   	fcall	___awdiv
  7690  0FBC  0878               	movf	?___awdiv,w
  7691  0FBD  3E09               	addlw	9
  7692  0FBE  0020               	movlb	0	; select bank0
  7693  0FBF  00A4               	movwf	___wmul@multiplier
  7694  0FC0  3000               	movlw	0
  7695  0FC1  3D79               	addwfc	?___awdiv+1,w
  7696  0FC2  00A5               	movwf	___wmul@multiplier+1
  7697  0FC3  3003               	movlw	3
  7698  0FC4  00A6               	movwf	___wmul@multiplicand
  7699  0FC5  3000               	movlw	0
  7700  0FC6  00A7               	movwf	___wmul@multiplicand+1
  7701  0FC7  3195  2592  318D   	fcall	___wmul
  7702  0FCA  0020               	movlb	0	; select bank0
  7703  0FCB  0825               	movf	?___wmul+1,w
  7704  0FCC  0085               	movwf	5
  7705  0FCD  0824               	movf	?___wmul,w
  7706  0FCE  0084               	movwf	4
  7707  0FCF  304F               	movlw	low (__powers_| (0+32768))
  7708  0FD0  0784               	addwf	4,f
  7709  0FD1  3090               	movlw	high (__powers_| (0+32768))
  7710  0FD2  3D85               	addwfc	5,f
  7711  0FD3  3F00               	moviw [0]fsr0
  7712  0FD4  00AD               	movwf	___ftmul@f2
  7713  0FD5  3F01               	moviw [1]fsr0
  7714  0FD6  00AE               	movwf	___ftmul@f2+1
  7715  0FD7  3F02               	moviw [2]fsr0
  7716  0FD8  00AF               	movwf	___ftmul@f2+2
  7717  0FD9  3188  20DA         	fcall	___ftmul
  7718  0FDB  0020               	movlb	0	; select bank0
  7719  0FDC  082A               	movf	?___ftmul,w
  7720  0FDD  00BA               	movwf	?_scale
  7721  0FDE  082B               	movf	?___ftmul+1,w
  7722  0FDF  00BB               	movwf	?_scale+1
  7723  0FE0  082C               	movf	?___ftmul+2,w
  7724  0FE1  00BC               	movwf	?_scale+2
  7725  0FE2  0008               	return
  7726  0FE3                     l2639:	
  7727                           
  7728                           ;doprnt.c: 440: return _powers_[scl];
  7729  0FE3  0842               	movf	scale@scl,w
  7730  0FE4  00BD               	movwf	??_scale
  7731  0FE5  01BE               	clrf	??_scale+1
  7732  0FE6  083D               	movf	??_scale,w
  7733  0FE7  00A4               	movwf	___wmul@multiplier
  7734  0FE8  083E               	movf	??_scale+1,w
  7735  0FE9  00A5               	movwf	___wmul@multiplier+1
  7736  0FEA  3003               	movlw	3
  7737  0FEB  00A6               	movwf	___wmul@multiplicand
  7738  0FEC  3000               	movlw	0
  7739  0FED  00A7               	movwf	___wmul@multiplicand+1
  7740  0FEE  3195  2592         	fcall	___wmul
  7741  0FF0  0020               	movlb	0	; select bank0
  7742  0FF1  0825               	movf	?___wmul+1,w
  7743  0FF2  0085               	movwf	5
  7744  0FF3  0824               	movf	?___wmul,w
  7745  0FF4  0084               	movwf	4
  7746  0FF5  304F               	movlw	low (__powers_| (0+32768))
  7747  0FF6  0784               	addwf	4,f
  7748  0FF7  3090               	movlw	high (__powers_| (0+32768))
  7749  0FF8  3D85               	addwfc	5,f
  7750  0FF9  3F00               	moviw [0]fsr0
  7751  0FFA  00BA               	movwf	?_scale
  7752  0FFB  3F01               	moviw [1]fsr0
  7753  0FFC  00BB               	movwf	?_scale+1
  7754  0FFD  3F02               	moviw [2]fsr0
  7755  0FFE  00BC               	movwf	?_scale+2
  7756  0FFF  0008               	return
  7757  1000                     __end_of_scale:	
  7758                           
  7759                           	psect	text7
  7760  0C57                     __ptext7:	
  7761 ;; *************** function _fround *****************
  7762 ;; Defined at:
  7763 ;;		line 409 in file "C:\Program Files\Microchip\xc8\v1.38\sources\common\doprnt.c"
  7764 ;; Parameters:    Size  Location     Type
  7765 ;;  prec            1    wreg     unsigned char 
  7766 ;; Auto vars:     Size  Location     Type
  7767 ;;  prec            1   39[BANK0 ] unsigned char 
  7768 ;; Return value:  Size  Location     Type
  7769 ;;                  3   26[BANK0 ] unsigned char 
  7770 ;; Registers used:
  7771 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7772 ;; Tracked objects:
  7773 ;;		On entry : 0/0
  7774 ;;		On exit  : 0/0
  7775 ;;		Unchanged: 0/0
  7776 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7777 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7778 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7779 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7780 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7781 ;;Total ram usage:       14 bytes
  7782 ;; Hardware stack levels used:    1
  7783 ;; Hardware stack levels required when called:    3
  7784 ;; This function calls:
  7785 ;;		___awdiv
  7786 ;;		___awmod
  7787 ;;		___ftmul
  7788 ;;		___wmul
  7789 ;; This function is called by:
  7790 ;;		_sprintf
  7791 ;; This function uses a non-reentrant model
  7792 ;;
  7793                           
  7794                           
  7795                           ;psect for function _fround
  7796  0C57                     _fround:	
  7797                           
  7798                           ;incstack = 0
  7799                           ; Regs used in _fround: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7800                           ;fround@prec stored from wreg
  7801  0C57  0020               	movlb	0	; select bank0
  7802  0C58  00C7               	movwf	fround@prec
  7803                           
  7804                           ;doprnt.c: 413: if(prec>=110)
  7805  0C59  306E               	movlw	110
  7806  0C5A  0247               	subwf	fround@prec,w
  7807  0C5B  1C03               	skipc
  7808  0C5C  2D17               	goto	l2591
  7809                           
  7810                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  7811  0C5D  300A               	movlw	10
  7812  0C5E  00F8               	movwf	___awdiv@divisor
  7813  0C5F  3000               	movlw	0
  7814  0C60  00F9               	movwf	___awdiv@divisor+1
  7815  0C61  0847               	movf	fround@prec,w
  7816  0C62  00BD               	movwf	??_fround
  7817  0C63  01BE               	clrf	??_fround+1
  7818  0C64  083D               	movf	??_fround,w
  7819  0C65  00F3               	movwf	___awmod@dividend
  7820  0C66  083E               	movf	??_fround+1,w
  7821  0C67  00F4               	movwf	___awmod@dividend+1
  7822  0C68  3064               	movlw	100
  7823  0C69  00F1               	movwf	___awmod@divisor
  7824  0C6A  3000               	movlw	0
  7825  0C6B  00F2               	movwf	___awmod@divisor+1
  7826  0C6C  3196  26B2  318C   	fcall	___awmod
  7827  0C6F  0872               	movf	?___awmod+1,w
  7828  0C70  00FB               	movwf	___awdiv@dividend+1
  7829  0C71  0871               	movf	?___awmod,w
  7830  0C72  00FA               	movwf	___awdiv@dividend
  7831  0C73  3196  26F7  318C   	fcall	___awdiv
  7832  0C76  0878               	movf	?___awdiv,w
  7833  0C77  3E09               	addlw	9
  7834  0C78  0020               	movlb	0	; select bank0
  7835  0C79  00A4               	movwf	___wmul@multiplier
  7836  0C7A  3000               	movlw	0
  7837  0C7B  3D79               	addwfc	?___awdiv+1,w
  7838  0C7C  00A5               	movwf	___wmul@multiplier+1
  7839  0C7D  3003               	movlw	3
  7840  0C7E  00A6               	movwf	___wmul@multiplicand
  7841  0C7F  3000               	movlw	0
  7842  0C80  00A7               	movwf	___wmul@multiplicand+1
  7843  0C81  3195  2592  318C   	fcall	___wmul
  7844  0C84  0020               	movlb	0	; select bank0
  7845  0C85  0825               	movf	?___wmul+1,w
  7846  0C86  0085               	movwf	5
  7847  0C87  0824               	movf	?___wmul,w
  7848  0C88  0084               	movwf	4
  7849  0C89  3028               	movlw	low (__npowers_| (0+32768))
  7850  0C8A  0784               	addwf	4,f
  7851  0C8B  3090               	movlw	high (__npowers_| (0+32768))
  7852  0C8C  3D85               	addwfc	5,f
  7853  0C8D  3F00               	moviw [0]fsr0
  7854  0C8E  00AA               	movwf	___ftmul@f1
  7855  0C8F  3F01               	moviw [1]fsr0
  7856  0C90  00AB               	movwf	___ftmul@f1+1
  7857  0C91  3F02               	moviw [2]fsr0
  7858  0C92  00AC               	movwf	___ftmul@f1+2
  7859  0C93  3064               	movlw	100
  7860  0C94  00F8               	movwf	___awdiv@divisor
  7861  0C95  3000               	movlw	0
  7862  0C96  00F9               	movwf	___awdiv@divisor+1
  7863  0C97  0847               	movf	fround@prec,w
  7864  0C98  00BF               	movwf	??_fround+2
  7865  0C99  01C0               	clrf	??_fround+3
  7866  0C9A  083F               	movf	??_fround+2,w
  7867  0C9B  00FA               	movwf	___awdiv@dividend
  7868  0C9C  0840               	movf	??_fround+3,w
  7869  0C9D  00FB               	movwf	___awdiv@dividend+1
  7870  0C9E  3196  26F7  318C   	fcall	___awdiv
  7871  0CA1  0878               	movf	?___awdiv,w
  7872  0CA2  3E12               	addlw	18
  7873  0CA3  0020               	movlb	0	; select bank0
  7874  0CA4  00A4               	movwf	___wmul@multiplier
  7875  0CA5  3000               	movlw	0
  7876  0CA6  3D79               	addwfc	?___awdiv+1,w
  7877  0CA7  00A5               	movwf	___wmul@multiplier+1
  7878  0CA8  3003               	movlw	3
  7879  0CA9  00A6               	movwf	___wmul@multiplicand
  7880  0CAA  3000               	movlw	0
  7881  0CAB  00A7               	movwf	___wmul@multiplicand+1
  7882  0CAC  3195  2592  318C   	fcall	___wmul
  7883  0CAF  0020               	movlb	0	; select bank0
  7884  0CB0  0825               	movf	?___wmul+1,w
  7885  0CB1  0085               	movwf	5
  7886  0CB2  0824               	movf	?___wmul,w
  7887  0CB3  0084               	movwf	4
  7888  0CB4  3028               	movlw	low (__npowers_| (0+32768))
  7889  0CB5  0784               	addwf	4,f
  7890  0CB6  3090               	movlw	high (__npowers_| (0+32768))
  7891  0CB7  3D85               	addwfc	5,f
  7892  0CB8  3F00               	moviw [0]fsr0
  7893  0CB9  00AD               	movwf	___ftmul@f2
  7894  0CBA  3F01               	moviw [1]fsr0
  7895  0CBB  00AE               	movwf	___ftmul@f2+1
  7896  0CBC  3F02               	moviw [2]fsr0
  7897  0CBD  00AF               	movwf	___ftmul@f2+2
  7898  0CBE  3188  20DA  318C   	fcall	___ftmul
  7899  0CC1  0020               	movlb	0	; select bank0
  7900  0CC2  082A               	movf	?___ftmul,w
  7901  0CC3  00C4               	movwf	_fround$1320
  7902  0CC4  082B               	movf	?___ftmul+1,w
  7903  0CC5  00C5               	movwf	_fround$1320+1
  7904  0CC6  082C               	movf	?___ftmul+2,w
  7905  0CC7  00C6               	movwf	_fround$1320+2
  7906                           
  7907                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  7908  0CC8  0847               	movf	fround@prec,w
  7909  0CC9  00BD               	movwf	??_fround
  7910  0CCA  01BE               	clrf	??_fround+1
  7911  0CCB  083D               	movf	??_fround,w
  7912  0CCC  00F3               	movwf	___awmod@dividend
  7913  0CCD  083E               	movf	??_fround+1,w
  7914  0CCE  00F4               	movwf	___awmod@dividend+1
  7915  0CCF  300A               	movlw	10
  7916  0CD0  00F1               	movwf	___awmod@divisor
  7917  0CD1  3000               	movlw	0
  7918  0CD2  00F2               	movwf	___awmod@divisor+1
  7919  0CD3  3196  26B2  318C   	fcall	___awmod
  7920  0CD6  0872               	movf	?___awmod+1,w
  7921  0CD7  0020               	movlb	0	; select bank0
  7922  0CD8  00A5               	movwf	___wmul@multiplier+1
  7923  0CD9  0871               	movf	?___awmod,w
  7924  0CDA  00A4               	movwf	___wmul@multiplier
  7925  0CDB  3003               	movlw	3
  7926  0CDC  00A6               	movwf	___wmul@multiplicand
  7927  0CDD  3000               	movlw	0
  7928  0CDE  00A7               	movwf	___wmul@multiplicand+1
  7929  0CDF  3195  2592  318C   	fcall	___wmul
  7930  0CE2  0020               	movlb	0	; select bank0
  7931  0CE3  0825               	movf	?___wmul+1,w
  7932  0CE4  0085               	movwf	5
  7933  0CE5  0824               	movf	?___wmul,w
  7934  0CE6  0084               	movwf	4
  7935  0CE7  3028               	movlw	low (__npowers_| (0+32768))
  7936  0CE8  0784               	addwf	4,f
  7937  0CE9  3090               	movlw	high (__npowers_| (0+32768))
  7938  0CEA  3D85               	addwfc	5,f
  7939  0CEB  3F00               	moviw [0]fsr0
  7940  0CEC  00AA               	movwf	___ftmul@f1
  7941  0CED  3F01               	moviw [1]fsr0
  7942  0CEE  00AB               	movwf	___ftmul@f1+1
  7943  0CEF  3F02               	moviw [2]fsr0
  7944  0CF0  00AC               	movwf	___ftmul@f1+2
  7945  0CF1  0844               	movf	_fround$1320,w
  7946  0CF2  00AD               	movwf	___ftmul@f2
  7947  0CF3  0845               	movf	_fround$1320+1,w
  7948  0CF4  00AE               	movwf	___ftmul@f2+1
  7949  0CF5  0846               	movf	_fround$1320+2,w
  7950  0CF6  00AF               	movwf	___ftmul@f2+2
  7951  0CF7  3188  20DA  318C   	fcall	___ftmul
  7952  0CFA  0020               	movlb	0	; select bank0
  7953  0CFB  082A               	movf	?___ftmul,w
  7954  0CFC  00C1               	movwf	_fround$1321
  7955  0CFD  082B               	movf	?___ftmul+1,w
  7956  0CFE  00C2               	movwf	_fround$1321+1
  7957  0CFF  082C               	movf	?___ftmul+2,w
  7958  0D00  00C3               	movwf	_fround$1321+2
  7959                           
  7960                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  7961  0D01  3000               	movlw	0
  7962  0D02  00AA               	movwf	___ftmul@f1
  7963  0D03  3000               	movlw	0
  7964  0D04  00AB               	movwf	___ftmul@f1+1
  7965  0D05  303F               	movlw	63
  7966  0D06  00AC               	movwf	___ftmul@f1+2
  7967  0D07  0841               	movf	_fround$1321,w
  7968  0D08  00AD               	movwf	___ftmul@f2
  7969  0D09  0842               	movf	_fround$1321+1,w
  7970  0D0A  00AE               	movwf	___ftmul@f2+1
  7971  0D0B  0843               	movf	_fround$1321+2,w
  7972  0D0C  00AF               	movwf	___ftmul@f2+2
  7973  0D0D  3188  20DA         	fcall	___ftmul
  7974  0D0F  0020               	movlb	0	; select bank0
  7975  0D10  082A               	movf	?___ftmul,w
  7976  0D11  00BA               	movwf	?_fround
  7977  0D12  082B               	movf	?___ftmul+1,w
  7978  0D13  00BB               	movwf	?_fround+1
  7979  0D14  082C               	movf	?___ftmul+2,w
  7980  0D15  00BC               	movwf	?_fround+2
  7981  0D16  0008               	return
  7982  0D17                     l2591:	
  7983                           
  7984                           ;doprnt.c: 415: else if(prec > 10)
  7985  0D17  300B               	movlw	11
  7986  0D18  0247               	subwf	fround@prec,w
  7987  0D19  1C03               	skipc
  7988  0D1A  2D8F               	goto	l2599
  7989                           
  7990                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  7991  0D1B  0847               	movf	fround@prec,w
  7992  0D1C  00BD               	movwf	??_fround
  7993  0D1D  01BE               	clrf	??_fround+1
  7994  0D1E  083D               	movf	??_fround,w
  7995  0D1F  00F3               	movwf	___awmod@dividend
  7996  0D20  083E               	movf	??_fround+1,w
  7997  0D21  00F4               	movwf	___awmod@dividend+1
  7998  0D22  300A               	movlw	10
  7999  0D23  00F1               	movwf	___awmod@divisor
  8000  0D24  3000               	movlw	0
  8001  0D25  00F2               	movwf	___awmod@divisor+1
  8002  0D26  3196  26B2  318C   	fcall	___awmod
  8003  0D29  0872               	movf	?___awmod+1,w
  8004  0D2A  0020               	movlb	0	; select bank0
  8005  0D2B  00A5               	movwf	___wmul@multiplier+1
  8006  0D2C  0871               	movf	?___awmod,w
  8007  0D2D  00A4               	movwf	___wmul@multiplier
  8008  0D2E  3003               	movlw	3
  8009  0D2F  00A6               	movwf	___wmul@multiplicand
  8010  0D30  3000               	movlw	0
  8011  0D31  00A7               	movwf	___wmul@multiplicand+1
  8012  0D32  3195  2592  318C   	fcall	___wmul
  8013  0D35  0020               	movlb	0	; select bank0
  8014  0D36  0825               	movf	?___wmul+1,w
  8015  0D37  0085               	movwf	5
  8016  0D38  0824               	movf	?___wmul,w
  8017  0D39  0084               	movwf	4
  8018  0D3A  3028               	movlw	low (__npowers_| (0+32768))
  8019  0D3B  0784               	addwf	4,f
  8020  0D3C  3090               	movlw	high (__npowers_| (0+32768))
  8021  0D3D  3D85               	addwfc	5,f
  8022  0D3E  3F00               	moviw [0]fsr0
  8023  0D3F  00AA               	movwf	___ftmul@f1
  8024  0D40  3F01               	moviw [1]fsr0
  8025  0D41  00AB               	movwf	___ftmul@f1+1
  8026  0D42  3F02               	moviw [2]fsr0
  8027  0D43  00AC               	movwf	___ftmul@f1+2
  8028  0D44  300A               	movlw	10
  8029  0D45  00F8               	movwf	___awdiv@divisor
  8030  0D46  3000               	movlw	0
  8031  0D47  00F9               	movwf	___awdiv@divisor+1
  8032  0D48  0847               	movf	fround@prec,w
  8033  0D49  00BF               	movwf	??_fround+2
  8034  0D4A  01C0               	clrf	??_fround+3
  8035  0D4B  083F               	movf	??_fround+2,w
  8036  0D4C  00FA               	movwf	___awdiv@dividend
  8037  0D4D  0840               	movf	??_fround+3,w
  8038  0D4E  00FB               	movwf	___awdiv@dividend+1
  8039  0D4F  3196  26F7  318C   	fcall	___awdiv
  8040  0D52  0878               	movf	?___awdiv,w
  8041  0D53  3E09               	addlw	9
  8042  0D54  0020               	movlb	0	; select bank0
  8043  0D55  00A4               	movwf	___wmul@multiplier
  8044  0D56  3000               	movlw	0
  8045  0D57  3D79               	addwfc	?___awdiv+1,w
  8046  0D58  00A5               	movwf	___wmul@multiplier+1
  8047  0D59  3003               	movlw	3
  8048  0D5A  00A6               	movwf	___wmul@multiplicand
  8049  0D5B  3000               	movlw	0
  8050  0D5C  00A7               	movwf	___wmul@multiplicand+1
  8051  0D5D  3195  2592  318C   	fcall	___wmul
  8052  0D60  0020               	movlb	0	; select bank0
  8053  0D61  0825               	movf	?___wmul+1,w
  8054  0D62  0085               	movwf	5
  8055  0D63  0824               	movf	?___wmul,w
  8056  0D64  0084               	movwf	4
  8057  0D65  3028               	movlw	low (__npowers_| (0+32768))
  8058  0D66  0784               	addwf	4,f
  8059  0D67  3090               	movlw	high (__npowers_| (0+32768))
  8060  0D68  3D85               	addwfc	5,f
  8061  0D69  3F00               	moviw [0]fsr0
  8062  0D6A  00AD               	movwf	___ftmul@f2
  8063  0D6B  3F01               	moviw [1]fsr0
  8064  0D6C  00AE               	movwf	___ftmul@f2+1
  8065  0D6D  3F02               	moviw [2]fsr0
  8066  0D6E  00AF               	movwf	___ftmul@f2+2
  8067  0D6F  3188  20DA  318C   	fcall	___ftmul
  8068  0D72  0020               	movlb	0	; select bank0
  8069  0D73  082A               	movf	?___ftmul,w
  8070  0D74  00C4               	movwf	_fround$1320
  8071  0D75  082B               	movf	?___ftmul+1,w
  8072  0D76  00C5               	movwf	_fround$1320+1
  8073  0D77  082C               	movf	?___ftmul+2,w
  8074  0D78  00C6               	movwf	_fround$1320+2
  8075                           
  8076                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  8077  0D79  3000               	movlw	0
  8078  0D7A  00AA               	movwf	___ftmul@f1
  8079  0D7B  3000               	movlw	0
  8080  0D7C  00AB               	movwf	___ftmul@f1+1
  8081  0D7D  303F               	movlw	63
  8082  0D7E  00AC               	movwf	___ftmul@f1+2
  8083  0D7F  0844               	movf	_fround$1320,w
  8084  0D80  00AD               	movwf	___ftmul@f2
  8085  0D81  0845               	movf	_fround$1320+1,w
  8086  0D82  00AE               	movwf	___ftmul@f2+1
  8087  0D83  0846               	movf	_fround$1320+2,w
  8088  0D84  00AF               	movwf	___ftmul@f2+2
  8089  0D85  3188  20DA         	fcall	___ftmul
  8090  0D87  0020               	movlb	0	; select bank0
  8091  0D88  082A               	movf	?___ftmul,w
  8092  0D89  00BA               	movwf	?_fround
  8093  0D8A  082B               	movf	?___ftmul+1,w
  8094  0D8B  00BB               	movwf	?_fround+1
  8095  0D8C  082C               	movf	?___ftmul+2,w
  8096  0D8D  00BC               	movwf	?_fround+2
  8097  0D8E  0008               	return
  8098  0D8F                     l2599:	
  8099                           
  8100                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  8101  0D8F  3000               	movlw	0
  8102  0D90  00AA               	movwf	___ftmul@f1
  8103  0D91  3000               	movlw	0
  8104  0D92  00AB               	movwf	___ftmul@f1+1
  8105  0D93  303F               	movlw	63
  8106  0D94  00AC               	movwf	___ftmul@f1+2
  8107  0D95  0847               	movf	fround@prec,w
  8108  0D96  00BD               	movwf	??_fround
  8109  0D97  01BE               	clrf	??_fround+1
  8110  0D98  083D               	movf	??_fround,w
  8111  0D99  00A4               	movwf	___wmul@multiplier
  8112  0D9A  083E               	movf	??_fround+1,w
  8113  0D9B  00A5               	movwf	___wmul@multiplier+1
  8114  0D9C  3003               	movlw	3
  8115  0D9D  00A6               	movwf	___wmul@multiplicand
  8116  0D9E  3000               	movlw	0
  8117  0D9F  00A7               	movwf	___wmul@multiplicand+1
  8118  0DA0  3195  2592  318C   	fcall	___wmul
  8119  0DA3  0020               	movlb	0	; select bank0
  8120  0DA4  0825               	movf	?___wmul+1,w
  8121  0DA5  0085               	movwf	5
  8122  0DA6  0824               	movf	?___wmul,w
  8123  0DA7  0084               	movwf	4
  8124  0DA8  3028               	movlw	low (__npowers_| (0+32768))
  8125  0DA9  0784               	addwf	4,f
  8126  0DAA  3090               	movlw	high (__npowers_| (0+32768))
  8127  0DAB  3D85               	addwfc	5,f
  8128  0DAC  3F00               	moviw [0]fsr0
  8129  0DAD  00AD               	movwf	___ftmul@f2
  8130  0DAE  3F01               	moviw [1]fsr0
  8131  0DAF  00AE               	movwf	___ftmul@f2+1
  8132  0DB0  3F02               	moviw [2]fsr0
  8133  0DB1  00AF               	movwf	___ftmul@f2+2
  8134  0DB2  3188  20DA         	fcall	___ftmul
  8135  0DB4  0020               	movlb	0	; select bank0
  8136  0DB5  082A               	movf	?___ftmul,w
  8137  0DB6  00BA               	movwf	?_fround
  8138  0DB7  082B               	movf	?___ftmul+1,w
  8139  0DB8  00BB               	movwf	?_fround+1
  8140  0DB9  082C               	movf	?___ftmul+2,w
  8141  0DBA  00BC               	movwf	?_fround+2
  8142  0DBB  0008               	return
  8143  0DBC                     __end_of_fround:	
  8144                           
  8145                           	psect	text8
  8146  1592                     __ptext8:	
  8147 ;; *************** function ___wmul *****************
  8148 ;; Defined at:
  8149 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.38\sources\common\Umul16.c"
  8150 ;; Parameters:    Size  Location     Type
  8151 ;;  multiplier      2    4[BANK0 ] unsigned int 
  8152 ;;  multiplicand    2    6[BANK0 ] unsigned int 
  8153 ;; Auto vars:     Size  Location     Type
  8154 ;;  product         2    8[BANK0 ] unsigned int 
  8155 ;; Return value:  Size  Location     Type
  8156 ;;                  2    4[BANK0 ] unsigned int 
  8157 ;; Registers used:
  8158 ;;		wreg, status,2, status,0
  8159 ;; Tracked objects:
  8160 ;;		On entry : 0/0
  8161 ;;		On exit  : 0/0
  8162 ;;		Unchanged: 0/0
  8163 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8164 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8165 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8166 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8167 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8168 ;;Total ram usage:        6 bytes
  8169 ;; Hardware stack levels used:    1
  8170 ;; Hardware stack levels required when called:    1
  8171 ;; This function calls:
  8172 ;;		Nothing
  8173 ;; This function is called by:
  8174 ;;		_fround
  8175 ;;		_scale
  8176 ;;		_sprintf
  8177 ;; This function uses a non-reentrant model
  8178 ;;
  8179                           
  8180                           
  8181                           ;psect for function ___wmul
  8182  1592                     ___wmul:	
  8183                           
  8184                           ;incstack = 0
  8185                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  8186  1592  0020               	movlb	0	; select bank0
  8187  1593  01A8               	clrf	___wmul@product
  8188  1594  01A9               	clrf	___wmul@product+1
  8189  1595                     l2363:	
  8190  1595  1C24               	btfss	___wmul@multiplier,0
  8191  1596  2D9B               	goto	l653
  8192  1597  0826               	movf	___wmul@multiplicand,w
  8193  1598  07A8               	addwf	___wmul@product,f
  8194  1599  0827               	movf	___wmul@multiplicand+1,w
  8195  159A  3DA9               	addwfc	___wmul@product+1,f
  8196  159B                     l653:	
  8197  159B  3001               	movlw	1
  8198  159C                     u1995:	
  8199  159C  35A6               	lslf	___wmul@multiplicand,f
  8200  159D  0DA7               	rlf	___wmul@multiplicand+1,f
  8201  159E  0B89               	decfsz	9,f
  8202  159F  2D9C               	goto	u1995
  8203  15A0  3001               	movlw	1
  8204  15A1                     u2005:	
  8205  15A1  36A5               	lsrf	___wmul@multiplier+1,f
  8206  15A2  0CA4               	rrf	___wmul@multiplier,f
  8207  15A3  0B89               	decfsz	9,f
  8208  15A4  2DA1               	goto	u2005
  8209  15A5  0824               	movf	___wmul@multiplier,w
  8210  15A6  0425               	iorwf	___wmul@multiplier+1,w
  8211  15A7  1D03               	btfss	3,2
  8212  15A8  2D95               	goto	l2363
  8213  15A9  0829               	movf	___wmul@product+1,w
  8214  15AA  00A5               	movwf	?___wmul+1
  8215  15AB  0828               	movf	___wmul@product,w
  8216  15AC  00A4               	movwf	?___wmul
  8217  15AD  0008               	return
  8218  15AE                     __end_of___wmul:	
  8219                           
  8220                           	psect	text9
  8221  08DA                     __ptext9:	
  8222 ;; *************** function ___ftmul *****************
  8223 ;; Defined at:
  8224 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v1.38\sources\common\ftmul.c"
  8225 ;; Parameters:    Size  Location     Type
  8226 ;;  f1              3   10[BANK0 ] float 
  8227 ;;  f2              3   13[BANK0 ] float 
  8228 ;; Auto vars:     Size  Location     Type
  8229 ;;  f3_as_produc    3   21[BANK0 ] unsigned um
  8230 ;;  sign            1   25[BANK0 ] unsigned char 
  8231 ;;  cntr            1   24[BANK0 ] unsigned char 
  8232 ;;  exp             1   20[BANK0 ] unsigned char 
  8233 ;; Return value:  Size  Location     Type
  8234 ;;                  3   10[BANK0 ] float 
  8235 ;; Registers used:
  8236 ;;		wreg, status,2, status,0, pclath, cstack
  8237 ;; Tracked objects:
  8238 ;;		On entry : 0/0
  8239 ;;		On exit  : 0/0
  8240 ;;		Unchanged: 0/0
  8241 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8242 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8243 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8244 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8245 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8246 ;;Total ram usage:       16 bytes
  8247 ;; Hardware stack levels used:    1
  8248 ;; Hardware stack levels required when called:    2
  8249 ;; This function calls:
  8250 ;;		___ftpack
  8251 ;; This function is called by:
  8252 ;;		_main
  8253 ;;		_fround
  8254 ;;		_scale
  8255 ;;		_sprintf
  8256 ;; This function uses a non-reentrant model
  8257 ;;
  8258                           
  8259                           
  8260                           ;psect for function ___ftmul
  8261  08DA                     ___ftmul:	
  8262                           
  8263                           ;incstack = 0
  8264                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  8265  08DA  0020               	movlb	0	; select bank0
  8266  08DB  082A               	movf	___ftmul@f1,w
  8267  08DC  00B0               	movwf	??___ftmul
  8268  08DD  082B               	movf	___ftmul@f1+1,w
  8269  08DE  00B1               	movwf	??___ftmul+1
  8270  08DF  082C               	movf	___ftmul@f1+2,w
  8271  08E0  00B2               	movwf	??___ftmul+2
  8272  08E1  1003               	clrc
  8273  08E2  0D31               	rlf	??___ftmul+1,w
  8274  08E3  0D32               	rlf	??___ftmul+2,w
  8275  08E4  00B3               	movwf	??___ftmul+3
  8276  08E5  0833               	movf	??___ftmul+3,w
  8277  08E6  00B4               	movwf	___ftmul@exp
  8278  08E7  0834               	movf	___ftmul@exp,w
  8279  08E8  1D03               	btfss	3,2
  8280  08E9  28F1               	goto	l2533
  8281  08EA  3000               	movlw	0
  8282  08EB  00AA               	movwf	?___ftmul
  8283  08EC  3000               	movlw	0
  8284  08ED  00AB               	movwf	?___ftmul+1
  8285  08EE  3000               	movlw	0
  8286  08EF  00AC               	movwf	?___ftmul+2
  8287  08F0  0008               	return
  8288  08F1                     l2533:	
  8289  08F1  082D               	movf	___ftmul@f2,w
  8290  08F2  00B0               	movwf	??___ftmul
  8291  08F3  082E               	movf	___ftmul@f2+1,w
  8292  08F4  00B1               	movwf	??___ftmul+1
  8293  08F5  082F               	movf	___ftmul@f2+2,w
  8294  08F6  00B2               	movwf	??___ftmul+2
  8295  08F7  1003               	clrc
  8296  08F8  0D31               	rlf	??___ftmul+1,w
  8297  08F9  0D32               	rlf	??___ftmul+2,w
  8298  08FA  00B3               	movwf	??___ftmul+3
  8299  08FB  0833               	movf	??___ftmul+3,w
  8300  08FC  00B9               	movwf	___ftmul@sign
  8301  08FD  0839               	movf	___ftmul@sign,w
  8302  08FE  1D03               	btfss	3,2
  8303  08FF  2907               	goto	l2539
  8304  0900  3000               	movlw	0
  8305  0901  00AA               	movwf	?___ftmul
  8306  0902  3000               	movlw	0
  8307  0903  00AB               	movwf	?___ftmul+1
  8308  0904  3000               	movlw	0
  8309  0905  00AC               	movwf	?___ftmul+2
  8310  0906  0008               	return
  8311  0907                     l2539:	
  8312  0907  0839               	movf	___ftmul@sign,w
  8313  0908  3E7B               	addlw	123
  8314  0909  00B0               	movwf	??___ftmul
  8315  090A  0830               	movf	??___ftmul,w
  8316  090B  07B4               	addwf	___ftmul@exp,f
  8317  090C  082A               	movf	___ftmul@f1,w
  8318  090D  00B0               	movwf	??___ftmul
  8319  090E  082B               	movf	___ftmul@f1+1,w
  8320  090F  00B1               	movwf	??___ftmul+1
  8321  0910  082C               	movf	___ftmul@f1+2,w
  8322  0911  00B2               	movwf	??___ftmul+2
  8323  0912  3010               	movlw	16
  8324  0913                     u2465:	
  8325  0913  36B2               	lsrf	??___ftmul+2,f
  8326  0914  0CB1               	rrf	??___ftmul+1,f
  8327  0915  0CB0               	rrf	??___ftmul,f
  8328  0916  0B89               	decfsz	9,f
  8329  0917  2913               	goto	u2465
  8330  0918  0830               	movf	??___ftmul,w
  8331  0919  00B3               	movwf	??___ftmul+3
  8332  091A  0833               	movf	??___ftmul+3,w
  8333  091B  00B9               	movwf	___ftmul@sign
  8334  091C  082D               	movf	___ftmul@f2,w
  8335  091D  00B0               	movwf	??___ftmul
  8336  091E  082E               	movf	___ftmul@f2+1,w
  8337  091F  00B1               	movwf	??___ftmul+1
  8338  0920  082F               	movf	___ftmul@f2+2,w
  8339  0921  00B2               	movwf	??___ftmul+2
  8340  0922  3010               	movlw	16
  8341  0923                     u2475:	
  8342  0923  36B2               	lsrf	??___ftmul+2,f
  8343  0924  0CB1               	rrf	??___ftmul+1,f
  8344  0925  0CB0               	rrf	??___ftmul,f
  8345  0926  0B89               	decfsz	9,f
  8346  0927  2923               	goto	u2475
  8347  0928  0830               	movf	??___ftmul,w
  8348  0929  00B3               	movwf	??___ftmul+3
  8349  092A  0833               	movf	??___ftmul+3,w
  8350  092B  06B9               	xorwf	___ftmul@sign,f
  8351  092C  3080               	movlw	128
  8352  092D  00B0               	movwf	??___ftmul
  8353  092E  0830               	movf	??___ftmul,w
  8354  092F  05B9               	andwf	___ftmul@sign,f
  8355  0930  17AB               	bsf	___ftmul@f1+1,7
  8356  0931  17AE               	bsf	___ftmul@f2+1,7
  8357  0932  30FF               	movlw	255
  8358  0933  05AD               	andwf	___ftmul@f2,f
  8359  0934  30FF               	movlw	255
  8360  0935  05AE               	andwf	___ftmul@f2+1,f
  8361  0936  3000               	movlw	0
  8362  0937  05AF               	andwf	___ftmul@f2+2,f
  8363  0938  3000               	movlw	0
  8364  0939  00B5               	movwf	___ftmul@f3_as_product
  8365  093A  3000               	movlw	0
  8366  093B  00B6               	movwf	___ftmul@f3_as_product+1
  8367  093C  3000               	movlw	0
  8368  093D  00B7               	movwf	___ftmul@f3_as_product+2
  8369  093E  3007               	movlw	7
  8370  093F  00B0               	movwf	??___ftmul
  8371  0940  0830               	movf	??___ftmul,w
  8372  0941  00B8               	movwf	___ftmul@cntr
  8373  0942                     l2551:	
  8374  0942  1C2A               	btfss	___ftmul@f1,0
  8375  0943  294A               	goto	l2555
  8376  0944  082D               	movf	___ftmul@f2,w
  8377  0945  07B5               	addwf	___ftmul@f3_as_product,f
  8378  0946  082E               	movf	___ftmul@f2+1,w
  8379  0947  3DB6               	addwfc	___ftmul@f3_as_product+1,f
  8380  0948  082F               	movf	___ftmul@f2+2,w
  8381  0949  3DB7               	addwfc	___ftmul@f3_as_product+2,f
  8382  094A                     l2555:	
  8383  094A  3001               	movlw	1
  8384  094B                     u2495:	
  8385  094B  36AC               	lsrf	___ftmul@f1+2,f
  8386  094C  0CAB               	rrf	___ftmul@f1+1,f
  8387  094D  0CAA               	rrf	___ftmul@f1,f
  8388  094E  0B89               	decfsz	9,f
  8389  094F  294B               	goto	u2495
  8390  0950  3001               	movlw	1
  8391  0951                     u2505:	
  8392  0951  35AD               	lslf	___ftmul@f2,f
  8393  0952  0DAE               	rlf	___ftmul@f2+1,f
  8394  0953  0DAF               	rlf	___ftmul@f2+2,f
  8395  0954  0B89               	decfsz	9,f
  8396  0955  2951               	goto	u2505
  8397  0956  3001               	movlw	1
  8398  0957  02B8               	subwf	___ftmul@cntr,f
  8399  0958  1D03               	btfss	3,2
  8400  0959  2942               	goto	l2551
  8401  095A  3009               	movlw	9
  8402  095B  00B0               	movwf	??___ftmul
  8403  095C  0830               	movf	??___ftmul,w
  8404  095D  00B8               	movwf	___ftmul@cntr
  8405  095E                     l2563:	
  8406  095E  1C2A               	btfss	___ftmul@f1,0
  8407  095F  2966               	goto	l2567
  8408  0960  082D               	movf	___ftmul@f2,w
  8409  0961  07B5               	addwf	___ftmul@f3_as_product,f
  8410  0962  082E               	movf	___ftmul@f2+1,w
  8411  0963  3DB6               	addwfc	___ftmul@f3_as_product+1,f
  8412  0964  082F               	movf	___ftmul@f2+2,w
  8413  0965  3DB7               	addwfc	___ftmul@f3_as_product+2,f
  8414  0966                     l2567:	
  8415  0966  3001               	movlw	1
  8416  0967                     u2535:	
  8417  0967  36AC               	lsrf	___ftmul@f1+2,f
  8418  0968  0CAB               	rrf	___ftmul@f1+1,f
  8419  0969  0CAA               	rrf	___ftmul@f1,f
  8420  096A  0B89               	decfsz	9,f
  8421  096B  2967               	goto	u2535
  8422  096C  3001               	movlw	1
  8423  096D                     u2545:	
  8424  096D  36B7               	lsrf	___ftmul@f3_as_product+2,f
  8425  096E  0CB6               	rrf	___ftmul@f3_as_product+1,f
  8426  096F  0CB5               	rrf	___ftmul@f3_as_product,f
  8427  0970  0B89               	decfsz	9,f
  8428  0971  296D               	goto	u2545
  8429  0972  3001               	movlw	1
  8430  0973  02B8               	subwf	___ftmul@cntr,f
  8431  0974  1D03               	btfss	3,2
  8432  0975  295E               	goto	l2563
  8433  0976  0835               	movf	___ftmul@f3_as_product,w
  8434  0977  00F1               	movwf	___ftpack@arg
  8435  0978  0836               	movf	___ftmul@f3_as_product+1,w
  8436  0979  00F2               	movwf	___ftpack@arg+1
  8437  097A  0837               	movf	___ftmul@f3_as_product+2,w
  8438  097B  00F3               	movwf	___ftpack@arg+2
  8439  097C  0834               	movf	___ftmul@exp,w
  8440  097D  00B0               	movwf	??___ftmul
  8441  097E  0830               	movf	??___ftmul,w
  8442  097F  00F4               	movwf	___ftpack@exp
  8443  0980  0839               	movf	___ftmul@sign,w
  8444  0981  00B1               	movwf	??___ftmul+1
  8445  0982  0831               	movf	??___ftmul+1,w
  8446  0983  00F5               	movwf	___ftpack@sign
  8447  0984  3197  279C         	fcall	___ftpack
  8448  0986  0871               	movf	?___ftpack,w
  8449  0987  0020               	movlb	0	; select bank0
  8450  0988  00AA               	movwf	?___ftmul
  8451  0989  0872               	movf	?___ftpack+1,w
  8452  098A  00AB               	movwf	?___ftmul+1
  8453  098B  0873               	movf	?___ftpack+2,w
  8454  098C  00AC               	movwf	?___ftmul+2
  8455  098D  0008               	return
  8456  098E                     __end_of___ftmul:	
  8457                           
  8458                           	psect	text10
  8459  16B2                     __ptext10:	
  8460 ;; *************** function ___awmod *****************
  8461 ;; Defined at:
  8462 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.38\sources\common\awmod.c"
  8463 ;; Parameters:    Size  Location     Type
  8464 ;;  divisor         2    1[COMMON] int 
  8465 ;;  dividend        2    3[COMMON] int 
  8466 ;; Auto vars:     Size  Location     Type
  8467 ;;  sign            1    7[COMMON] unsigned char 
  8468 ;;  counter         1    6[COMMON] unsigned char 
  8469 ;; Return value:  Size  Location     Type
  8470 ;;                  2    1[COMMON] int 
  8471 ;; Registers used:
  8472 ;;		wreg, status,2, status,0
  8473 ;; Tracked objects:
  8474 ;;		On entry : 0/0
  8475 ;;		On exit  : 0/0
  8476 ;;		Unchanged: 0/0
  8477 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8478 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8479 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8480 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8481 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8482 ;;Total ram usage:        7 bytes
  8483 ;; Hardware stack levels used:    1
  8484 ;; Hardware stack levels required when called:    1
  8485 ;; This function calls:
  8486 ;;		Nothing
  8487 ;; This function is called by:
  8488 ;;		_fround
  8489 ;;		_scale
  8490 ;; This function uses a non-reentrant model
  8491 ;;
  8492                           
  8493                           
  8494                           ;psect for function ___awmod
  8495  16B2                     ___awmod:	
  8496                           
  8497                           ;incstack = 0
  8498                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  8499  16B2  01F7               	clrf	___awmod@sign
  8500  16B3  1FF4               	btfss	___awmod@dividend+1,7
  8501  16B4  2EBC               	goto	l2427
  8502  16B5  09F3               	comf	___awmod@dividend,f
  8503  16B6  09F4               	comf	___awmod@dividend+1,f
  8504  16B7  0AF3               	incf	___awmod@dividend,f
  8505  16B8  1903               	skipnz
  8506  16B9  0AF4               	incf	___awmod@dividend+1,f
  8507  16BA  01F7               	clrf	___awmod@sign
  8508  16BB  0AF7               	incf	___awmod@sign,f
  8509  16BC                     l2427:	
  8510  16BC  1FF2               	btfss	___awmod@divisor+1,7
  8511  16BD  2EC3               	goto	l2431
  8512  16BE  09F1               	comf	___awmod@divisor,f
  8513  16BF  09F2               	comf	___awmod@divisor+1,f
  8514  16C0  0AF1               	incf	___awmod@divisor,f
  8515  16C1  1903               	skipnz
  8516  16C2  0AF2               	incf	___awmod@divisor+1,f
  8517  16C3                     l2431:	
  8518  16C3  0871               	movf	___awmod@divisor,w
  8519  16C4  0472               	iorwf	___awmod@divisor+1,w
  8520  16C5  1903               	btfsc	3,2
  8521  16C6  2EEA               	goto	l2449
  8522  16C7  01F6               	clrf	___awmod@counter
  8523  16C8  0AF6               	incf	___awmod@counter,f
  8524  16C9                     l2439:	
  8525  16C9  1BF2               	btfsc	___awmod@divisor+1,7
  8526  16CA  2ED5               	goto	l2441
  8527  16CB  3001               	movlw	1
  8528  16CC                     u2155:	
  8529  16CC  35F1               	lslf	___awmod@divisor,f
  8530  16CD  0DF2               	rlf	___awmod@divisor+1,f
  8531  16CE  0B89               	decfsz	9,f
  8532  16CF  2ECC               	goto	u2155
  8533  16D0  3001               	movlw	1
  8534  16D1  00F5               	movwf	??___awmod
  8535  16D2  0875               	movf	??___awmod,w
  8536  16D3  07F6               	addwf	___awmod@counter,f
  8537  16D4  2EC9               	goto	l2439
  8538  16D5                     l2441:	
  8539  16D5  0872               	movf	___awmod@divisor+1,w
  8540  16D6  0274               	subwf	___awmod@dividend+1,w
  8541  16D7  1D03               	skipz
  8542  16D8  2EDB               	goto	u2175
  8543  16D9  0871               	movf	___awmod@divisor,w
  8544  16DA  0273               	subwf	___awmod@dividend,w
  8545  16DB                     u2175:	
  8546  16DB  1C03               	skipc
  8547  16DC  2EE1               	goto	l2445
  8548  16DD  0871               	movf	___awmod@divisor,w
  8549  16DE  02F3               	subwf	___awmod@dividend,f
  8550  16DF  0872               	movf	___awmod@divisor+1,w
  8551  16E0  3BF4               	subwfb	___awmod@dividend+1,f
  8552  16E1                     l2445:	
  8553  16E1  3001               	movlw	1
  8554  16E2                     u2185:	
  8555  16E2  36F2               	lsrf	___awmod@divisor+1,f
  8556  16E3  0CF1               	rrf	___awmod@divisor,f
  8557  16E4  0B89               	decfsz	9,f
  8558  16E5  2EE2               	goto	u2185
  8559  16E6  3001               	movlw	1
  8560  16E7  02F6               	subwf	___awmod@counter,f
  8561  16E8  1D03               	btfss	3,2
  8562  16E9  2ED5               	goto	l2441
  8563  16EA                     l2449:	
  8564  16EA  0877               	movf	___awmod@sign,w
  8565  16EB  1903               	btfsc	3,2
  8566  16EC  2EF2               	goto	l2453
  8567  16ED  09F3               	comf	___awmod@dividend,f
  8568  16EE  09F4               	comf	___awmod@dividend+1,f
  8569  16EF  0AF3               	incf	___awmod@dividend,f
  8570  16F0  1903               	skipnz
  8571  16F1  0AF4               	incf	___awmod@dividend+1,f
  8572  16F2                     l2453:	
  8573  16F2  0874               	movf	___awmod@dividend+1,w
  8574  16F3  00F2               	movwf	?___awmod+1
  8575  16F4  0873               	movf	___awmod@dividend,w
  8576  16F5  00F1               	movwf	?___awmod
  8577  16F6  0008               	return
  8578  16F7                     __end_of___awmod:	
  8579                           
  8580                           	psect	text11
  8581  16F7                     __ptext11:	
  8582 ;; *************** function ___awdiv *****************
  8583 ;; Defined at:
  8584 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.38\sources\common\awdiv.c"
  8585 ;; Parameters:    Size  Location     Type
  8586 ;;  divisor         2    8[COMMON] int 
  8587 ;;  dividend        2   10[COMMON] int 
  8588 ;; Auto vars:     Size  Location     Type
  8589 ;;  quotient        2    2[BANK0 ] int 
  8590 ;;  sign            1    1[BANK0 ] unsigned char 
  8591 ;;  counter         1    0[BANK0 ] unsigned char 
  8592 ;; Return value:  Size  Location     Type
  8593 ;;                  2    8[COMMON] int 
  8594 ;; Registers used:
  8595 ;;		wreg, status,2, status,0
  8596 ;; Tracked objects:
  8597 ;;		On entry : 0/0
  8598 ;;		On exit  : 0/0
  8599 ;;		Unchanged: 0/0
  8600 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8601 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8602 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8603 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8604 ;;      Totals:         5       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8605 ;;Total ram usage:        9 bytes
  8606 ;; Hardware stack levels used:    1
  8607 ;; Hardware stack levels required when called:    1
  8608 ;; This function calls:
  8609 ;;		Nothing
  8610 ;; This function is called by:
  8611 ;;		_fround
  8612 ;;		_scale
  8613 ;;		_sprintf
  8614 ;; This function uses a non-reentrant model
  8615 ;;
  8616                           
  8617                           
  8618                           ;psect for function ___awdiv
  8619  16F7                     ___awdiv:	
  8620                           
  8621                           ;incstack = 0
  8622                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  8623  16F7  0020               	movlb	0	; select bank0
  8624  16F8  01A1               	clrf	___awdiv@sign
  8625  16F9  1FF9               	btfss	___awdiv@divisor+1,7
  8626  16FA  2F02               	goto	l2383
  8627  16FB  09F8               	comf	___awdiv@divisor,f
  8628  16FC  09F9               	comf	___awdiv@divisor+1,f
  8629  16FD  0AF8               	incf	___awdiv@divisor,f
  8630  16FE  1903               	skipnz
  8631  16FF  0AF9               	incf	___awdiv@divisor+1,f
  8632  1700  01A1               	clrf	___awdiv@sign
  8633  1701  0AA1               	incf	___awdiv@sign,f
  8634  1702                     l2383:	
  8635  1702  1FFB               	btfss	___awdiv@dividend+1,7
  8636  1703  2F0D               	goto	l2389
  8637  1704  09FA               	comf	___awdiv@dividend,f
  8638  1705  09FB               	comf	___awdiv@dividend+1,f
  8639  1706  0AFA               	incf	___awdiv@dividend,f
  8640  1707  1903               	skipnz
  8641  1708  0AFB               	incf	___awdiv@dividend+1,f
  8642  1709  3001               	movlw	1
  8643  170A  00FC               	movwf	??___awdiv
  8644  170B  087C               	movf	??___awdiv,w
  8645  170C  06A1               	xorwf	___awdiv@sign,f
  8646  170D                     l2389:	
  8647  170D  01A2               	clrf	___awdiv@quotient
  8648  170E  01A3               	clrf	___awdiv@quotient+1
  8649  170F  0878               	movf	___awdiv@divisor,w
  8650  1710  0479               	iorwf	___awdiv@divisor+1,w
  8651  1711  1903               	btfsc	3,2
  8652  1712  2F3C               	goto	l2411
  8653  1713  01A0               	clrf	___awdiv@counter
  8654  1714  0AA0               	incf	___awdiv@counter,f
  8655  1715                     l2399:	
  8656  1715  1BF9               	btfsc	___awdiv@divisor+1,7
  8657  1716  2F21               	goto	l2401
  8658  1717  3001               	movlw	1
  8659  1718                     u2055:	
  8660  1718  35F8               	lslf	___awdiv@divisor,f
  8661  1719  0DF9               	rlf	___awdiv@divisor+1,f
  8662  171A  0B89               	decfsz	9,f
  8663  171B  2F18               	goto	u2055
  8664  171C  3001               	movlw	1
  8665  171D  00FC               	movwf	??___awdiv
  8666  171E  087C               	movf	??___awdiv,w
  8667  171F  07A0               	addwf	___awdiv@counter,f
  8668  1720  2F15               	goto	l2399
  8669  1721                     l2401:	
  8670  1721  3001               	movlw	1
  8671  1722                     u2075:	
  8672  1722  35A2               	lslf	___awdiv@quotient,f
  8673  1723  0DA3               	rlf	___awdiv@quotient+1,f
  8674  1724  0B89               	decfsz	9,f
  8675  1725  2F22               	goto	u2075
  8676  1726  0879               	movf	___awdiv@divisor+1,w
  8677  1727  027B               	subwf	___awdiv@dividend+1,w
  8678  1728  1D03               	skipz
  8679  1729  2F2C               	goto	u2085
  8680  172A  0878               	movf	___awdiv@divisor,w
  8681  172B  027A               	subwf	___awdiv@dividend,w
  8682  172C                     u2085:	
  8683  172C  1C03               	skipc
  8684  172D  2F33               	goto	l2407
  8685  172E  0878               	movf	___awdiv@divisor,w
  8686  172F  02FA               	subwf	___awdiv@dividend,f
  8687  1730  0879               	movf	___awdiv@divisor+1,w
  8688  1731  3BFB               	subwfb	___awdiv@dividend+1,f
  8689  1732  1422               	bsf	___awdiv@quotient,0
  8690  1733                     l2407:	
  8691  1733  3001               	movlw	1
  8692  1734                     u2095:	
  8693  1734  36F9               	lsrf	___awdiv@divisor+1,f
  8694  1735  0CF8               	rrf	___awdiv@divisor,f
  8695  1736  0B89               	decfsz	9,f
  8696  1737  2F34               	goto	u2095
  8697  1738  3001               	movlw	1
  8698  1739  02A0               	subwf	___awdiv@counter,f
  8699  173A  1D03               	btfss	3,2
  8700  173B  2F21               	goto	l2401
  8701  173C                     l2411:	
  8702  173C  0821               	movf	___awdiv@sign,w
  8703  173D  1903               	btfsc	3,2
  8704  173E  2F44               	goto	l2415
  8705  173F  09A2               	comf	___awdiv@quotient,f
  8706  1740  09A3               	comf	___awdiv@quotient+1,f
  8707  1741  0AA2               	incf	___awdiv@quotient,f
  8708  1742  1903               	skipnz
  8709  1743  0AA3               	incf	___awdiv@quotient+1,f
  8710  1744                     l2415:	
  8711  1744  0823               	movf	___awdiv@quotient+1,w
  8712  1745  00F9               	movwf	?___awdiv+1
  8713  1746  0822               	movf	___awdiv@quotient,w
  8714  1747  00F8               	movwf	?___awdiv
  8715  1748  0008               	return
  8716  1749                     __end_of___awdiv:	
  8717                           
  8718                           	psect	text12
  8719  098E                     __ptext12:	
  8720 ;; *************** function __tdiv_to_l_ *****************
  8721 ;; Defined at:
  8722 ;;		line 60 in file "C:\Program Files\Microchip\xc8\v1.38\sources\common\ftdivl.c"
  8723 ;; Parameters:    Size  Location     Type
  8724 ;;  f1              3    1[COMMON] float 
  8725 ;;  f2              3    4[COMMON] float 
  8726 ;; Auto vars:     Size  Location     Type
  8727 ;;  quot            4    0[BANK0 ] unsigned long 
  8728 ;;  exp1            1    5[BANK0 ] unsigned char 
  8729 ;;  cntr            1    4[BANK0 ] unsigned char 
  8730 ;; Return value:  Size  Location     Type
  8731 ;;                  4    1[COMMON] unsigned long 
  8732 ;; Registers used:
  8733 ;;		wreg, status,2, status,0
  8734 ;; Tracked objects:
  8735 ;;		On entry : 0/0
  8736 ;;		On exit  : 0/0
  8737 ;;		Unchanged: 0/0
  8738 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8739 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8740 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8741 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8742 ;;      Totals:        10       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8743 ;;Total ram usage:       16 bytes
  8744 ;; Hardware stack levels used:    1
  8745 ;; Hardware stack levels required when called:    1
  8746 ;; This function calls:
  8747 ;;		Nothing
  8748 ;; This function is called by:
  8749 ;;		_sprintf
  8750 ;; This function uses a non-reentrant model
  8751 ;;
  8752                           
  8753                           
  8754                           ;psect for function __tdiv_to_l_
  8755  098E                     __tdiv_to_l_:	
  8756                           
  8757                           ;incstack = 0
  8758                           ; Regs used in __tdiv_to_l_: [wreg+status,2+status,0]
  8759  098E  0871               	movf	__tdiv_to_l_@f1,w
  8760  098F  00F7               	movwf	??__tdiv_to_l_
  8761  0990  0872               	movf	__tdiv_to_l_@f1+1,w
  8762  0991  00F8               	movwf	??__tdiv_to_l_+1
  8763  0992  0873               	movf	__tdiv_to_l_@f1+2,w
  8764  0993  00F9               	movwf	??__tdiv_to_l_+2
  8765  0994  1003               	clrc
  8766  0995  0D78               	rlf	??__tdiv_to_l_+1,w
  8767  0996  0D79               	rlf	??__tdiv_to_l_+2,w
  8768  0997  00FA               	movwf	??__tdiv_to_l_+3
  8769  0998  087A               	movf	??__tdiv_to_l_+3,w
  8770  0999  0020               	movlb	0	; select bank0
  8771  099A  00A5               	movwf	__tdiv_to_l_@exp1
  8772  099B  0825               	movf	__tdiv_to_l_@exp1,w
  8773  099C  1D03               	btfss	3,2
  8774  099D  29A7               	goto	l2649
  8775  099E  3000               	movlw	0
  8776  099F  00F4               	movwf	?__tdiv_to_l_+3
  8777  09A0  3000               	movlw	0
  8778  09A1  00F3               	movwf	?__tdiv_to_l_+2
  8779  09A2  3000               	movlw	0
  8780  09A3  00F2               	movwf	?__tdiv_to_l_+1
  8781  09A4  3000               	movlw	0
  8782  09A5  00F1               	movwf	?__tdiv_to_l_
  8783  09A6  0008               	return
  8784  09A7                     l2649:	
  8785  09A7  0874               	movf	__tdiv_to_l_@f2,w
  8786  09A8  00F7               	movwf	??__tdiv_to_l_
  8787  09A9  0875               	movf	__tdiv_to_l_@f2+1,w
  8788  09AA  00F8               	movwf	??__tdiv_to_l_+1
  8789  09AB  0876               	movf	__tdiv_to_l_@f2+2,w
  8790  09AC  00F9               	movwf	??__tdiv_to_l_+2
  8791  09AD  1003               	clrc
  8792  09AE  0D78               	rlf	??__tdiv_to_l_+1,w
  8793  09AF  0D79               	rlf	??__tdiv_to_l_+2,w
  8794  09B0  00FA               	movwf	??__tdiv_to_l_+3
  8795  09B1  087A               	movf	??__tdiv_to_l_+3,w
  8796  09B2  00A4               	movwf	__tdiv_to_l_@cntr
  8797  09B3  0824               	movf	__tdiv_to_l_@cntr,w
  8798  09B4  1D03               	btfss	3,2
  8799  09B5  29BF               	goto	l892
  8800  09B6  3000               	movlw	0
  8801  09B7  00F4               	movwf	?__tdiv_to_l_+3
  8802  09B8  3000               	movlw	0
  8803  09B9  00F3               	movwf	?__tdiv_to_l_+2
  8804  09BA  3000               	movlw	0
  8805  09BB  00F2               	movwf	?__tdiv_to_l_+1
  8806  09BC  3000               	movlw	0
  8807  09BD  00F1               	movwf	?__tdiv_to_l_
  8808  09BE  0008               	return
  8809  09BF                     l892:	
  8810  09BF  17F2               	bsf	__tdiv_to_l_@f1+1,7
  8811  09C0  30FF               	movlw	255
  8812  09C1  05F1               	andwf	__tdiv_to_l_@f1,f
  8813  09C2  30FF               	movlw	255
  8814  09C3  05F2               	andwf	__tdiv_to_l_@f1+1,f
  8815  09C4  3000               	movlw	0
  8816  09C5  05F3               	andwf	__tdiv_to_l_@f1+2,f
  8817  09C6  17F5               	bsf	__tdiv_to_l_@f2+1,7
  8818  09C7  30FF               	movlw	255
  8819  09C8  05F4               	andwf	__tdiv_to_l_@f2,f
  8820  09C9  30FF               	movlw	255
  8821  09CA  05F5               	andwf	__tdiv_to_l_@f2+1,f
  8822  09CB  3000               	movlw	0
  8823  09CC  05F6               	andwf	__tdiv_to_l_@f2+2,f
  8824  09CD  3000               	movlw	0
  8825  09CE  00A3               	movwf	__tdiv_to_l_@quot+3
  8826  09CF  3000               	movlw	0
  8827  09D0  00A2               	movwf	__tdiv_to_l_@quot+2
  8828  09D1  3000               	movlw	0
  8829  09D2  00A1               	movwf	__tdiv_to_l_@quot+1
  8830  09D3  3000               	movlw	0
  8831  09D4  00A0               	movwf	__tdiv_to_l_@quot
  8832  09D5  307F               	movlw	127
  8833  09D6  02A5               	subwf	__tdiv_to_l_@exp1,f
  8834  09D7  3098               	movlw	152
  8835  09D8  0724               	addwf	__tdiv_to_l_@cntr,w
  8836  09D9  00F7               	movwf	??__tdiv_to_l_
  8837  09DA  0877               	movf	??__tdiv_to_l_,w
  8838  09DB  02A5               	subwf	__tdiv_to_l_@exp1,f
  8839  09DC  3018               	movlw	24
  8840  09DD  00F7               	movwf	??__tdiv_to_l_
  8841  09DE  0877               	movf	??__tdiv_to_l_,w
  8842  09DF  00A4               	movwf	__tdiv_to_l_@cntr
  8843  09E0                     l2663:	
  8844  09E0  3001               	movlw	1
  8845  09E1                     u2665:	
  8846  09E1  35A0               	lslf	__tdiv_to_l_@quot,f
  8847  09E2  0DA1               	rlf	__tdiv_to_l_@quot+1,f
  8848  09E3  0DA2               	rlf	__tdiv_to_l_@quot+2,f
  8849  09E4  0DA3               	rlf	__tdiv_to_l_@quot+3,f
  8850  09E5  0B89               	decfsz	9,f
  8851  09E6  29E1               	goto	u2665
  8852  09E7  0876               	movf	__tdiv_to_l_@f2+2,w
  8853  09E8  0273               	subwf	__tdiv_to_l_@f1+2,w
  8854  09E9  1D03               	skipz
  8855  09EA  29F1               	goto	u2675
  8856  09EB  0875               	movf	__tdiv_to_l_@f2+1,w
  8857  09EC  0272               	subwf	__tdiv_to_l_@f1+1,w
  8858  09ED  1D03               	skipz
  8859  09EE  29F1               	goto	u2675
  8860  09EF  0874               	movf	__tdiv_to_l_@f2,w
  8861  09F0  0271               	subwf	__tdiv_to_l_@f1,w
  8862  09F1                     u2675:	
  8863  09F1  1C03               	skipc
  8864  09F2  29FA               	goto	l2671
  8865  09F3  0874               	movf	__tdiv_to_l_@f2,w
  8866  09F4  02F1               	subwf	__tdiv_to_l_@f1,f
  8867  09F5  0875               	movf	__tdiv_to_l_@f2+1,w
  8868  09F6  3BF2               	subwfb	__tdiv_to_l_@f1+1,f
  8869  09F7  0876               	movf	__tdiv_to_l_@f2+2,w
  8870  09F8  3BF3               	subwfb	__tdiv_to_l_@f1+2,f
  8871  09F9  1420               	bsf	__tdiv_to_l_@quot,0
  8872  09FA                     l2671:	
  8873  09FA  3001               	movlw	1
  8874  09FB                     u2685:	
  8875  09FB  35F1               	lslf	__tdiv_to_l_@f1,f
  8876  09FC  0DF2               	rlf	__tdiv_to_l_@f1+1,f
  8877  09FD  0DF3               	rlf	__tdiv_to_l_@f1+2,f
  8878  09FE  0B89               	decfsz	9,f
  8879  09FF  29FB               	goto	u2685
  8880  0A00  3001               	movlw	1
  8881  0A01  02A4               	subwf	__tdiv_to_l_@cntr,f
  8882  0A02  1D03               	btfss	3,2
  8883  0A03  29E0               	goto	l2663
  8884  0A04  1FA5               	btfss	__tdiv_to_l_@exp1,7
  8885  0A05  2A22               	goto	l2683
  8886  0A06  0825               	movf	__tdiv_to_l_@exp1,w
  8887  0A07  3A80               	xorlw	128
  8888  0A08  3E97               	addlw	151
  8889  0A09  1803               	skipnc
  8890  0A0A  2A14               	goto	l2681
  8891  0A0B  3000               	movlw	0
  8892  0A0C  00F4               	movwf	?__tdiv_to_l_+3
  8893  0A0D  3000               	movlw	0
  8894  0A0E  00F3               	movwf	?__tdiv_to_l_+2
  8895  0A0F  3000               	movlw	0
  8896  0A10  00F2               	movwf	?__tdiv_to_l_+1
  8897  0A11  3000               	movlw	0
  8898  0A12  00F1               	movwf	?__tdiv_to_l_
  8899  0A13  0008               	return
  8900  0A14                     l2681:	
  8901  0A14  3001               	movlw	1
  8902  0A15                     u2725:	
  8903  0A15  36A3               	lsrf	__tdiv_to_l_@quot+3,f
  8904  0A16  0CA2               	rrf	__tdiv_to_l_@quot+2,f
  8905  0A17  0CA1               	rrf	__tdiv_to_l_@quot+1,f
  8906  0A18  0CA0               	rrf	__tdiv_to_l_@quot,f
  8907  0A19  0B89               	decfsz	9,f
  8908  0A1A  2A15               	goto	u2725
  8909  0A1B  3001               	movlw	1
  8910  0A1C  00F7               	movwf	??__tdiv_to_l_
  8911  0A1D  0877               	movf	??__tdiv_to_l_,w
  8912  0A1E  07A5               	addwf	__tdiv_to_l_@exp1,f
  8913  0A1F  1903               	btfsc	3,2
  8914  0A20  2A3B               	goto	l2691
  8915  0A21  2A14               	goto	l2681
  8916  0A22                     l2683:	
  8917  0A22  3018               	movlw	24
  8918  0A23  0225               	subwf	__tdiv_to_l_@exp1,w
  8919  0A24  1C03               	skipc
  8920  0A25  2A38               	goto	l902
  8921  0A26  3000               	movlw	0
  8922  0A27  00F4               	movwf	?__tdiv_to_l_+3
  8923  0A28  3000               	movlw	0
  8924  0A29  00F3               	movwf	?__tdiv_to_l_+2
  8925  0A2A  3000               	movlw	0
  8926  0A2B  00F2               	movwf	?__tdiv_to_l_+1
  8927  0A2C  3000               	movlw	0
  8928  0A2D  00F1               	movwf	?__tdiv_to_l_
  8929  0A2E  0008               	return
  8930  0A2F                     l2689:	
  8931  0A2F  3001               	movlw	1
  8932  0A30                     u2755:	
  8933  0A30  35A0               	lslf	__tdiv_to_l_@quot,f
  8934  0A31  0DA1               	rlf	__tdiv_to_l_@quot+1,f
  8935  0A32  0DA2               	rlf	__tdiv_to_l_@quot+2,f
  8936  0A33  0DA3               	rlf	__tdiv_to_l_@quot+3,f
  8937  0A34  0B89               	decfsz	9,f
  8938  0A35  2A30               	goto	u2755
  8939  0A36  3001               	movlw	1
  8940  0A37  02A5               	subwf	__tdiv_to_l_@exp1,f
  8941  0A38                     l902:	
  8942  0A38  0825               	movf	__tdiv_to_l_@exp1,w
  8943  0A39  1D03               	btfss	3,2
  8944  0A3A  2A2F               	goto	l2689
  8945  0A3B                     l2691:	
  8946  0A3B  0823               	movf	__tdiv_to_l_@quot+3,w
  8947  0A3C  00F4               	movwf	?__tdiv_to_l_+3
  8948  0A3D  0822               	movf	__tdiv_to_l_@quot+2,w
  8949  0A3E  00F3               	movwf	?__tdiv_to_l_+2
  8950  0A3F  0821               	movf	__tdiv_to_l_@quot+1,w
  8951  0A40  00F2               	movwf	?__tdiv_to_l_+1
  8952  0A41  0820               	movf	__tdiv_to_l_@quot,w
  8953  0A42  00F1               	movwf	?__tdiv_to_l_
  8954  0A43  0008               	return
  8955  0A44                     __end_of__tdiv_to_l_:	
  8956                           
  8957                           	psect	text13
  8958  0B3A                     __ptext13:	
  8959 ;; *************** function __div_to_l_ *****************
  8960 ;; Defined at:
  8961 ;;		line 60 in file "C:\Program Files\Microchip\xc8\v1.38\sources\common\fldivl.c"
  8962 ;; Parameters:    Size  Location     Type
  8963 ;;  f1              3    1[COMMON] unsigned long 
  8964 ;;  f2              3    4[COMMON] unsigned long 
  8965 ;; Auto vars:     Size  Location     Type
  8966 ;;  quot            4    7[COMMON] unsigned long 
  8967 ;;  exp1            1   12[COMMON] unsigned char 
  8968 ;;  cntr            1   11[COMMON] unsigned char 
  8969 ;; Return value:  Size  Location     Type
  8970 ;;                  4    1[COMMON] unsigned long 
  8971 ;; Registers used:
  8972 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8973 ;; Tracked objects:
  8974 ;;		On entry : 0/0
  8975 ;;		On exit  : 0/0
  8976 ;;		Unchanged: 0/0
  8977 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8978 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8979 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8980 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8981 ;;      Totals:        12       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8982 ;;Total ram usage:       20 bytes
  8983 ;; Hardware stack levels used:    1
  8984 ;; Hardware stack levels required when called:    1
  8985 ;; This function calls:
  8986 ;;		Nothing
  8987 ;; This function is called by:
  8988 ;;		_sprintf
  8989 ;; This function uses a non-reentrant model
  8990 ;;
  8991                           
  8992                           
  8993                           ;psect for function __div_to_l_
  8994  0B3A                     __div_to_l_:	
  8995                           
  8996                           ;incstack = 0
  8997                           ; Regs used in __div_to_l_: [wreg+fsr1l+fsr1h+status,2+status,0]
  8998  0B3A  3071               	movlw	low (__div_to_l_@f1| 0)
  8999  0B3B  0086               	movwf	6
  9000  0B3C  0187               	clrf	7
  9001  0B3D  3F40               	moviw [0]fsr1
  9002  0B3E  0020               	movlb	0	; select bank0
  9003  0B3F  00A0               	movwf	??__div_to_l_
  9004  0B40  3F41               	moviw [1]fsr1
  9005  0B41  00A1               	movwf	??__div_to_l_+1
  9006  0B42  3F42               	moviw [2]fsr1
  9007  0B43  00A2               	movwf	??__div_to_l_+2
  9008  0B44  3F43               	moviw [3]fsr1
  9009  0B45  00A3               	movwf	??__div_to_l_+3
  9010  0B46  1003               	clrc
  9011  0B47  0D22               	rlf	??__div_to_l_+2,w
  9012  0B48  0D23               	rlf	??__div_to_l_+3,w
  9013  0B49  00A4               	movwf	??__div_to_l_+4
  9014  0B4A  0824               	movf	??__div_to_l_+4,w
  9015  0B4B  00FC               	movwf	__div_to_l_@exp1
  9016  0B4C  087C               	movf	__div_to_l_@exp1,w
  9017  0B4D  1D03               	btfss	3,2
  9018  0B4E  2B58               	goto	l2701
  9019  0B4F  3000               	movlw	0
  9020  0B50  00F4               	movwf	?__div_to_l_+3
  9021  0B51  3000               	movlw	0
  9022  0B52  00F3               	movwf	?__div_to_l_+2
  9023  0B53  3000               	movlw	0
  9024  0B54  00F2               	movwf	?__div_to_l_+1
  9025  0B55  3000               	movlw	0
  9026  0B56  00F1               	movwf	?__div_to_l_
  9027  0B57  0008               	return
  9028  0B58                     l2701:	
  9029  0B58  3074               	movlw	low (__div_to_l_@f2| 0)
  9030  0B59  0086               	movwf	6
  9031  0B5A  0187               	clrf	7
  9032  0B5B  3F40               	moviw [0]fsr1
  9033  0B5C  00A0               	movwf	??__div_to_l_
  9034  0B5D  3F41               	moviw [1]fsr1
  9035  0B5E  00A1               	movwf	??__div_to_l_+1
  9036  0B5F  3F42               	moviw [2]fsr1
  9037  0B60  00A2               	movwf	??__div_to_l_+2
  9038  0B61  3F43               	moviw [3]fsr1
  9039  0B62  00A3               	movwf	??__div_to_l_+3
  9040  0B63  1003               	clrc
  9041  0B64  0D22               	rlf	??__div_to_l_+2,w
  9042  0B65  0D23               	rlf	??__div_to_l_+3,w
  9043  0B66  00A4               	movwf	??__div_to_l_+4
  9044  0B67  0824               	movf	??__div_to_l_+4,w
  9045  0B68  00FB               	movwf	__div_to_l_@cntr
  9046  0B69  087B               	movf	__div_to_l_@cntr,w
  9047  0B6A  1D03               	btfss	3,2
  9048  0B6B  2B75               	goto	l2707
  9049  0B6C  3000               	movlw	0
  9050  0B6D  00F4               	movwf	?__div_to_l_+3
  9051  0B6E  3000               	movlw	0
  9052  0B6F  00F3               	movwf	?__div_to_l_+2
  9053  0B70  3000               	movlw	0
  9054  0B71  00F2               	movwf	?__div_to_l_+1
  9055  0B72  3000               	movlw	0
  9056  0B73  00F1               	movwf	?__div_to_l_
  9057  0B74  0008               	return
  9058  0B75                     l2707:	
  9059  0B75  3071               	movlw	low (__div_to_l_@f1| 0)
  9060  0B76  0086               	movwf	6
  9061  0B77  0187               	clrf	7
  9062  0B78  3000               	movlw	0
  9063  0B79  0481               	iorwf	1,f
  9064  0B7A  3141               	addfsr 1,1
  9065  0B7B  3000               	movlw	0
  9066  0B7C  0481               	iorwf	1,f
  9067  0B7D  3141               	addfsr 1,1
  9068  0B7E  3080               	movlw	128
  9069  0B7F  0481               	iorwf	1,f
  9070  0B80  3141               	addfsr 1,1
  9071  0B81  3000               	movlw	0
  9072  0B82  0481               	iorwf	1,f
  9073  0B83  3071               	movlw	low (__div_to_l_@f1| 0)
  9074  0B84  0086               	movwf	6
  9075  0B85  0187               	clrf	7
  9076  0B86  30FF               	movlw	255
  9077  0B87  0581               	andwf	1,f
  9078  0B88  3141               	addfsr 1,1
  9079  0B89  30FF               	movlw	255
  9080  0B8A  0581               	andwf	1,f
  9081  0B8B  3141               	addfsr 1,1
  9082  0B8C  30FF               	movlw	255
  9083  0B8D  0581               	andwf	1,f
  9084  0B8E  3141               	addfsr 1,1
  9085  0B8F  3000               	movlw	0
  9086  0B90  0581               	andwf	1,f
  9087  0B91  3074               	movlw	low (__div_to_l_@f2| 0)
  9088  0B92  0086               	movwf	6
  9089  0B93  0187               	clrf	7
  9090  0B94  3000               	movlw	0
  9091  0B95  0481               	iorwf	1,f
  9092  0B96  3141               	addfsr 1,1
  9093  0B97  3000               	movlw	0
  9094  0B98  0481               	iorwf	1,f
  9095  0B99  3141               	addfsr 1,1
  9096  0B9A  3080               	movlw	128
  9097  0B9B  0481               	iorwf	1,f
  9098  0B9C  3141               	addfsr 1,1
  9099  0B9D  3000               	movlw	0
  9100  0B9E  0481               	iorwf	1,f
  9101  0B9F  3074               	movlw	low (__div_to_l_@f2| 0)
  9102  0BA0  0086               	movwf	6
  9103  0BA1  0187               	clrf	7
  9104  0BA2  30FF               	movlw	255
  9105  0BA3  0581               	andwf	1,f
  9106  0BA4  3141               	addfsr 1,1
  9107  0BA5  30FF               	movlw	255
  9108  0BA6  0581               	andwf	1,f
  9109  0BA7  3141               	addfsr 1,1
  9110  0BA8  30FF               	movlw	255
  9111  0BA9  0581               	andwf	1,f
  9112  0BAA  3141               	addfsr 1,1
  9113  0BAB  3000               	movlw	0
  9114  0BAC  0581               	andwf	1,f
  9115  0BAD  3000               	movlw	0
  9116  0BAE  00FA               	movwf	__div_to_l_@quot+3
  9117  0BAF  3000               	movlw	0
  9118  0BB0  00F9               	movwf	__div_to_l_@quot+2
  9119  0BB1  3000               	movlw	0
  9120  0BB2  00F8               	movwf	__div_to_l_@quot+1
  9121  0BB3  3000               	movlw	0
  9122  0BB4  00F7               	movwf	__div_to_l_@quot
  9123  0BB5  307F               	movlw	127
  9124  0BB6  02FC               	subwf	__div_to_l_@exp1,f
  9125  0BB7  30A0               	movlw	160
  9126  0BB8  077B               	addwf	__div_to_l_@cntr,w
  9127  0BB9  00A0               	movwf	??__div_to_l_
  9128  0BBA  0820               	movf	??__div_to_l_,w
  9129  0BBB  02FC               	subwf	__div_to_l_@exp1,f
  9130  0BBC  3020               	movlw	32
  9131  0BBD  00A0               	movwf	??__div_to_l_
  9132  0BBE  0820               	movf	??__div_to_l_,w
  9133  0BBF  00FB               	movwf	__div_to_l_@cntr
  9134  0BC0                     l2717:	
  9135  0BC0  3001               	movlw	1
  9136  0BC1                     u2795:	
  9137  0BC1  35F7               	lslf	__div_to_l_@quot,f
  9138  0BC2  0DF8               	rlf	__div_to_l_@quot+1,f
  9139  0BC3  0DF9               	rlf	__div_to_l_@quot+2,f
  9140  0BC4  0DFA               	rlf	__div_to_l_@quot+3,f
  9141  0BC5  0B89               	decfsz	9,f
  9142  0BC6  2BC1               	goto	u2795
  9143  0BC7  3074               	movlw	low (__div_to_l_@f2| 0)
  9144  0BC8  0086               	movwf	6
  9145  0BC9  0187               	clrf	7
  9146  0BCA  3F40               	moviw [0]fsr1
  9147  0BCB  00A0               	movwf	??__div_to_l_
  9148  0BCC  3F41               	moviw [1]fsr1
  9149  0BCD  00A1               	movwf	??__div_to_l_+1
  9150  0BCE  3F42               	moviw [2]fsr1
  9151  0BCF  00A2               	movwf	??__div_to_l_+2
  9152  0BD0  3F43               	moviw [3]fsr1
  9153  0BD1  00A3               	movwf	??__div_to_l_+3
  9154  0BD2  3071               	movlw	low (__div_to_l_@f1| 0)
  9155  0BD3  0086               	movwf	6
  9156  0BD4  0187               	clrf	7
  9157  0BD5  3F40               	moviw [0]fsr1
  9158  0BD6  00A4               	movwf	??__div_to_l_+4
  9159  0BD7  3F41               	moviw [1]fsr1
  9160  0BD8  00A5               	movwf	??__div_to_l_+5
  9161  0BD9  3F42               	moviw [2]fsr1
  9162  0BDA  00A6               	movwf	??__div_to_l_+6
  9163  0BDB  3F43               	moviw [3]fsr1
  9164  0BDC  00A7               	movwf	??__div_to_l_+7
  9165  0BDD  0823               	movf	??__div_to_l_+3,w
  9166  0BDE  0227               	subwf	??__div_to_l_+7,w
  9167  0BDF  1D03               	skipz
  9168  0BE0  2BEB               	goto	u2805
  9169  0BE1  0822               	movf	??__div_to_l_+2,w
  9170  0BE2  0226               	subwf	??__div_to_l_+6,w
  9171  0BE3  1D03               	skipz
  9172  0BE4  2BEB               	goto	u2805
  9173  0BE5  0821               	movf	??__div_to_l_+1,w
  9174  0BE6  0225               	subwf	??__div_to_l_+5,w
  9175  0BE7  1D03               	skipz
  9176  0BE8  2BEB               	goto	u2805
  9177  0BE9  0820               	movf	??__div_to_l_,w
  9178  0BEA  0224               	subwf	??__div_to_l_+4,w
  9179  0BEB                     u2805:	
  9180  0BEB  1C03               	skipc
  9181  0BEC  2C08               	goto	l2725
  9182  0BED  3074               	movlw	low (__div_to_l_@f2| 0)
  9183  0BEE  0086               	movwf	6
  9184  0BEF  0187               	clrf	7
  9185  0BF0  3F40               	moviw [0]fsr1
  9186  0BF1  00A0               	movwf	??__div_to_l_
  9187  0BF2  3F41               	moviw [1]fsr1
  9188  0BF3  00A1               	movwf	??__div_to_l_+1
  9189  0BF4  3F42               	moviw [2]fsr1
  9190  0BF5  00A2               	movwf	??__div_to_l_+2
  9191  0BF6  3F43               	moviw [3]fsr1
  9192  0BF7  00A3               	movwf	??__div_to_l_+3
  9193  0BF8  3071               	movlw	low (__div_to_l_@f1| 0)
  9194  0BF9  0086               	movwf	6
  9195  0BFA  0187               	clrf	7
  9196  0BFB  0820               	movf	??__div_to_l_,w
  9197  0BFC  0281               	subwf	1,f
  9198  0BFD  3141               	addfsr 1,1
  9199  0BFE  0821               	movf	??__div_to_l_+1,w
  9200  0BFF  3B81               	subwfb	1,f
  9201  0C00  3141               	addfsr 1,1
  9202  0C01  0822               	movf	??__div_to_l_+2,w
  9203  0C02  3B81               	subwfb	1,f
  9204  0C03  3141               	addfsr 1,1
  9205  0C04  0823               	movf	??__div_to_l_+3,w
  9206  0C05  3B81               	subwfb	1,f
  9207  0C06  317D               	addfsr 1,-3
  9208  0C07  1477               	bsf	__div_to_l_@quot,0
  9209  0C08                     l2725:	
  9210  0C08  3071               	movlw	low (__div_to_l_@f1| 0)
  9211  0C09  0086               	movwf	6
  9212  0C0A  0187               	clrf	7
  9213  0C0B  3581               	lslf	1,f
  9214  0C0C  3141               	addfsr 1,1
  9215  0C0D  0D81               	rlf	1,f
  9216  0C0E  3141               	addfsr 1,1
  9217  0C0F  0D81               	rlf	1,f
  9218  0C10  3141               	addfsr 1,1
  9219  0C11  0D81               	rlf	1,f
  9220  0C12  317D               	addfsr 1,-3
  9221  0C13  3001               	movlw	1
  9222  0C14  02FB               	subwf	__div_to_l_@cntr,f
  9223  0C15  1D03               	btfss	3,2
  9224  0C16  2BC0               	goto	l2717
  9225  0C17  1FFC               	btfss	__div_to_l_@exp1,7
  9226  0C18  2C35               	goto	l2737
  9227  0C19  087C               	movf	__div_to_l_@exp1,w
  9228  0C1A  3A80               	xorlw	128
  9229  0C1B  3E9F               	addlw	159
  9230  0C1C  1803               	skipnc
  9231  0C1D  2C27               	goto	l2735
  9232  0C1E  3000               	movlw	0
  9233  0C1F  00F4               	movwf	?__div_to_l_+3
  9234  0C20  3000               	movlw	0
  9235  0C21  00F3               	movwf	?__div_to_l_+2
  9236  0C22  3000               	movlw	0
  9237  0C23  00F2               	movwf	?__div_to_l_+1
  9238  0C24  3000               	movlw	0
  9239  0C25  00F1               	movwf	?__div_to_l_
  9240  0C26  0008               	return
  9241  0C27                     l2735:	
  9242  0C27  3001               	movlw	1
  9243  0C28                     u2845:	
  9244  0C28  36FA               	lsrf	__div_to_l_@quot+3,f
  9245  0C29  0CF9               	rrf	__div_to_l_@quot+2,f
  9246  0C2A  0CF8               	rrf	__div_to_l_@quot+1,f
  9247  0C2B  0CF7               	rrf	__div_to_l_@quot,f
  9248  0C2C  0B89               	decfsz	9,f
  9249  0C2D  2C28               	goto	u2845
  9250  0C2E  3001               	movlw	1
  9251  0C2F  00A0               	movwf	??__div_to_l_
  9252  0C30  0820               	movf	??__div_to_l_,w
  9253  0C31  07FC               	addwf	__div_to_l_@exp1,f
  9254  0C32  1903               	btfsc	3,2
  9255  0C33  2C4E               	goto	l2745
  9256  0C34  2C27               	goto	l2735
  9257  0C35                     l2737:	
  9258  0C35  3020               	movlw	32
  9259  0C36  027C               	subwf	__div_to_l_@exp1,w
  9260  0C37  1C03               	skipc
  9261  0C38  2C4B               	goto	l823
  9262  0C39  3000               	movlw	0
  9263  0C3A  00F4               	movwf	?__div_to_l_+3
  9264  0C3B  3000               	movlw	0
  9265  0C3C  00F3               	movwf	?__div_to_l_+2
  9266  0C3D  3000               	movlw	0
  9267  0C3E  00F2               	movwf	?__div_to_l_+1
  9268  0C3F  3000               	movlw	0
  9269  0C40  00F1               	movwf	?__div_to_l_
  9270  0C41  0008               	return
  9271  0C42                     l2743:	
  9272  0C42  3001               	movlw	1
  9273  0C43                     u2875:	
  9274  0C43  35F7               	lslf	__div_to_l_@quot,f
  9275  0C44  0DF8               	rlf	__div_to_l_@quot+1,f
  9276  0C45  0DF9               	rlf	__div_to_l_@quot+2,f
  9277  0C46  0DFA               	rlf	__div_to_l_@quot+3,f
  9278  0C47  0B89               	decfsz	9,f
  9279  0C48  2C43               	goto	u2875
  9280  0C49  3001               	movlw	1
  9281  0C4A  02FC               	subwf	__div_to_l_@exp1,f
  9282  0C4B                     l823:	
  9283  0C4B  087C               	movf	__div_to_l_@exp1,w
  9284  0C4C  1D03               	btfss	3,2
  9285  0C4D  2C42               	goto	l2743
  9286  0C4E                     l2745:	
  9287  0C4E  087A               	movf	__div_to_l_@quot+3,w
  9288  0C4F  00F4               	movwf	?__div_to_l_+3
  9289  0C50  0879               	movf	__div_to_l_@quot+2,w
  9290  0C51  00F3               	movwf	?__div_to_l_+2
  9291  0C52  0878               	movf	__div_to_l_@quot+1,w
  9292  0C53  00F2               	movwf	?__div_to_l_+1
  9293  0C54  0877               	movf	__div_to_l_@quot,w
  9294  0C55  00F1               	movwf	?__div_to_l_
  9295  0C56  0008               	return
  9296  0C57                     __end_of__div_to_l_:	
  9297                           
  9298                           	psect	text14
  9299  0808                     __ptext14:	
  9300 ;; *************** function ___lltoft *****************
  9301 ;; Defined at:
  9302 ;;		line 35 in file "C:\Program Files\Microchip\xc8\v1.38\sources\common\lltoft.c"
  9303 ;; Parameters:    Size  Location     Type
  9304 ;;  c               4    9[COMMON] unsigned long 
  9305 ;; Auto vars:     Size  Location     Type
  9306 ;;  exp             1    1[BANK0 ] unsigned char 
  9307 ;; Return value:  Size  Location     Type
  9308 ;;                  3    9[COMMON] float 
  9309 ;; Registers used:
  9310 ;;		wreg, status,2, status,0, pclath, cstack
  9311 ;; Tracked objects:
  9312 ;;		On entry : 0/0
  9313 ;;		On exit  : 0/0
  9314 ;;		Unchanged: 0/0
  9315 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9316 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9317 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9318 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9319 ;;      Totals:         4       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9320 ;;Total ram usage:        6 bytes
  9321 ;; Hardware stack levels used:    1
  9322 ;; Hardware stack levels required when called:    2
  9323 ;; This function calls:
  9324 ;;		___ftpack
  9325 ;; This function is called by:
  9326 ;;		_sprintf
  9327 ;; This function uses a non-reentrant model
  9328 ;;
  9329                           
  9330                           
  9331                           ;psect for function ___lltoft
  9332  0808                     ___lltoft:	
  9333                           
  9334                           ;incstack = 0
  9335                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
  9336  0808  308E               	movlw	142
  9337  0809  0020               	movlb	0	; select bank0
  9338  080A  00A0               	movwf	??___lltoft
  9339  080B  0820               	movf	??___lltoft,w
  9340  080C  00A1               	movwf	___lltoft@exp
  9341  080D                     l2875:	
  9342  080D  30FF               	movlw	255
  9343  080E  057C               	andwf	___lltoft@c+3,w
  9344  080F  1903               	btfsc	3,2
  9345  0810  281D               	goto	l2877
  9346  0811  3001               	movlw	1
  9347  0812                     u3175:	
  9348  0812  36FC               	lsrf	___lltoft@c+3,f
  9349  0813  0CFB               	rrf	___lltoft@c+2,f
  9350  0814  0CFA               	rrf	___lltoft@c+1,f
  9351  0815  0CF9               	rrf	___lltoft@c,f
  9352  0816  0B89               	decfsz	9,f
  9353  0817  2812               	goto	u3175
  9354  0818  3001               	movlw	1
  9355  0819  00A0               	movwf	??___lltoft
  9356  081A  0820               	movf	??___lltoft,w
  9357  081B  07A1               	addwf	___lltoft@exp,f
  9358  081C  280D               	goto	l2875
  9359  081D                     l2877:	
  9360  081D  0879               	movf	___lltoft@c,w
  9361  081E  00F1               	movwf	___ftpack@arg
  9362  081F  087A               	movf	___lltoft@c+1,w
  9363  0820  00F2               	movwf	___ftpack@arg+1
  9364  0821  087B               	movf	___lltoft@c+2,w
  9365  0822  00F3               	movwf	___ftpack@arg+2
  9366  0823  0821               	movf	___lltoft@exp,w
  9367  0824  00A0               	movwf	??___lltoft
  9368  0825  0820               	movf	??___lltoft,w
  9369  0826  00F4               	movwf	___ftpack@exp
  9370  0827  01F5               	clrf	___ftpack@sign
  9371  0828  3197  279C         	fcall	___ftpack
  9372  082A  0871               	movf	?___ftpack,w
  9373  082B  00F9               	movwf	?___lltoft
  9374  082C  0872               	movf	?___ftpack+1,w
  9375  082D  00FA               	movwf	?___lltoft+1
  9376  082E  0873               	movf	?___ftpack+2,w
  9377  082F  00FB               	movwf	?___lltoft+2
  9378  0830  0008               	return
  9379  0831                     __end_of___lltoft:	
  9380                           
  9381                           	psect	text15
  9382  1670                     __ptext15:	
  9383 ;; *************** function ___llmod *****************
  9384 ;; Defined at:
  9385 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.38\sources\common\llmod.c"
  9386 ;; Parameters:    Size  Location     Type
  9387 ;;  divisor         4    1[COMMON] unsigned long 
  9388 ;;  dividend        4    5[COMMON] unsigned long 
  9389 ;; Auto vars:     Size  Location     Type
  9390 ;;  counter         1   10[COMMON] unsigned char 
  9391 ;; Return value:  Size  Location     Type
  9392 ;;                  4    1[COMMON] unsigned long 
  9393 ;; Registers used:
  9394 ;;		wreg, status,2, status,0
  9395 ;; Tracked objects:
  9396 ;;		On entry : 0/0
  9397 ;;		On exit  : 0/0
  9398 ;;		Unchanged: 0/0
  9399 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9400 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9401 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9402 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9403 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9404 ;;Total ram usage:       10 bytes
  9405 ;; Hardware stack levels used:    1
  9406 ;; Hardware stack levels required when called:    1
  9407 ;; This function calls:
  9408 ;;		Nothing
  9409 ;; This function is called by:
  9410 ;;		_sprintf
  9411 ;; This function uses a non-reentrant model
  9412 ;;
  9413                           
  9414                           
  9415                           ;psect for function ___llmod
  9416  1670                     ___llmod:	
  9417                           
  9418                           ;incstack = 0
  9419                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  9420  1670  0874               	movf	___llmod@divisor+3,w
  9421  1671  0473               	iorwf	___llmod@divisor+2,w
  9422  1672  0472               	iorwf	___llmod@divisor+1,w
  9423  1673  0471               	iorwf	___llmod@divisor,w
  9424  1674  1903               	skipnz
  9425  1675  2EA9               	goto	l2867
  9426  1676  01FA               	clrf	___llmod@counter
  9427  1677  0AFA               	incf	___llmod@counter,f
  9428  1678                     l2857:	
  9429  1678  1BF4               	btfsc	___llmod@divisor+3,7
  9430  1679  2E86               	goto	l2859
  9431  167A  3001               	movlw	1
  9432  167B                     u3125:	
  9433  167B  35F1               	lslf	___llmod@divisor,f
  9434  167C  0DF2               	rlf	___llmod@divisor+1,f
  9435  167D  0DF3               	rlf	___llmod@divisor+2,f
  9436  167E  0DF4               	rlf	___llmod@divisor+3,f
  9437  167F  0B89               	decfsz	9,f
  9438  1680  2E7B               	goto	u3125
  9439  1681  3001               	movlw	1
  9440  1682  00F9               	movwf	??___llmod
  9441  1683  0879               	movf	??___llmod,w
  9442  1684  07FA               	addwf	___llmod@counter,f
  9443  1685  2E78               	goto	l2857
  9444  1686                     l2859:	
  9445  1686  0874               	movf	___llmod@divisor+3,w
  9446  1687  0278               	subwf	___llmod@dividend+3,w
  9447  1688  1D03               	skipz
  9448  1689  2E94               	goto	u3145
  9449  168A  0873               	movf	___llmod@divisor+2,w
  9450  168B  0277               	subwf	___llmod@dividend+2,w
  9451  168C  1D03               	skipz
  9452  168D  2E94               	goto	u3145
  9453  168E  0872               	movf	___llmod@divisor+1,w
  9454  168F  0276               	subwf	___llmod@dividend+1,w
  9455  1690  1D03               	skipz
  9456  1691  2E94               	goto	u3145
  9457  1692  0871               	movf	___llmod@divisor,w
  9458  1693  0275               	subwf	___llmod@dividend,w
  9459  1694                     u3145:	
  9460  1694  1C03               	skipc
  9461  1695  2E9E               	goto	l2863
  9462  1696  0871               	movf	___llmod@divisor,w
  9463  1697  02F5               	subwf	___llmod@dividend,f
  9464  1698  0872               	movf	___llmod@divisor+1,w
  9465  1699  3BF6               	subwfb	___llmod@dividend+1,f
  9466  169A  0873               	movf	___llmod@divisor+2,w
  9467  169B  3BF7               	subwfb	___llmod@dividend+2,f
  9468  169C  0874               	movf	___llmod@divisor+3,w
  9469  169D  3BF8               	subwfb	___llmod@dividend+3,f
  9470  169E                     l2863:	
  9471  169E  3001               	movlw	1
  9472  169F                     u3155:	
  9473  169F  36F4               	lsrf	___llmod@divisor+3,f
  9474  16A0  0CF3               	rrf	___llmod@divisor+2,f
  9475  16A1  0CF2               	rrf	___llmod@divisor+1,f
  9476  16A2  0CF1               	rrf	___llmod@divisor,f
  9477  16A3  0B89               	decfsz	9,f
  9478  16A4  2E9F               	goto	u3155
  9479  16A5  3001               	movlw	1
  9480  16A6  02FA               	subwf	___llmod@counter,f
  9481  16A7  1D03               	btfss	3,2
  9482  16A8  2E86               	goto	l2859
  9483  16A9                     l2867:	
  9484  16A9  0878               	movf	___llmod@dividend+3,w
  9485  16AA  00F4               	movwf	?___llmod+3
  9486  16AB  0877               	movf	___llmod@dividend+2,w
  9487  16AC  00F3               	movwf	?___llmod+2
  9488  16AD  0876               	movf	___llmod@dividend+1,w
  9489  16AE  00F2               	movwf	?___llmod+1
  9490  16AF  0875               	movf	___llmod@dividend,w
  9491  16B0  00F1               	movwf	?___llmod
  9492  16B1  0008               	return
  9493  16B2                     __end_of___llmod:	
  9494                           
  9495                           	psect	text16
  9496  1749                     __ptext16:	
  9497 ;; *************** function ___lldiv *****************
  9498 ;; Defined at:
  9499 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.38\sources\common\lldiv.c"
  9500 ;; Parameters:    Size  Location     Type
  9501 ;;  divisor         4    1[COMMON] unsigned long 
  9502 ;;  dividend        4    5[COMMON] unsigned long 
  9503 ;; Auto vars:     Size  Location     Type
  9504 ;;  quotient        4    0[BANK0 ] unsigned long 
  9505 ;;  counter         1    4[BANK0 ] unsigned char 
  9506 ;; Return value:  Size  Location     Type
  9507 ;;                  4    1[COMMON] unsigned long 
  9508 ;; Registers used:
  9509 ;;		wreg, status,2, status,0
  9510 ;; Tracked objects:
  9511 ;;		On entry : 0/0
  9512 ;;		On exit  : 0/0
  9513 ;;		Unchanged: 0/0
  9514 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9515 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9516 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9517 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9518 ;;      Totals:         9       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9519 ;;Total ram usage:       14 bytes
  9520 ;; Hardware stack levels used:    1
  9521 ;; Hardware stack levels required when called:    1
  9522 ;; This function calls:
  9523 ;;		Nothing
  9524 ;; This function is called by:
  9525 ;;		_sprintf
  9526 ;; This function uses a non-reentrant model
  9527 ;;
  9528                           
  9529                           
  9530                           ;psect for function ___lldiv
  9531  1749                     ___lldiv:	
  9532                           
  9533                           ;incstack = 0
  9534                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  9535  1749  3000               	movlw	0
  9536  174A  0020               	movlb	0	; select bank0
  9537  174B  00A3               	movwf	___lldiv@quotient+3
  9538  174C  3000               	movlw	0
  9539  174D  00A2               	movwf	___lldiv@quotient+2
  9540  174E  3000               	movlw	0
  9541  174F  00A1               	movwf	___lldiv@quotient+1
  9542  1750  3000               	movlw	0
  9543  1751  00A0               	movwf	___lldiv@quotient
  9544  1752  0874               	movf	___lldiv@divisor+3,w
  9545  1753  0473               	iorwf	___lldiv@divisor+2,w
  9546  1754  0472               	iorwf	___lldiv@divisor+1,w
  9547  1755  0471               	iorwf	___lldiv@divisor,w
  9548  1756  1903               	skipnz
  9549  1757  2F93               	goto	l2847
  9550  1758  01A4               	clrf	___lldiv@counter
  9551  1759  0AA4               	incf	___lldiv@counter,f
  9552  175A                     l2833:	
  9553  175A  1BF4               	btfsc	___lldiv@divisor+3,7
  9554  175B  2F68               	goto	l2835
  9555  175C  3001               	movlw	1
  9556  175D                     u3055:	
  9557  175D  35F1               	lslf	___lldiv@divisor,f
  9558  175E  0DF2               	rlf	___lldiv@divisor+1,f
  9559  175F  0DF3               	rlf	___lldiv@divisor+2,f
  9560  1760  0DF4               	rlf	___lldiv@divisor+3,f
  9561  1761  0B89               	decfsz	9,f
  9562  1762  2F5D               	goto	u3055
  9563  1763  3001               	movlw	1
  9564  1764  00F9               	movwf	??___lldiv
  9565  1765  0879               	movf	??___lldiv,w
  9566  1766  07A4               	addwf	___lldiv@counter,f
  9567  1767  2F5A               	goto	l2833
  9568  1768                     l2835:	
  9569  1768  3001               	movlw	1
  9570  1769                     u3075:	
  9571  1769  35A0               	lslf	___lldiv@quotient,f
  9572  176A  0DA1               	rlf	___lldiv@quotient+1,f
  9573  176B  0DA2               	rlf	___lldiv@quotient+2,f
  9574  176C  0DA3               	rlf	___lldiv@quotient+3,f
  9575  176D  0B89               	decfsz	9,f
  9576  176E  2F69               	goto	u3075
  9577  176F  0874               	movf	___lldiv@divisor+3,w
  9578  1770  0278               	subwf	___lldiv@dividend+3,w
  9579  1771  1D03               	skipz
  9580  1772  2F7D               	goto	u3085
  9581  1773  0873               	movf	___lldiv@divisor+2,w
  9582  1774  0277               	subwf	___lldiv@dividend+2,w
  9583  1775  1D03               	skipz
  9584  1776  2F7D               	goto	u3085
  9585  1777  0872               	movf	___lldiv@divisor+1,w
  9586  1778  0276               	subwf	___lldiv@dividend+1,w
  9587  1779  1D03               	skipz
  9588  177A  2F7D               	goto	u3085
  9589  177B  0871               	movf	___lldiv@divisor,w
  9590  177C  0275               	subwf	___lldiv@dividend,w
  9591  177D                     u3085:	
  9592  177D  1C03               	skipc
  9593  177E  2F88               	goto	l2843
  9594  177F  0871               	movf	___lldiv@divisor,w
  9595  1780  02F5               	subwf	___lldiv@dividend,f
  9596  1781  0872               	movf	___lldiv@divisor+1,w
  9597  1782  3BF6               	subwfb	___lldiv@dividend+1,f
  9598  1783  0873               	movf	___lldiv@divisor+2,w
  9599  1784  3BF7               	subwfb	___lldiv@dividend+2,f
  9600  1785  0874               	movf	___lldiv@divisor+3,w
  9601  1786  3BF8               	subwfb	___lldiv@dividend+3,f
  9602  1787  1420               	bsf	___lldiv@quotient,0
  9603  1788                     l2843:	
  9604  1788  3001               	movlw	1
  9605  1789                     u3095:	
  9606  1789  36F4               	lsrf	___lldiv@divisor+3,f
  9607  178A  0CF3               	rrf	___lldiv@divisor+2,f
  9608  178B  0CF2               	rrf	___lldiv@divisor+1,f
  9609  178C  0CF1               	rrf	___lldiv@divisor,f
  9610  178D  0B89               	decfsz	9,f
  9611  178E  2F89               	goto	u3095
  9612  178F  3001               	movlw	1
  9613  1790  02A4               	subwf	___lldiv@counter,f
  9614  1791  1D03               	btfss	3,2
  9615  1792  2F68               	goto	l2835
  9616  1793                     l2847:	
  9617  1793  0823               	movf	___lldiv@quotient+3,w
  9618  1794  00F4               	movwf	?___lldiv+3
  9619  1795  0822               	movf	___lldiv@quotient+2,w
  9620  1796  00F3               	movwf	?___lldiv+2
  9621  1797  0821               	movf	___lldiv@quotient+1,w
  9622  1798  00F2               	movwf	?___lldiv+1
  9623  1799  0820               	movf	___lldiv@quotient,w
  9624  179A  00F1               	movwf	?___lldiv
  9625  179B  0008               	return
  9626  179C                     __end_of___lldiv:	
  9627                           
  9628                           	psect	text17
  9629  0768                     __ptext17:	
  9630 ;; *************** function ___fttol *****************
  9631 ;; Defined at:
  9632 ;;		line 44 in file "C:\Program Files\Microchip\xc8\v1.38\sources\common\fttol.c"
  9633 ;; Parameters:    Size  Location     Type
  9634 ;;  f1              3   35[BANK0 ] float 
  9635 ;; Auto vars:     Size  Location     Type
  9636 ;;  lval            4   44[BANK0 ] unsigned long 
  9637 ;;  exp1            1   48[BANK0 ] unsigned char 
  9638 ;;  sign1           1   43[BANK0 ] unsigned char 
  9639 ;; Return value:  Size  Location     Type
  9640 ;;                  4   35[BANK0 ] long 
  9641 ;; Registers used:
  9642 ;;		wreg, status,2, status,0
  9643 ;; Tracked objects:
  9644 ;;		On entry : 0/0
  9645 ;;		On exit  : 0/0
  9646 ;;		Unchanged: 0/0
  9647 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9648 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9649 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9650 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9651 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9652 ;;Total ram usage:       14 bytes
  9653 ;; Hardware stack levels used:    1
  9654 ;; Hardware stack levels required when called:    1
  9655 ;; This function calls:
  9656 ;;		Nothing
  9657 ;; This function is called by:
  9658 ;;		_main
  9659 ;;		_sprintf
  9660 ;; This function uses a non-reentrant model
  9661 ;;
  9662                           
  9663                           
  9664                           ;psect for function ___fttol
  9665  0768                     ___fttol:	
  9666                           
  9667                           ;incstack = 0
  9668                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  9669  0768  0020               	movlb	0	; select bank0
  9670  0769  0843               	movf	___fttol@f1,w
  9671  076A  00C7               	movwf	??___fttol
  9672  076B  0844               	movf	___fttol@f1+1,w
  9673  076C  00C8               	movwf	??___fttol+1
  9674  076D  0845               	movf	___fttol@f1+2,w
  9675  076E  00C9               	movwf	??___fttol+2
  9676  076F  1003               	clrc
  9677  0770  0D48               	rlf	??___fttol+1,w
  9678  0771  0D49               	rlf	??___fttol+2,w
  9679  0772  00CA               	movwf	??___fttol+3
  9680  0773  084A               	movf	??___fttol+3,w
  9681  0774  00D0               	movwf	___fttol@exp1
  9682  0775  0850               	movf	___fttol@exp1,w
  9683  0776  1D03               	btfss	3,2
  9684  0777  2F81               	goto	l2791
  9685  0778  3000               	movlw	0
  9686  0779  00C6               	movwf	?___fttol+3
  9687  077A  3000               	movlw	0
  9688  077B  00C5               	movwf	?___fttol+2
  9689  077C  3000               	movlw	0
  9690  077D  00C4               	movwf	?___fttol+1
  9691  077E  3000               	movlw	0
  9692  077F  00C3               	movwf	?___fttol
  9693  0780  0008               	return
  9694  0781                     l2791:	
  9695  0781  0843               	movf	___fttol@f1,w
  9696  0782  00C7               	movwf	??___fttol
  9697  0783  0844               	movf	___fttol@f1+1,w
  9698  0784  00C8               	movwf	??___fttol+1
  9699  0785  0845               	movf	___fttol@f1+2,w
  9700  0786  00C9               	movwf	??___fttol+2
  9701  0787  3017               	movlw	23
  9702  0788                     u2955:	
  9703  0788  36C9               	lsrf	??___fttol+2,f
  9704  0789  0CC8               	rrf	??___fttol+1,f
  9705  078A  0CC7               	rrf	??___fttol,f
  9706  078B  0B89               	decfsz	9,f
  9707  078C  2F88               	goto	u2955
  9708  078D  0847               	movf	??___fttol,w
  9709  078E  00CA               	movwf	??___fttol+3
  9710  078F  084A               	movf	??___fttol+3,w
  9711  0790  00CB               	movwf	___fttol@sign1
  9712  0791  17C4               	bsf	___fttol@f1+1,7
  9713  0792  30FF               	movlw	255
  9714  0793  05C3               	andwf	___fttol@f1,f
  9715  0794  30FF               	movlw	255
  9716  0795  05C4               	andwf	___fttol@f1+1,f
  9717  0796  3000               	movlw	0
  9718  0797  05C5               	andwf	___fttol@f1+2,f
  9719  0798  0843               	movf	___fttol@f1,w
  9720  0799  00CC               	movwf	___fttol@lval
  9721  079A  0844               	movf	___fttol@f1+1,w
  9722  079B  00CD               	movwf	___fttol@lval+1
  9723  079C  0845               	movf	___fttol@f1+2,w
  9724  079D  00CE               	movwf	___fttol@lval+2
  9725  079E  01CF               	clrf	___fttol@lval+3
  9726  079F  308E               	movlw	142
  9727  07A0  02D0               	subwf	___fttol@exp1,f
  9728  07A1  1FD0               	btfss	___fttol@exp1,7
  9729  07A2  2FBF               	goto	l2811
  9730  07A3  0850               	movf	___fttol@exp1,w
  9731  07A4  3A80               	xorlw	128
  9732  07A5  3E8F               	addlw	143
  9733  07A6  1803               	skipnc
  9734  07A7  2FB1               	goto	l2809
  9735  07A8  3000               	movlw	0
  9736  07A9  00C6               	movwf	?___fttol+3
  9737  07AA  3000               	movlw	0
  9738  07AB  00C5               	movwf	?___fttol+2
  9739  07AC  3000               	movlw	0
  9740  07AD  00C4               	movwf	?___fttol+1
  9741  07AE  3000               	movlw	0
  9742  07AF  00C3               	movwf	?___fttol
  9743  07B0  0008               	return
  9744  07B1                     l2809:	
  9745  07B1  3001               	movlw	1
  9746  07B2                     u2985:	
  9747  07B2  36CF               	lsrf	___fttol@lval+3,f
  9748  07B3  0CCE               	rrf	___fttol@lval+2,f
  9749  07B4  0CCD               	rrf	___fttol@lval+1,f
  9750  07B5  0CCC               	rrf	___fttol@lval,f
  9751  07B6  0B89               	decfsz	9,f
  9752  07B7  2FB2               	goto	u2985
  9753  07B8  3001               	movlw	1
  9754  07B9  00C7               	movwf	??___fttol
  9755  07BA  0847               	movf	??___fttol,w
  9756  07BB  07D0               	addwf	___fttol@exp1,f
  9757  07BC  1903               	btfsc	3,2
  9758  07BD  2FD8               	goto	l2819
  9759  07BE  2FB1               	goto	l2809
  9760  07BF                     l2811:	
  9761  07BF  3018               	movlw	24
  9762  07C0  0250               	subwf	___fttol@exp1,w
  9763  07C1  1C03               	skipc
  9764  07C2  2FD5               	goto	l943
  9765  07C3  3000               	movlw	0
  9766  07C4  00C6               	movwf	?___fttol+3
  9767  07C5  3000               	movlw	0
  9768  07C6  00C5               	movwf	?___fttol+2
  9769  07C7  3000               	movlw	0
  9770  07C8  00C4               	movwf	?___fttol+1
  9771  07C9  3000               	movlw	0
  9772  07CA  00C3               	movwf	?___fttol
  9773  07CB  0008               	return
  9774  07CC                     l2817:	
  9775  07CC  3001               	movlw	1
  9776  07CD                     u3015:	
  9777  07CD  35CC               	lslf	___fttol@lval,f
  9778  07CE  0DCD               	rlf	___fttol@lval+1,f
  9779  07CF  0DCE               	rlf	___fttol@lval+2,f
  9780  07D0  0DCF               	rlf	___fttol@lval+3,f
  9781  07D1  0B89               	decfsz	9,f
  9782  07D2  2FCD               	goto	u3015
  9783  07D3  3001               	movlw	1
  9784  07D4  02D0               	subwf	___fttol@exp1,f
  9785  07D5                     l943:	
  9786  07D5  0850               	movf	___fttol@exp1,w
  9787  07D6  1D03               	btfss	3,2
  9788  07D7  2FCC               	goto	l2817
  9789  07D8                     l2819:	
  9790  07D8  084B               	movf	___fttol@sign1,w
  9791  07D9  1903               	btfsc	3,2
  9792  07DA  2FE6               	goto	l2823
  9793  07DB  09CC               	comf	___fttol@lval,f
  9794  07DC  09CD               	comf	___fttol@lval+1,f
  9795  07DD  09CE               	comf	___fttol@lval+2,f
  9796  07DE  09CF               	comf	___fttol@lval+3,f
  9797  07DF  0ACC               	incf	___fttol@lval,f
  9798  07E0  1903               	skipnz
  9799  07E1  0ACD               	incf	___fttol@lval+1,f
  9800  07E2  1903               	skipnz
  9801  07E3  0ACE               	incf	___fttol@lval+2,f
  9802  07E4  1903               	skipnz
  9803  07E5  0ACF               	incf	___fttol@lval+3,f
  9804  07E6                     l2823:	
  9805  07E6  084F               	movf	___fttol@lval+3,w
  9806  07E7  00C6               	movwf	?___fttol+3
  9807  07E8  084E               	movf	___fttol@lval+2,w
  9808  07E9  00C5               	movwf	?___fttol+2
  9809  07EA  084D               	movf	___fttol@lval+1,w
  9810  07EB  00C4               	movwf	?___fttol+1
  9811  07EC  084C               	movf	___fttol@lval,w
  9812  07ED  00C3               	movwf	?___fttol
  9813  07EE  0008               	return
  9814  07EF                     __end_of___fttol:	
  9815                           
  9816                           	psect	text18
  9817  15AE                     __ptext18:	
  9818 ;; *************** function ___ftsub *****************
  9819 ;; Defined at:
  9820 ;;		line 18 in file "C:\Program Files\Microchip\xc8\v1.38\sources\common\ftsub.c"
  9821 ;; Parameters:    Size  Location     Type
  9822 ;;  f2              3   53[BANK0 ] float 
  9823 ;;  f1              3   56[BANK0 ] float 
  9824 ;; Auto vars:     Size  Location     Type
  9825 ;;		None
  9826 ;; Return value:  Size  Location     Type
  9827 ;;                  3   53[BANK0 ] float 
  9828 ;; Registers used:
  9829 ;;		wreg, status,2, status,0, pclath, cstack
  9830 ;; Tracked objects:
  9831 ;;		On entry : 0/0
  9832 ;;		On exit  : 0/0
  9833 ;;		Unchanged: 0/0
  9834 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9835 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9836 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9837 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9838 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9839 ;;Total ram usage:        6 bytes
  9840 ;; Hardware stack levels used:    1
  9841 ;; Hardware stack levels required when called:    3
  9842 ;; This function calls:
  9843 ;;		___ftadd
  9844 ;; This function is called by:
  9845 ;;		_sprintf
  9846 ;; This function uses a non-reentrant model
  9847 ;;
  9848                           
  9849                           
  9850                           ;psect for function ___ftsub
  9851  15AE                     ___ftsub:	
  9852                           
  9853                           ;incstack = 0
  9854                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  9855  15AE  0020               	movlb	0	; select bank0
  9856  15AF  0857               	movf	___ftsub@f2+2,w
  9857  15B0  0456               	iorwf	___ftsub@f2+1,w
  9858  15B1  0455               	iorwf	___ftsub@f2,w
  9859  15B2  1903               	skipnz
  9860  15B3  2DB6               	goto	l2781
  9861  15B4  3080               	movlw	128
  9862  15B5  06D7               	xorwf	___ftsub@f2+2,f
  9863  15B6                     l2781:	
  9864  15B6  0858               	movf	___ftsub@f1,w
  9865  15B7  00C8               	movwf	___ftadd@f1
  9866  15B8  0859               	movf	___ftsub@f1+1,w
  9867  15B9  00C9               	movwf	___ftadd@f1+1
  9868  15BA  085A               	movf	___ftsub@f1+2,w
  9869  15BB  00CA               	movwf	___ftadd@f1+2
  9870  15BC  0855               	movf	___ftsub@f2,w
  9871  15BD  00CB               	movwf	___ftadd@f2
  9872  15BE  0856               	movf	___ftsub@f2+1,w
  9873  15BF  00CC               	movwf	___ftadd@f2+1
  9874  15C0  0857               	movf	___ftsub@f2+2,w
  9875  15C1  00CD               	movwf	___ftadd@f2+2
  9876  15C2  318A  2244         	fcall	___ftadd
  9877  15C4  0020               	movlb	0	; select bank0
  9878  15C5  0848               	movf	?___ftadd,w
  9879  15C6  00D5               	movwf	?___ftsub
  9880  15C7  0849               	movf	?___ftadd+1,w
  9881  15C8  00D6               	movwf	?___ftsub+1
  9882  15C9  084A               	movf	?___ftadd+2,w
  9883  15CA  00D7               	movwf	?___ftsub+2
  9884  15CB  0008               	return
  9885  15CC                     __end_of___ftsub:	
  9886                           
  9887                           	psect	text19
  9888  0A44                     __ptext19:	
  9889 ;; *************** function ___ftadd *****************
  9890 ;; Defined at:
  9891 ;;		line 86 in file "C:\Program Files\Microchip\xc8\v1.38\sources\common\ftadd.c"
  9892 ;; Parameters:    Size  Location     Type
  9893 ;;  f1              3   40[BANK0 ] float 
  9894 ;;  f2              3   43[BANK0 ] float 
  9895 ;; Auto vars:     Size  Location     Type
  9896 ;;  exp1            1   52[BANK0 ] unsigned char 
  9897 ;;  exp2            1   51[BANK0 ] unsigned char 
  9898 ;;  sign            1   50[BANK0 ] unsigned char 
  9899 ;; Return value:  Size  Location     Type
  9900 ;;                  3   40[BANK0 ] float 
  9901 ;; Registers used:
  9902 ;;		wreg, status,2, status,0, pclath, cstack
  9903 ;; Tracked objects:
  9904 ;;		On entry : 0/0
  9905 ;;		On exit  : 0/0
  9906 ;;		Unchanged: 0/0
  9907 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9908 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9909 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9910 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9911 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9912 ;;Total ram usage:       13 bytes
  9913 ;; Hardware stack levels used:    1
  9914 ;; Hardware stack levels required when called:    2
  9915 ;; This function calls:
  9916 ;;		___ftpack
  9917 ;; This function is called by:
  9918 ;;		_main
  9919 ;;		_sprintf
  9920 ;;		___ftsub
  9921 ;; This function uses a non-reentrant model
  9922 ;;
  9923                           
  9924                           
  9925                           ;psect for function ___ftadd
  9926  0A44                     ___ftadd:	
  9927                           
  9928                           ;incstack = 0
  9929                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  9930  0A44  0020               	movlb	0	; select bank0
  9931  0A45  0848               	movf	___ftadd@f1,w
  9932  0A46  00CE               	movwf	??___ftadd
  9933  0A47  0849               	movf	___ftadd@f1+1,w
  9934  0A48  00CF               	movwf	??___ftadd+1
  9935  0A49  084A               	movf	___ftadd@f1+2,w
  9936  0A4A  00D0               	movwf	??___ftadd+2
  9937  0A4B  1003               	clrc
  9938  0A4C  0D4F               	rlf	??___ftadd+1,w
  9939  0A4D  0D50               	rlf	??___ftadd+2,w
  9940  0A4E  00D1               	movwf	??___ftadd+3
  9941  0A4F  0851               	movf	??___ftadd+3,w
  9942  0A50  00D4               	movwf	___ftadd@exp1
  9943  0A51  084B               	movf	___ftadd@f2,w
  9944  0A52  00CE               	movwf	??___ftadd
  9945  0A53  084C               	movf	___ftadd@f2+1,w
  9946  0A54  00CF               	movwf	??___ftadd+1
  9947  0A55  084D               	movf	___ftadd@f2+2,w
  9948  0A56  00D0               	movwf	??___ftadd+2
  9949  0A57  1003               	clrc
  9950  0A58  0D4F               	rlf	??___ftadd+1,w
  9951  0A59  0D50               	rlf	??___ftadd+2,w
  9952  0A5A  00D1               	movwf	??___ftadd+3
  9953  0A5B  0851               	movf	??___ftadd+3,w
  9954  0A5C  00D3               	movwf	___ftadd@exp2
  9955  0A5D  0854               	movf	___ftadd@exp1,w
  9956  0A5E  1903               	btfsc	3,2
  9957  0A5F  2A6C               	goto	l2463
  9958  0A60  0853               	movf	___ftadd@exp2,w
  9959  0A61  0254               	subwf	___ftadd@exp1,w
  9960  0A62  1803               	skipnc
  9961  0A63  2A73               	goto	l2467
  9962  0A64  0354               	decf	___ftadd@exp1,w
  9963  0A65  3AFF               	xorlw	255
  9964  0A66  0753               	addwf	___ftadd@exp2,w
  9965  0A67  00CE               	movwf	??___ftadd
  9966  0A68  3019               	movlw	25
  9967  0A69  024E               	subwf	??___ftadd,w
  9968  0A6A  1C03               	skipc
  9969  0A6B  2A73               	goto	l2467
  9970  0A6C                     l2463:	
  9971  0A6C  084B               	movf	___ftadd@f2,w
  9972  0A6D  00C8               	movwf	?___ftadd
  9973  0A6E  084C               	movf	___ftadd@f2+1,w
  9974  0A6F  00C9               	movwf	?___ftadd+1
  9975  0A70  084D               	movf	___ftadd@f2+2,w
  9976  0A71  00CA               	movwf	?___ftadd+2
  9977  0A72  0008               	return
  9978  0A73                     l2467:	
  9979  0A73  0853               	movf	___ftadd@exp2,w
  9980  0A74  1903               	btfsc	3,2
  9981  0A75  0008               	return
  9982  0A76  0854               	movf	___ftadd@exp1,w
  9983  0A77  0253               	subwf	___ftadd@exp2,w
  9984  0A78  1803               	skipnc
  9985  0A79  2A82               	goto	l2473
  9986  0A7A  0353               	decf	___ftadd@exp2,w
  9987  0A7B  3AFF               	xorlw	255
  9988  0A7C  0754               	addwf	___ftadd@exp1,w
  9989  0A7D  00CE               	movwf	??___ftadd
  9990  0A7E  3019               	movlw	25
  9991  0A7F  024E               	subwf	??___ftadd,w
  9992  0A80  1803               	btfsc	3,0
  9993  0A81  0008               	return
  9994  0A82                     l2473:	
  9995  0A82  3006               	movlw	6
  9996  0A83  00CE               	movwf	??___ftadd
  9997  0A84  084E               	movf	??___ftadd,w
  9998  0A85  00D2               	movwf	___ftadd@sign
  9999  0A86  1BCA               	btfsc	___ftadd@f1+2,7
 10000  0A87  17D2               	bsf	___ftadd@sign,7
 10001  0A88  1BCD               	btfsc	___ftadd@f2+2,7
 10002  0A89  1752               	bsf	___ftadd@sign,6
 10003  0A8A  17C9               	bsf	___ftadd@f1+1,7
 10004  0A8B  30FF               	movlw	255
 10005  0A8C  05C8               	andwf	___ftadd@f1,f
 10006  0A8D  30FF               	movlw	255
 10007  0A8E  05C9               	andwf	___ftadd@f1+1,f
 10008  0A8F  3000               	movlw	0
 10009  0A90  05CA               	andwf	___ftadd@f1+2,f
 10010  0A91  17CC               	bsf	___ftadd@f2+1,7
 10011  0A92  30FF               	movlw	255
 10012  0A93  05CB               	andwf	___ftadd@f2,f
 10013  0A94  30FF               	movlw	255
 10014  0A95  05CC               	andwf	___ftadd@f2+1,f
 10015  0A96  3000               	movlw	0
 10016  0A97  05CD               	andwf	___ftadd@f2+2,f
 10017  0A98  0853               	movf	___ftadd@exp2,w
 10018  0A99  0254               	subwf	___ftadd@exp1,w
 10019  0A9A  1803               	skipnc
 10020  0A9B  2ABE               	goto	l2495
 10021  0A9C                     l2485:	
 10022  0A9C  3001               	movlw	1
 10023  0A9D                     u2305:	
 10024  0A9D  35CB               	lslf	___ftadd@f2,f
 10025  0A9E  0DCC               	rlf	___ftadd@f2+1,f
 10026  0A9F  0DCD               	rlf	___ftadd@f2+2,f
 10027  0AA0  0B89               	decfsz	9,f
 10028  0AA1  2A9D               	goto	u2305
 10029  0AA2  3001               	movlw	1
 10030  0AA3  02D3               	subwf	___ftadd@exp2,f
 10031  0AA4  0853               	movf	___ftadd@exp2,w
 10032  0AA5  0654               	xorwf	___ftadd@exp1,w
 10033  0AA6  1903               	skipnz
 10034  0AA7  2AB9               	goto	l2493
 10035  0AA8  3001               	movlw	1
 10036  0AA9  02D2               	subwf	___ftadd@sign,f
 10037  0AAA  0852               	movf	___ftadd@sign,w
 10038  0AAB  3907               	andlw	7
 10039  0AAC  1903               	btfsc	3,2
 10040  0AAD  2AB9               	goto	l2493
 10041  0AAE  2A9C               	goto	l2485
 10042  0AAF                     l2491:	
 10043  0AAF  3001               	movlw	1
 10044  0AB0                     u2335:	
 10045  0AB0  36CA               	lsrf	___ftadd@f1+2,f
 10046  0AB1  0CC9               	rrf	___ftadd@f1+1,f
 10047  0AB2  0CC8               	rrf	___ftadd@f1,f
 10048  0AB3  0B89               	decfsz	9,f
 10049  0AB4  2AB0               	goto	u2335
 10050  0AB5  3001               	movlw	1
 10051  0AB6  00CE               	movwf	??___ftadd
 10052  0AB7  084E               	movf	??___ftadd,w
 10053  0AB8  07D4               	addwf	___ftadd@exp1,f
 10054  0AB9                     l2493:	
 10055  0AB9  0854               	movf	___ftadd@exp1,w
 10056  0ABA  0653               	xorwf	___ftadd@exp2,w
 10057  0ABB  1903               	btfsc	3,2
 10058  0ABC  2AE3               	goto	l866
 10059  0ABD  2AAF               	goto	l2491
 10060  0ABE                     l2495:	
 10061  0ABE  0854               	movf	___ftadd@exp1,w
 10062  0ABF  0253               	subwf	___ftadd@exp2,w
 10063  0AC0  1803               	skipnc
 10064  0AC1  2AE3               	goto	l866
 10065  0AC2                     l2497:	
 10066  0AC2  3001               	movlw	1
 10067  0AC3                     u2365:	
 10068  0AC3  35C8               	lslf	___ftadd@f1,f
 10069  0AC4  0DC9               	rlf	___ftadd@f1+1,f
 10070  0AC5  0DCA               	rlf	___ftadd@f1+2,f
 10071  0AC6  0B89               	decfsz	9,f
 10072  0AC7  2AC3               	goto	u2365
 10073  0AC8  3001               	movlw	1
 10074  0AC9  02D4               	subwf	___ftadd@exp1,f
 10075  0ACA  0853               	movf	___ftadd@exp2,w
 10076  0ACB  0654               	xorwf	___ftadd@exp1,w
 10077  0ACC  1903               	skipnz
 10078  0ACD  2ADF               	goto	l2505
 10079  0ACE  3001               	movlw	1
 10080  0ACF  02D2               	subwf	___ftadd@sign,f
 10081  0AD0  0852               	movf	___ftadd@sign,w
 10082  0AD1  3907               	andlw	7
 10083  0AD2  1903               	btfsc	3,2
 10084  0AD3  2ADF               	goto	l2505
 10085  0AD4  2AC2               	goto	l2497
 10086  0AD5                     l2503:	
 10087  0AD5  3001               	movlw	1
 10088  0AD6                     u2395:	
 10089  0AD6  36CD               	lsrf	___ftadd@f2+2,f
 10090  0AD7  0CCC               	rrf	___ftadd@f2+1,f
 10091  0AD8  0CCB               	rrf	___ftadd@f2,f
 10092  0AD9  0B89               	decfsz	9,f
 10093  0ADA  2AD6               	goto	u2395
 10094  0ADB  3001               	movlw	1
 10095  0ADC  00CE               	movwf	??___ftadd
 10096  0ADD  084E               	movf	??___ftadd,w
 10097  0ADE  07D3               	addwf	___ftadd@exp2,f
 10098  0ADF                     l2505:	
 10099  0ADF  0854               	movf	___ftadd@exp1,w
 10100  0AE0  0653               	xorwf	___ftadd@exp2,w
 10101  0AE1  1D03               	skipz
 10102  0AE2  2AD5               	goto	l2503
 10103  0AE3                     l866:	
 10104  0AE3  1FD2               	btfss	___ftadd@sign,7
 10105  0AE4  2AF5               	goto	l2509
 10106  0AE5  30FF               	movlw	255
 10107  0AE6  06C8               	xorwf	___ftadd@f1,f
 10108  0AE7  30FF               	movlw	255
 10109  0AE8  06C9               	xorwf	___ftadd@f1+1,f
 10110  0AE9  30FF               	movlw	255
 10111  0AEA  06CA               	xorwf	___ftadd@f1+2,f
 10112  0AEB  3001               	movlw	1
 10113  0AEC  07C8               	addwf	___ftadd@f1,f
 10114  0AED  3000               	movlw	0
 10115  0AEE  1803               	skipnc
 10116  0AEF  3001               	movlw	1
 10117  0AF0  07C9               	addwf	___ftadd@f1+1,f
 10118  0AF1  3000               	movlw	0
 10119  0AF2  1803               	skipnc
 10120  0AF3  3001               	movlw	1
 10121  0AF4  07CA               	addwf	___ftadd@f1+2,f
 10122  0AF5                     l2509:	
 10123  0AF5  1F52               	btfss	___ftadd@sign,6
 10124  0AF6  2B07               	goto	l2513
 10125  0AF7  30FF               	movlw	255
 10126  0AF8  06CB               	xorwf	___ftadd@f2,f
 10127  0AF9  30FF               	movlw	255
 10128  0AFA  06CC               	xorwf	___ftadd@f2+1,f
 10129  0AFB  30FF               	movlw	255
 10130  0AFC  06CD               	xorwf	___ftadd@f2+2,f
 10131  0AFD  3001               	movlw	1
 10132  0AFE  07CB               	addwf	___ftadd@f2,f
 10133  0AFF  3000               	movlw	0
 10134  0B00  1803               	skipnc
 10135  0B01  3001               	movlw	1
 10136  0B02  07CC               	addwf	___ftadd@f2+1,f
 10137  0B03  3000               	movlw	0
 10138  0B04  1803               	skipnc
 10139  0B05  3001               	movlw	1
 10140  0B06  07CD               	addwf	___ftadd@f2+2,f
 10141  0B07                     l2513:	
 10142  0B07  01D2               	clrf	___ftadd@sign
 10143  0B08  0848               	movf	___ftadd@f1,w
 10144  0B09  07CB               	addwf	___ftadd@f2,f
 10145  0B0A  0849               	movf	___ftadd@f1+1,w
 10146  0B0B  3DCC               	addwfc	___ftadd@f2+1,f
 10147  0B0C  084A               	movf	___ftadd@f1+2,w
 10148  0B0D  3DCD               	addwfc	___ftadd@f2+2,f
 10149  0B0E  1FCD               	btfss	___ftadd@f2+2,7
 10150  0B0F  2B22               	goto	l2523
 10151  0B10  30FF               	movlw	255
 10152  0B11  06CB               	xorwf	___ftadd@f2,f
 10153  0B12  30FF               	movlw	255
 10154  0B13  06CC               	xorwf	___ftadd@f2+1,f
 10155  0B14  30FF               	movlw	255
 10156  0B15  06CD               	xorwf	___ftadd@f2+2,f
 10157  0B16  3001               	movlw	1
 10158  0B17  07CB               	addwf	___ftadd@f2,f
 10159  0B18  3000               	movlw	0
 10160  0B19  1803               	skipnc
 10161  0B1A  3001               	movlw	1
 10162  0B1B  07CC               	addwf	___ftadd@f2+1,f
 10163  0B1C  3000               	movlw	0
 10164  0B1D  1803               	skipnc
 10165  0B1E  3001               	movlw	1
 10166  0B1F  07CD               	addwf	___ftadd@f2+2,f
 10167  0B20  01D2               	clrf	___ftadd@sign
 10168  0B21  0AD2               	incf	___ftadd@sign,f
 10169  0B22                     l2523:	
 10170  0B22  084B               	movf	___ftadd@f2,w
 10171  0B23  00F1               	movwf	___ftpack@arg
 10172  0B24  084C               	movf	___ftadd@f2+1,w
 10173  0B25  00F2               	movwf	___ftpack@arg+1
 10174  0B26  084D               	movf	___ftadd@f2+2,w
 10175  0B27  00F3               	movwf	___ftpack@arg+2
 10176  0B28  0854               	movf	___ftadd@exp1,w
 10177  0B29  00CE               	movwf	??___ftadd
 10178  0B2A  084E               	movf	??___ftadd,w
 10179  0B2B  00F4               	movwf	___ftpack@exp
 10180  0B2C  0852               	movf	___ftadd@sign,w
 10181  0B2D  00CF               	movwf	??___ftadd+1
 10182  0B2E  084F               	movf	??___ftadd+1,w
 10183  0B2F  00F5               	movwf	___ftpack@sign
 10184  0B30  3197  279C         	fcall	___ftpack
 10185  0B32  0871               	movf	?___ftpack,w
 10186  0B33  0020               	movlb	0	; select bank0
 10187  0B34  00C8               	movwf	?___ftadd
 10188  0B35  0872               	movf	?___ftpack+1,w
 10189  0B36  00C9               	movwf	?___ftadd+1
 10190  0B37  0873               	movf	?___ftpack+2,w
 10191  0B38  00CA               	movwf	?___ftadd+2
 10192  0B39  0008               	return
 10193  0B3A                     __end_of___ftadd:	
 10194                           
 10195                           	psect	text20
 10196  179C                     __ptext20:	
 10197 ;; *************** function ___ftpack *****************
 10198 ;; Defined at:
 10199 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v1.38\sources\common\float.c"
 10200 ;; Parameters:    Size  Location     Type
 10201 ;;  arg             3    1[COMMON] unsigned um
 10202 ;;  exp             1    4[COMMON] unsigned char 
 10203 ;;  sign            1    5[COMMON] unsigned char 
 10204 ;; Auto vars:     Size  Location     Type
 10205 ;;		None
 10206 ;; Return value:  Size  Location     Type
 10207 ;;                  3    1[COMMON] float 
 10208 ;; Registers used:
 10209 ;;		wreg, status,2, status,0
 10210 ;; Tracked objects:
 10211 ;;		On entry : 0/0
 10212 ;;		On exit  : 0/0
 10213 ;;		Unchanged: 0/0
 10214 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10215 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10216 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10217 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10218 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10219 ;;Total ram usage:        8 bytes
 10220 ;; Hardware stack levels used:    1
 10221 ;; Hardware stack levels required when called:    1
 10222 ;; This function calls:
 10223 ;;		Nothing
 10224 ;; This function is called by:
 10225 ;;		___ftadd
 10226 ;;		___ftdiv
 10227 ;;		___ftmul
 10228 ;;		___lltoft
 10229 ;;		___lwtoft
 10230 ;; This function uses a non-reentrant model
 10231 ;;
 10232                           
 10233                           
 10234                           ;psect for function ___ftpack
 10235  179C                     ___ftpack:	
 10236                           
 10237                           ;incstack = 0
 10238                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 10239  179C  0874               	movf	___ftpack@exp,w
 10240  179D  1903               	btfsc	3,2
 10241  179E  2FA4               	goto	l2333
 10242  179F  0873               	movf	___ftpack@arg+2,w
 10243  17A0  0472               	iorwf	___ftpack@arg+1,w
 10244  17A1  0471               	iorwf	___ftpack@arg,w
 10245  17A2  1D03               	skipz
 10246  17A3  2FB5               	goto	l2339
 10247  17A4                     l2333:	
 10248  17A4  3000               	movlw	0
 10249  17A5  00F1               	movwf	?___ftpack
 10250  17A6  3000               	movlw	0
 10251  17A7  00F2               	movwf	?___ftpack+1
 10252  17A8  3000               	movlw	0
 10253  17A9  00F3               	movwf	?___ftpack+2
 10254  17AA  0008               	return
 10255  17AB                     l2337:	
 10256  17AB  3001               	movlw	1
 10257  17AC  00F6               	movwf	??___ftpack
 10258  17AD  0876               	movf	??___ftpack,w
 10259  17AE  07F4               	addwf	___ftpack@exp,f
 10260  17AF  3001               	movlw	1
 10261  17B0                     u1885:	
 10262  17B0  36F3               	lsrf	___ftpack@arg+2,f
 10263  17B1  0CF2               	rrf	___ftpack@arg+1,f
 10264  17B2  0CF1               	rrf	___ftpack@arg,f
 10265  17B3  0B89               	decfsz	9,f
 10266  17B4  2FB0               	goto	u1885
 10267  17B5                     l2339:	
 10268  17B5  30FE               	movlw	254
 10269  17B6  0573               	andwf	___ftpack@arg+2,w
 10270  17B7  1903               	btfsc	3,2
 10271  17B8  2FCE               	goto	l835
 10272  17B9  2FAB               	goto	l2337
 10273  17BA                     l2341:	
 10274  17BA  3001               	movlw	1
 10275  17BB  00F6               	movwf	??___ftpack
 10276  17BC  0876               	movf	??___ftpack,w
 10277  17BD  07F4               	addwf	___ftpack@exp,f
 10278  17BE  3001               	movlw	1
 10279  17BF  07F1               	addwf	___ftpack@arg,f
 10280  17C0  3000               	movlw	0
 10281  17C1  1803               	skipnc
 10282  17C2  3001               	movlw	1
 10283  17C3  07F2               	addwf	___ftpack@arg+1,f
 10284  17C4  3000               	movlw	0
 10285  17C5  1803               	skipnc
 10286  17C6  3001               	movlw	1
 10287  17C7  07F3               	addwf	___ftpack@arg+2,f
 10288  17C8  3001               	movlw	1
 10289  17C9                     u1905:	
 10290  17C9  36F3               	lsrf	___ftpack@arg+2,f
 10291  17CA  0CF2               	rrf	___ftpack@arg+1,f
 10292  17CB  0CF1               	rrf	___ftpack@arg,f
 10293  17CC  0B89               	decfsz	9,f
 10294  17CD  2FC9               	goto	u1905
 10295  17CE                     l835:	
 10296  17CE  30FF               	movlw	255
 10297  17CF  0573               	andwf	___ftpack@arg+2,w
 10298  17D0  1903               	btfsc	3,2
 10299  17D1  2FDB               	goto	l2349
 10300  17D2  2FBA               	goto	l2341
 10301  17D3                     l2347:	
 10302  17D3  3001               	movlw	1
 10303  17D4  02F4               	subwf	___ftpack@exp,f
 10304  17D5  3001               	movlw	1
 10305  17D6                     u1925:	
 10306  17D6  35F1               	lslf	___ftpack@arg,f
 10307  17D7  0DF2               	rlf	___ftpack@arg+1,f
 10308  17D8  0DF3               	rlf	___ftpack@arg+2,f
 10309  17D9  0B89               	decfsz	9,f
 10310  17DA  2FD6               	goto	u1925
 10311  17DB                     l2349:	
 10312  17DB  1BF2               	btfsc	___ftpack@arg+1,7
 10313  17DC  2FE1               	goto	l842
 10314  17DD  3002               	movlw	2
 10315  17DE  0274               	subwf	___ftpack@exp,w
 10316  17DF  1803               	skipnc
 10317  17E0  2FD3               	goto	l2347
 10318  17E1                     l842:	
 10319  17E1  1874               	btfsc	___ftpack@exp,0
 10320  17E2  2FE9               	goto	l843
 10321  17E3  30FF               	movlw	255
 10322  17E4  05F1               	andwf	___ftpack@arg,f
 10323  17E5  307F               	movlw	127
 10324  17E6  05F2               	andwf	___ftpack@arg+1,f
 10325  17E7  30FF               	movlw	255
 10326  17E8  05F3               	andwf	___ftpack@arg+2,f
 10327  17E9                     l843:	
 10328  17E9  1003               	clrc
 10329  17EA  0CF4               	rrf	___ftpack@exp,f
 10330  17EB  0874               	movf	___ftpack@exp,w
 10331  17EC  00F6               	movwf	??___ftpack
 10332  17ED  01F7               	clrf	??___ftpack+1
 10333  17EE  01F8               	clrf	??___ftpack+2
 10334  17EF  3010               	movlw	16
 10335  17F0                     u1965:	
 10336  17F0  35F6               	lslf	??___ftpack,f
 10337  17F1  0DF7               	rlf	??___ftpack+1,f
 10338  17F2  0DF8               	rlf	??___ftpack+2,f
 10339  17F3  0B89               	decfsz	9,f
 10340  17F4  2FF0               	goto	u1965
 10341  17F5  0876               	movf	??___ftpack,w
 10342  17F6  04F1               	iorwf	___ftpack@arg,f
 10343  17F7  0877               	movf	??___ftpack+1,w
 10344  17F8  04F2               	iorwf	___ftpack@arg+1,f
 10345  17F9  0878               	movf	??___ftpack+2,w
 10346  17FA  04F3               	iorwf	___ftpack@arg+2,f
 10347  17FB  0875               	movf	___ftpack@sign,w
 10348  17FC  1903               	btfsc	3,2
 10349  17FD  0008               	return
 10350  17FE  17F3               	bsf	___ftpack@arg+2,7
 10351  17FF  0008               	return
 10352  1800                     __end_of___ftpack:	
 10353                           
 10354                           	psect	text21
 10355  0800                     __ptext21:	
 10356 ;; *************** function ___ftneg *****************
 10357 ;; Defined at:
 10358 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.38\sources\common\ftneg.c"
 10359 ;; Parameters:    Size  Location     Type
 10360 ;;  f1              3    1[COMMON] float 
 10361 ;; Auto vars:     Size  Location     Type
 10362 ;;		None
 10363 ;; Return value:  Size  Location     Type
 10364 ;;                  3    1[COMMON] float 
 10365 ;; Registers used:
 10366 ;;		wreg
 10367 ;; Tracked objects:
 10368 ;;		On entry : 0/0
 10369 ;;		On exit  : 0/0
 10370 ;;		Unchanged: 0/0
 10371 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10372 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10373 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10374 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10375 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10376 ;;Total ram usage:        3 bytes
 10377 ;; Hardware stack levels used:    1
 10378 ;; Hardware stack levels required when called:    1
 10379 ;; This function calls:
 10380 ;;		Nothing
 10381 ;; This function is called by:
 10382 ;;		_main
 10383 ;;		_sprintf
 10384 ;;		_fabs
 10385 ;; This function uses a non-reentrant model
 10386 ;;
 10387                           
 10388                           
 10389                           ;psect for function ___ftneg
 10390  0800                     ___ftneg:	
 10391                           
 10392                           ;incstack = 0
 10393                           ; Regs used in ___ftneg: [wreg]
 10394  0800  0873               	movf	___ftneg@f1+2,w
 10395  0801  0472               	iorwf	___ftneg@f1+1,w
 10396  0802  0471               	iorwf	___ftneg@f1,w
 10397  0803  1903               	skipnz
 10398  0804  0008               	return
 10399  0805  3080               	movlw	128
 10400  0806  06F3               	xorwf	___ftneg@f1+2,f
 10401  0807  0008               	return
 10402  0808                     __end_of___ftneg:	
 10403                           
 10404                           	psect	text22
 10405  1635                     __ptext22:	
 10406 ;; *************** function ___ftge *****************
 10407 ;; Defined at:
 10408 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v1.38\sources\common\ftge.c"
 10409 ;; Parameters:    Size  Location     Type
 10410 ;;  ff1             3    1[COMMON] float 
 10411 ;;  ff2             3    4[COMMON] float 
 10412 ;; Auto vars:     Size  Location     Type
 10413 ;;		None
 10414 ;; Return value:  Size  Location     Type
 10415 ;;		None               void
 10416 ;; Registers used:
 10417 ;;		wreg, status,2, status,0
 10418 ;; Tracked objects:
 10419 ;;		On entry : 0/0
 10420 ;;		On exit  : 0/0
 10421 ;;		Unchanged: 0/0
 10422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10423 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10424 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10425 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10426 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10427 ;;Total ram usage:        9 bytes
 10428 ;; Hardware stack levels used:    1
 10429 ;; Hardware stack levels required when called:    1
 10430 ;; This function calls:
 10431 ;;		Nothing
 10432 ;; This function is called by:
 10433 ;;		_sprintf
 10434 ;;		_fabs
 10435 ;; This function uses a non-reentrant model
 10436 ;;
 10437                           
 10438                           
 10439                           ;psect for function ___ftge
 10440  1635                     ___ftge:	
 10441                           
 10442                           ;incstack = 0
 10443                           ; Regs used in ___ftge: [wreg+status,2+status,0]
 10444  1635  1FF3               	btfss	___ftge@ff1+2,7
 10445  1636  2E4B               	goto	l2753
 10446  1637  0971               	comf	___ftge@ff1,w
 10447  1638  00F7               	movwf	??___ftge
 10448  1639  0972               	comf	___ftge@ff1+1,w
 10449  163A  00F8               	movwf	??___ftge+1
 10450  163B  0973               	comf	___ftge@ff1+2,w
 10451  163C  00F9               	movwf	??___ftge+2
 10452  163D  0AF7               	incf	??___ftge,f
 10453  163E  1903               	skipnz
 10454  163F  0AF8               	incf	??___ftge+1,f
 10455  1640  1903               	skipnz
 10456  1641  0AF9               	incf	??___ftge+2,f
 10457  1642  3000               	movlw	0
 10458  1643  0777               	addwf	??___ftge,w
 10459  1644  00F1               	movwf	___ftge@ff1
 10460  1645  3000               	movlw	0
 10461  1646  3D78               	addwfc	??___ftge+1,w
 10462  1647  00F2               	movwf	___ftge@ff1+1
 10463  1648  3080               	movlw	128
 10464  1649  3D79               	addwfc	??___ftge+2,w
 10465  164A  00F3               	movwf	___ftge@ff1+2
 10466  164B                     l2753:	
 10467  164B  1FF6               	btfss	___ftge@ff2+2,7
 10468  164C  2E61               	goto	l2757
 10469  164D  0974               	comf	___ftge@ff2,w
 10470  164E  00F7               	movwf	??___ftge
 10471  164F  0975               	comf	___ftge@ff2+1,w
 10472  1650  00F8               	movwf	??___ftge+1
 10473  1651  0976               	comf	___ftge@ff2+2,w
 10474  1652  00F9               	movwf	??___ftge+2
 10475  1653  0AF7               	incf	??___ftge,f
 10476  1654  1903               	skipnz
 10477  1655  0AF8               	incf	??___ftge+1,f
 10478  1656  1903               	skipnz
 10479  1657  0AF9               	incf	??___ftge+2,f
 10480  1658  3000               	movlw	0
 10481  1659  0777               	addwf	??___ftge,w
 10482  165A  00F4               	movwf	___ftge@ff2
 10483  165B  3000               	movlw	0
 10484  165C  3D78               	addwfc	??___ftge+1,w
 10485  165D  00F5               	movwf	___ftge@ff2+1
 10486  165E  3080               	movlw	128
 10487  165F  3D79               	addwfc	??___ftge+2,w
 10488  1660  00F6               	movwf	___ftge@ff2+2
 10489  1661                     l2757:	
 10490  1661  3080               	movlw	128
 10491  1662  06F3               	xorwf	___ftge@ff1+2,f
 10492  1663  3080               	movlw	128
 10493  1664  06F6               	xorwf	___ftge@ff2+2,f
 10494  1665  0876               	movf	___ftge@ff2+2,w
 10495  1666  0273               	subwf	___ftge@ff1+2,w
 10496  1667  1D03               	skipz
 10497  1668  0008               	return
 10498  1669  0875               	movf	___ftge@ff2+1,w
 10499  166A  0272               	subwf	___ftge@ff1+1,w
 10500  166B  1D03               	skipz
 10501  166C  0008               	return
 10502  166D  0874               	movf	___ftge@ff2,w
 10503  166E  0271               	subwf	___ftge@ff1,w
 10504  166F  0008               	return
 10505  1670                     __end_of___ftge:	
 10506                           
 10507                           	psect	text23
 10508  1610                     __ptext23:	
 10509 ;; *************** function _USART_WriteString *****************
 10510 ;; Defined at:
 10511 ;;		line 170 in file "main.c"
 10512 ;; Parameters:    Size  Location     Type
 10513 ;;  _data           2    2[COMMON] PTR unsigned char 
 10514 ;;		 -> STR_5(6), STR_4(7), STR_3(7), STR_2(24), 
 10515 ;;		 -> USART_WriteValue@buf(15), 
 10516 ;; Auto vars:     Size  Location     Type
 10517 ;;  limiter         2    5[COMMON] int 
 10518 ;; Return value:  Size  Location     Type
 10519 ;;                  1    wreg      void 
 10520 ;; Registers used:
 10521 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10522 ;; Tracked objects:
 10523 ;;		On entry : 0/0
 10524 ;;		On exit  : 0/0
 10525 ;;		Unchanged: 0/0
 10526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10527 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10528 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10529 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10530 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10531 ;;Total ram usage:        5 bytes
 10532 ;; Hardware stack levels used:    1
 10533 ;; Hardware stack levels required when called:    2
 10534 ;; This function calls:
 10535 ;;		_USART_Write
 10536 ;; This function is called by:
 10537 ;;		_USART_WriteValue
 10538 ;;		_main
 10539 ;; This function uses a non-reentrant model
 10540 ;;
 10541                           
 10542                           
 10543                           ;psect for function _USART_WriteString
 10544  1610                     _USART_WriteString:	
 10545                           
 10546                           ;main.c: 172: int limiter = 0;
 10547                           
 10548                           ;incstack = 0
 10549                           ; Regs used in _USART_WriteString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10550  1610  01F5               	clrf	USART_WriteString@limiter
 10551  1611  01F6               	clrf	USART_WriteString@limiter+1
 10552  1612                     l2889:	
 10553                           ;main.c: 173: while(*(_data + limiter) != 0 && limiter < 100)
 10554                           
 10555  1612  0872               	movf	USART_WriteString@_data,w
 10556  1613  0775               	addwf	USART_WriteString@limiter,w
 10557  1614  0084               	movwf	4
 10558  1615  0873               	movf	USART_WriteString@_data+1,w
 10559  1616  3D76               	addwfc	USART_WriteString@limiter+1,w
 10560  1617  0085               	movwf	5
 10561  1618  0012               	moviw fsr0++
 10562  1619  1903               	btfsc	3,2
 10563  161A  0008               	return
 10564  161B  0876               	movf	USART_WriteString@limiter+1,w
 10565  161C  3A80               	xorlw	128
 10566  161D  00F4               	movwf	??_USART_WriteString
 10567  161E  3080               	movlw	128
 10568  161F  0274               	subwf	??_USART_WriteString,w
 10569  1620  1D03               	skipz
 10570  1621  2E24               	goto	u3205
 10571  1622  3064               	movlw	100
 10572  1623  0275               	subwf	USART_WriteString@limiter,w
 10573  1624                     u3205:	
 10574  1624  1803               	btfsc	3,0
 10575  1625  0008               	return
 10576                           
 10577                           ;main.c: 174: {
 10578                           ;main.c: 175: USART_Write(*(_data + limiter));
 10579  1626  0872               	movf	USART_WriteString@_data,w
 10580  1627  0775               	addwf	USART_WriteString@limiter,w
 10581  1628  0084               	movwf	4
 10582  1629  0873               	movf	USART_WriteString@_data+1,w
 10583  162A  3D76               	addwfc	USART_WriteString@limiter+1,w
 10584  162B  0085               	movwf	5
 10585  162C  0800               	movf	0,w	;code access
 10586  162D  3195  2517  3196   	fcall	_USART_Write
 10587                           
 10588                           ;main.c: 176: limiter++;
 10589  1630  3001               	movlw	1
 10590  1631  07F5               	addwf	USART_WriteString@limiter,f
 10591  1632  3000               	movlw	0
 10592  1633  3DF6               	addwfc	USART_WriteString@limiter+1,f
 10593  1634  2E12               	goto	l2889
 10594  1635                     __end_of_USART_WriteString:	
 10595                           
 10596                           	psect	text24
 10597  1517                     __ptext24:	
 10598 ;; *************** function _USART_Write *****************
 10599 ;; Defined at:
 10600 ;;		line 164 in file "main.c"
 10601 ;; Parameters:    Size  Location     Type
 10602 ;;  txData          1    wreg     unsigned char 
 10603 ;; Auto vars:     Size  Location     Type
 10604 ;;  txData          1    1[COMMON] unsigned char 
 10605 ;; Return value:  Size  Location     Type
 10606 ;;                  1    wreg      void 
 10607 ;; Registers used:
 10608 ;;		wreg
 10609 ;; Tracked objects:
 10610 ;;		On entry : 0/0
 10611 ;;		On exit  : 0/0
 10612 ;;		Unchanged: 0/0
 10613 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10614 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10615 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10616 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10617 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10618 ;;Total ram usage:        1 bytes
 10619 ;; Hardware stack levels used:    1
 10620 ;; Hardware stack levels required when called:    1
 10621 ;; This function calls:
 10622 ;;		Nothing
 10623 ;; This function is called by:
 10624 ;;		_USART_WriteString
 10625 ;;		_main
 10626 ;; This function uses a non-reentrant model
 10627 ;;
 10628                           
 10629                           
 10630                           ;psect for function _USART_Write
 10631  1517                     _USART_Write:	
 10632                           
 10633                           ;incstack = 0
 10634                           ; Regs used in _USART_Write: [wreg]
 10635                           ;USART_Write@txData stored from wreg
 10636  1517  00F1               	movwf	USART_Write@txData
 10637  1518                     l508:	
 10638                           ;main.c: 166: while(!TRMT);
 10639                           
 10640  1518  0023               	movlb	3	; select bank3
 10641  1519  1C9E               	btfss	30,1	;volatile
 10642  151A  2D18               	goto	l508
 10643                           
 10644                           ;main.c: 167: TX1REG = txData;
 10645  151B  0871               	movf	USART_Write@txData,w
 10646  151C  009A               	movwf	26	;volatile
 10647  151D  0008               	return
 10648  151E                     __end_of_USART_Write:	
 10649                           
 10650                           	psect	text25
 10651  1543                     __ptext25:	
 10652 ;; *************** function _USART_Initialize *****************
 10653 ;; Defined at:
 10654 ;;		line 143 in file "main.c"
 10655 ;; Parameters:    Size  Location     Type
 10656 ;;		None
 10657 ;; Auto vars:     Size  Location     Type
 10658 ;;		None
 10659 ;; Return value:  Size  Location     Type
 10660 ;;                  1    wreg      void 
 10661 ;; Registers used:
 10662 ;;		wreg
 10663 ;; Tracked objects:
 10664 ;;		On entry : 0/0
 10665 ;;		On exit  : 0/0
 10666 ;;		Unchanged: 0/0
 10667 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10668 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10669 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10670 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10671 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10672 ;;Total ram usage:        0 bytes
 10673 ;; Hardware stack levels used:    1
 10674 ;; Hardware stack levels required when called:    1
 10675 ;; This function calls:
 10676 ;;		Nothing
 10677 ;; This function is called by:
 10678 ;;		_main
 10679 ;; This function uses a non-reentrant model
 10680 ;;
 10681                           
 10682                           
 10683                           ;psect for function _USART_Initialize
 10684  1543                     _USART_Initialize:	
 10685                           
 10686                           ;main.c: 148: BAUD1CON = 0x08;
 10687                           
 10688                           ;incstack = 0
 10689                           ; Regs used in _USART_Initialize: [wreg]
 10690  1543  3008               	movlw	8
 10691  1544  0023               	movlb	3	; select bank3
 10692  1545  009F               	movwf	31	;volatile
 10693                           
 10694                           ;main.c: 151: RC1STA = 0x80;
 10695  1546  3080               	movlw	128
 10696  1547  009D               	movwf	29	;volatile
 10697                           
 10698                           ;main.c: 154: TX1STA = 0x24;
 10699  1548  3024               	movlw	36
 10700  1549  009E               	movwf	30	;volatile
 10701                           
 10702                           ;main.c: 157: SP1BRGL = 0x40;
 10703  154A  3040               	movlw	64
 10704  154B  009B               	movwf	27	;volatile
 10705                           
 10706                           ;main.c: 160: SP1BRGH = 0x03;
 10707  154C  3003               	movlw	3
 10708  154D  009C               	movwf	28	;volatile
 10709  154E  0008               	return
 10710  154F                     __end_of_USART_Initialize:	
 10711                           
 10712                           	psect	text26
 10713  1530                     __ptext26:	
 10714 ;; *************** function _TMR2_Initialize *****************
 10715 ;; Defined at:
 10716 ;;		line 57 in file "mcc_generated_files/tmr2.c"
 10717 ;; Parameters:    Size  Location     Type
 10718 ;;		None
 10719 ;; Auto vars:     Size  Location     Type
 10720 ;;		None
 10721 ;; Return value:  Size  Location     Type
 10722 ;;                  1    wreg      void 
 10723 ;; Registers used:
 10724 ;;		wreg, status,2, status,0, pclath, cstack
 10725 ;; Tracked objects:
 10726 ;;		On entry : 0/0
 10727 ;;		On exit  : 0/0
 10728 ;;		Unchanged: 0/0
 10729 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10730 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10731 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10732 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10733 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10734 ;;Total ram usage:        0 bytes
 10735 ;; Hardware stack levels used:    1
 10736 ;; Hardware stack levels required when called:    2
 10737 ;; This function calls:
 10738 ;;		_TMR2_StartTimer
 10739 ;; This function is called by:
 10740 ;;		_main
 10741 ;;		_SYSTEM_Initialize
 10742 ;; This function uses a non-reentrant model
 10743 ;;
 10744                           
 10745                           
 10746                           ;psect for function _TMR2_Initialize
 10747  1530                     _TMR2_Initialize:	
 10748                           
 10749                           ;tmr2.c: 62: T2CON = 0x00;
 10750                           
 10751                           ;incstack = 0
 10752                           ; Regs used in _TMR2_Initialize: [wreg+status,2+status,0+pclath+cstack]
 10753  1530  0020               	movlb	0	; select bank0
 10754  1531  019C               	clrf	28	;volatile
 10755                           
 10756                           ;tmr2.c: 65: PR2 = 0x9F;
 10757  1532  309F               	movlw	159
 10758  1533  009B               	movwf	27	;volatile
 10759                           
 10760                           ;tmr2.c: 68: TMR2 = 0x00;
 10761  1534  019A               	clrf	26	;volatile
 10762                           
 10763                           ;tmr2.c: 71: PIR1bits.TMR2IF = 0;
 10764  1535  1091               	bcf	17,1	;volatile
 10765                           
 10766                           ;tmr2.c: 74: TMR2_StartTimer();
 10767  1536  3187  27FC         	fcall	_TMR2_StartTimer
 10768  1538  0008               	return
 10769  1539                     __end_of_TMR2_Initialize:	
 10770                           
 10771                           	psect	text27
 10772  07FC                     __ptext27:	
 10773 ;; *************** function _TMR2_StartTimer *****************
 10774 ;; Defined at:
 10775 ;;		line 77 in file "mcc_generated_files/tmr2.c"
 10776 ;; Parameters:    Size  Location     Type
 10777 ;;		None
 10778 ;; Auto vars:     Size  Location     Type
 10779 ;;		None
 10780 ;; Return value:  Size  Location     Type
 10781 ;;                  1    wreg      void 
 10782 ;; Registers used:
 10783 ;;		None
 10784 ;; Tracked objects:
 10785 ;;		On entry : 0/0
 10786 ;;		On exit  : 0/0
 10787 ;;		Unchanged: 0/0
 10788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10789 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10790 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10791 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10792 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10793 ;;Total ram usage:        0 bytes
 10794 ;; Hardware stack levels used:    1
 10795 ;; Hardware stack levels required when called:    1
 10796 ;; This function calls:
 10797 ;;		Nothing
 10798 ;; This function is called by:
 10799 ;;		_TMR2_Initialize
 10800 ;; This function uses a non-reentrant model
 10801 ;;
 10802                           
 10803                           
 10804                           ;psect for function _TMR2_StartTimer
 10805  07FC                     _TMR2_StartTimer:	
 10806                           
 10807                           ;tmr2.c: 80: T2CONbits.TMR2ON = 1;
 10808                           
 10809                           ;incstack = 0
 10810                           ; Regs used in _TMR2_StartTimer: []
 10811  07FC  0020               	movlb	0	; select bank0
 10812  07FD  151C               	bsf	28,2	;volatile
 10813  07FE  0008               	return
 10814  07FF                     __end_of_TMR2_StartTimer:	
 10815                           
 10816                           	psect	text28
 10817  1539                     __ptext28:	
 10818 ;; *************** function _PWM2_Initialize *****************
 10819 ;; Defined at:
 10820 ;;		line 63 in file "mcc_generated_files/pwm2.c"
 10821 ;; Parameters:    Size  Location     Type
 10822 ;;		None
 10823 ;; Auto vars:     Size  Location     Type
 10824 ;;		None
 10825 ;; Return value:  Size  Location     Type
 10826 ;;                  1    wreg      void 
 10827 ;; Registers used:
 10828 ;;		wreg, status,2, status,0
 10829 ;; Tracked objects:
 10830 ;;		On entry : 0/0
 10831 ;;		On exit  : 0/0
 10832 ;;		Unchanged: 0/0
 10833 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10834 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10835 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10836 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10837 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10838 ;;Total ram usage:        0 bytes
 10839 ;; Hardware stack levels used:    1
 10840 ;; Hardware stack levels required when called:    1
 10841 ;; This function calls:
 10842 ;;		Nothing
 10843 ;; This function is called by:
 10844 ;;		_main
 10845 ;;		_SYSTEM_Initialize
 10846 ;; This function uses a non-reentrant model
 10847 ;;
 10848                           
 10849                           
 10850                           ;psect for function _PWM2_Initialize
 10851  1539                     _PWM2_Initialize:	
 10852                           
 10853                           ;pwm2.c: 68: CCP2CON = 0x3C;
 10854                           
 10855                           ;incstack = 0
 10856                           ; Regs used in _PWM2_Initialize: [wreg+status,2+status,0]
 10857  1539  303C               	movlw	60
 10858  153A  0025               	movlb	5	; select bank5
 10859  153B  009A               	movwf	26	;volatile
 10860                           
 10861                           ;pwm2.c: 71: CCPR2L = 0x7F;
 10862  153C  307F               	movlw	127
 10863  153D  0098               	movwf	24	;volatile
 10864                           
 10865                           ;pwm2.c: 74: CCPR2H = 0x7F;
 10866  153E  307F               	movlw	127
 10867  153F  0099               	movwf	25	;volatile
 10868                           
 10869                           ;pwm2.c: 77: CCPTMRSbits.C2TSEL = 0x0;
 10870  1540  30F3               	movlw	-13
 10871  1541  059E               	andwf	30,f	;volatile
 10872  1542  0008               	return
 10873  1543                     __end_of_PWM2_Initialize:	
 10874                           
 10875                           	psect	text29
 10876  1527                     __ptext29:	
 10877 ;; *************** function _PWM1_Initialize *****************
 10878 ;; Defined at:
 10879 ;;		line 63 in file "mcc_generated_files/pwm1.c"
 10880 ;; Parameters:    Size  Location     Type
 10881 ;;		None
 10882 ;; Auto vars:     Size  Location     Type
 10883 ;;		None
 10884 ;; Return value:  Size  Location     Type
 10885 ;;                  1    wreg      void 
 10886 ;; Registers used:
 10887 ;;		wreg, status,2, status,0
 10888 ;; Tracked objects:
 10889 ;;		On entry : 0/0
 10890 ;;		On exit  : 0/0
 10891 ;;		Unchanged: 0/0
 10892 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10893 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10894 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10895 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10896 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10897 ;;Total ram usage:        0 bytes
 10898 ;; Hardware stack levels used:    1
 10899 ;; Hardware stack levels required when called:    1
 10900 ;; This function calls:
 10901 ;;		Nothing
 10902 ;; This function is called by:
 10903 ;;		_main
 10904 ;;		_SYSTEM_Initialize
 10905 ;; This function uses a non-reentrant model
 10906 ;;
 10907                           
 10908                           
 10909                           ;psect for function _PWM1_Initialize
 10910  1527                     _PWM1_Initialize:	
 10911                           
 10912                           ;pwm1.c: 68: CCP1CON = 0x1C;
 10913                           
 10914                           ;incstack = 0
 10915                           ; Regs used in _PWM1_Initialize: [wreg+status,2+status,0]
 10916  1527  301C               	movlw	28
 10917  1528  0025               	movlb	5	; select bank5
 10918  1529  0093               	movwf	19	;volatile
 10919                           
 10920                           ;pwm1.c: 71: CCPR1L = 0x01;
 10921  152A  3001               	movlw	1
 10922  152B  0091               	movwf	17	;volatile
 10923                           
 10924                           ;pwm1.c: 74: CCPR1H = 0x00;
 10925  152C  0192               	clrf	18	;volatile
 10926                           
 10927                           ;pwm1.c: 77: CCPTMRSbits.C1TSEL = 0x0;
 10928  152D  30FC               	movlw	-4
 10929  152E  059E               	andwf	30,f	;volatile
 10930  152F  0008               	return
 10931  1530                     __end_of_PWM1_Initialize:	
 10932                           
 10933                           	psect	text30
 10934  150B                     __ptext30:	
 10935 ;; *************** function _OSC_Init *****************
 10936 ;; Defined at:
 10937 ;;		line 70 in file "main.c"
 10938 ;; Parameters:    Size  Location     Type
 10939 ;;		None
 10940 ;; Auto vars:     Size  Location     Type
 10941 ;;		None
 10942 ;; Return value:  Size  Location     Type
 10943 ;;                  1    wreg      void 
 10944 ;; Registers used:
 10945 ;;		wreg, status,2
 10946 ;; Tracked objects:
 10947 ;;		On entry : 0/0
 10948 ;;		On exit  : 0/0
 10949 ;;		Unchanged: 0/0
 10950 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10951 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10952 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10953 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10954 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10955 ;;Total ram usage:        0 bytes
 10956 ;; Hardware stack levels used:    1
 10957 ;; Hardware stack levels required when called:    1
 10958 ;; This function calls:
 10959 ;;		Nothing
 10960 ;; This function is called by:
 10961 ;;		_main
 10962 ;; This function uses a non-reentrant model
 10963 ;;
 10964                           
 10965                           
 10966                           ;psect for function _OSC_Init
 10967  150B                     _OSC_Init:	
 10968                           
 10969                           ;main.c: 73: OSCCON = 0xf0;
 10970                           
 10971                           ;incstack = 0
 10972                           ; Regs used in _OSC_Init: [wreg+status,2]
 10973  150B  30F0               	movlw	240
 10974  150C  0021               	movlb	1	; select bank1
 10975  150D  0099               	movwf	25	;volatile
 10976                           
 10977                           ;main.c: 74: OSCSTAT = 0x00;
 10978  150E  019A               	clrf	26	;volatile
 10979                           
 10980                           ;main.c: 75: OSCTUNE = 0x00;
 10981  150F  0198               	clrf	24	;volatile
 10982  1510  0008               	return
 10983  1511                     __end_of_OSC_Init:	
 10984                           
 10985                           	psect	text31
 10986  1500                     __ptext31:	
 10987 ;; *************** function _DAC_SetOutput *****************
 10988 ;; Defined at:
 10989 ;;		line 65 in file "mcc_generated_files/dac.c"
 10990 ;; Parameters:    Size  Location     Type
 10991 ;;  inputData       1    wreg     unsigned char 
 10992 ;; Auto vars:     Size  Location     Type
 10993 ;;  inputData       1    1[COMMON] unsigned char 
 10994 ;; Return value:  Size  Location     Type
 10995 ;;                  1    wreg      void 
 10996 ;; Registers used:
 10997 ;;		wreg
 10998 ;; Tracked objects:
 10999 ;;		On entry : 0/0
 11000 ;;		On exit  : 0/0
 11001 ;;		Unchanged: 0/0
 11002 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11003 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11004 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11005 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11006 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11007 ;;Total ram usage:        1 bytes
 11008 ;; Hardware stack levels used:    1
 11009 ;; Hardware stack levels required when called:    1
 11010 ;; This function calls:
 11011 ;;		Nothing
 11012 ;; This function is called by:
 11013 ;;		_main
 11014 ;; This function uses a non-reentrant model
 11015 ;;
 11016                           
 11017                           
 11018                           ;psect for function _DAC_SetOutput
 11019  1500                     _DAC_SetOutput:	
 11020                           
 11021                           ;incstack = 0
 11022                           ; Regs used in _DAC_SetOutput: [wreg]
 11023                           ;DAC_SetOutput@inputData stored from wreg
 11024  1500  00F1               	movwf	DAC_SetOutput@inputData
 11025                           
 11026                           ;dac.c: 67: DAC1CON1 = inputData;
 11027  1501  0871               	movf	DAC_SetOutput@inputData,w
 11028  1502  0022               	movlb	2	; select bank2
 11029  1503  0099               	movwf	25	;volatile
 11030  1504  0008               	return
 11031  1505                     __end_of_DAC_SetOutput:	
 11032                           
 11033                           	psect	text32
 11034  1505                     __ptext32:	
 11035 ;; *************** function _DAC_Initialize *****************
 11036 ;; Defined at:
 11037 ;;		line 57 in file "mcc_generated_files/dac.c"
 11038 ;; Parameters:    Size  Location     Type
 11039 ;;		None
 11040 ;; Auto vars:     Size  Location     Type
 11041 ;;		None
 11042 ;; Return value:  Size  Location     Type
 11043 ;;                  1    wreg      void 
 11044 ;; Registers used:
 11045 ;;		wreg
 11046 ;; Tracked objects:
 11047 ;;		On entry : 0/0
 11048 ;;		On exit  : 0/0
 11049 ;;		Unchanged: 0/0
 11050 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11051 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11052 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11053 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11054 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11055 ;;Total ram usage:        0 bytes
 11056 ;; Hardware stack levels used:    1
 11057 ;; Hardware stack levels required when called:    1
 11058 ;; This function calls:
 11059 ;;		Nothing
 11060 ;; This function is called by:
 11061 ;;		_main
 11062 ;;		_SYSTEM_Initialize
 11063 ;; This function uses a non-reentrant model
 11064 ;;
 11065                           
 11066                           
 11067                           ;psect for function _DAC_Initialize
 11068  1505                     _DAC_Initialize:	
 11069                           
 11070                           ;dac.c: 60: DAC1CON0 = 0x90;
 11071                           
 11072                           ;incstack = 0
 11073                           ; Regs used in _DAC_Initialize: [wreg]
 11074  1505  3090               	movlw	144
 11075  1506  0022               	movlb	2	; select bank2
 11076  1507  0098               	movwf	24	;volatile
 11077                           
 11078                           ;dac.c: 62: DAC1CON1 = 0x05;
 11079  1508  3005               	movlw	5
 11080  1509  0099               	movwf	25	;volatile
 11081  150A  0008               	return
 11082  150B                     __end_of_DAC_Initialize:	
 11083                           
 11084                           	psect	text33
 11085  1562                     __ptext33:	
 11086 ;; *************** function _COG1_Initialize *****************
 11087 ;; Defined at:
 11088 ;;		line 57 in file "mcc_generated_files/cog1.c"
 11089 ;; Parameters:    Size  Location     Type
 11090 ;;		None
 11091 ;; Auto vars:     Size  Location     Type
 11092 ;;		None
 11093 ;; Return value:  Size  Location     Type
 11094 ;;                  1    wreg      void 
 11095 ;; Registers used:
 11096 ;;		wreg, status,2
 11097 ;; Tracked objects:
 11098 ;;		On entry : 0/0
 11099 ;;		On exit  : 0/0
 11100 ;;		Unchanged: 0/0
 11101 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11102 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11103 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11104 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11105 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11106 ;;Total ram usage:        0 bytes
 11107 ;; Hardware stack levels used:    1
 11108 ;; Hardware stack levels required when called:    1
 11109 ;; This function calls:
 11110 ;;		Nothing
 11111 ;; This function is called by:
 11112 ;;		_main
 11113 ;;		_SYSTEM_Initialize
 11114 ;; This function uses a non-reentrant model
 11115 ;;
 11116                           
 11117                           
 11118                           ;psect for function _COG1_Initialize
 11119  1562                     _COG1_Initialize:	
 11120                           
 11121                           ;cog1.c: 60: COG1CON0 = 0x00;
 11122                           
 11123                           ;incstack = 0
 11124                           ; Regs used in _COG1_Initialize: [wreg+status,2]
 11125  1562  002D               	movlb	13	; select bank13
 11126  1563  0197               	clrf	23	;volatile
 11127                           
 11128                           ;cog1.c: 65: COG1CON1 = 0x00;
 11129  1564  0198               	clrf	24	;volatile
 11130                           
 11131                           ;cog1.c: 68: COG1RIS = 0x10;
 11132  1565  3010               	movlw	16
 11133  1566  0099               	movwf	25	;volatile
 11134                           
 11135                           ;cog1.c: 71: COG1RSIM = 0x00;
 11136  1567  019A               	clrf	26	;volatile
 11137                           
 11138                           ;cog1.c: 74: COG1FIS = 0x22;
 11139  1568  3022               	movlw	34
 11140  1569  009B               	movwf	27	;volatile
 11141                           
 11142                           ;cog1.c: 77: COG1FSIM = 0x22;
 11143  156A  3022               	movlw	34
 11144  156B  009C               	movwf	28	;volatile
 11145                           
 11146                           ;cog1.c: 80: COG1ASD0 = 0x00;
 11147  156C  019D               	clrf	29	;volatile
 11148                           
 11149                           ;cog1.c: 83: COG1ASD1 = 0x00;
 11150  156D  019E               	clrf	30	;volatile
 11151                           
 11152                           ;cog1.c: 86: COG1STR = 0x01;
 11153  156E  3001               	movlw	1
 11154  156F  009F               	movwf	31	;volatile
 11155                           
 11156                           ;cog1.c: 89: COG1DBR = 0x00;
 11157  1570  0195               	clrf	21	;volatile
 11158                           
 11159                           ;cog1.c: 92: COG1DBF = 0x00;
 11160  1571  0196               	clrf	22	;volatile
 11161                           
 11162                           ;cog1.c: 95: COG1BLKR = 0x00;
 11163  1572  0193               	clrf	19	;volatile
 11164                           
 11165                           ;cog1.c: 98: COG1BLKF = 0x00;
 11166  1573  0194               	clrf	20	;volatile
 11167                           
 11168                           ;cog1.c: 101: COG1PHR = 0x00;
 11169  1574  0191               	clrf	17	;volatile
 11170                           
 11171                           ;cog1.c: 104: COG1PHF = 0x00;
 11172  1575  0192               	clrf	18	;volatile
 11173                           
 11174                           ;cog1.c: 107: COG1CON0 = 0x80;
 11175  1576  3080               	movlw	128
 11176  1577  0097               	movwf	23	;volatile
 11177  1578  0008               	return
 11178  1579                     __end_of_COG1_Initialize:	
 11179                           
 11180                           	psect	text34
 11181  07EF                     __ptext34:	
 11182 ;; *************** function _CMP1_Initialize *****************
 11183 ;; Defined at:
 11184 ;;		line 57 in file "mcc_generated_files/cmp1.c"
 11185 ;; Parameters:    Size  Location     Type
 11186 ;;		None
 11187 ;; Auto vars:     Size  Location     Type
 11188 ;;		None
 11189 ;; Return value:  Size  Location     Type
 11190 ;;                  1    wreg      void 
 11191 ;; Registers used:
 11192 ;;		wreg
 11193 ;; Tracked objects:
 11194 ;;		On entry : 0/0
 11195 ;;		On exit  : 0/0
 11196 ;;		Unchanged: 0/0
 11197 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11198 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11199 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11200 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11201 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11202 ;;Total ram usage:        0 bytes
 11203 ;; Hardware stack levels used:    1
 11204 ;; Hardware stack levels required when called:    1
 11205 ;; This function calls:
 11206 ;;		Nothing
 11207 ;; This function is called by:
 11208 ;;		_main
 11209 ;;		_SYSTEM_Initialize
 11210 ;; This function uses a non-reentrant model
 11211 ;;
 11212                           
 11213                           
 11214                           ;psect for function _CMP1_Initialize
 11215  07EF                     _CMP1_Initialize:	
 11216                           
 11217                           ;cmp1.c: 62: CM1CON0 = 0x84;
 11218                           
 11219                           ;incstack = 0
 11220                           ; Regs used in _CMP1_Initialize: [wreg]
 11221  07EF  3084               	movlw	132
 11222  07F0  0022               	movlb	2	; select bank2
 11223  07F1  0091               	movwf	17	;volatile
 11224                           
 11225                           ;cmp1.c: 65: CM1CON1 = 0x2B;
 11226  07F2  302B               	movlw	43
 11227  07F3  0092               	movwf	18	;volatile
 11228                           
 11229                           ;cmp1.c: 67: TRISA5 = 0;
 11230  07F4  0021               	movlb	1	; select bank1
 11231  07F5  128C               	bcf	12,5	;volatile
 11232                           
 11233                           ;cmp1.c: 68: ANSELA |= 0x20;
 11234  07F6  0023               	movlb	3	; select bank3
 11235  07F7  168C               	bsf	12,5	;volatile
 11236                           
 11237                           ;cmp1.c: 69: RA5PPS = 0x16;
 11238  07F8  3016               	movlw	22
 11239  07F9  003D               	movlb	29	; select bank29
 11240  07FA  0095               	movwf	21	;volatile
 11241  07FB  0008               	return
 11242  07FC                     __end_of_CMP1_Initialize:	
 11243                           
 11244                           	psect	text35
 11245  151E                     __ptext35:	
 11246 ;; *************** function _ADC_Initialize *****************
 11247 ;; Defined at:
 11248 ;;		line 64 in file "mcc_generated_files/adc.c"
 11249 ;; Parameters:    Size  Location     Type
 11250 ;;		None
 11251 ;; Auto vars:     Size  Location     Type
 11252 ;;		None
 11253 ;; Return value:  Size  Location     Type
 11254 ;;                  1    wreg      void 
 11255 ;; Registers used:
 11256 ;;		wreg, status,2
 11257 ;; Tracked objects:
 11258 ;;		On entry : 0/0
 11259 ;;		On exit  : 0/0
 11260 ;;		Unchanged: 0/0
 11261 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11262 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11263 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11264 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11265 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11266 ;;Total ram usage:        0 bytes
 11267 ;; Hardware stack levels used:    1
 11268 ;; Hardware stack levels required when called:    1
 11269 ;; This function calls:
 11270 ;;		Nothing
 11271 ;; This function is called by:
 11272 ;;		_main
 11273 ;;		_SYSTEM_Initialize
 11274 ;; This function uses a non-reentrant model
 11275 ;;
 11276                           
 11277                           
 11278                           ;psect for function _ADC_Initialize
 11279  151E                     _ADC_Initialize:	
 11280                           
 11281                           ;adc.c: 69: ADCON0 = 0x01;
 11282                           
 11283                           ;incstack = 0
 11284                           ; Regs used in _ADC_Initialize: [wreg+status,2]
 11285  151E  3001               	movlw	1
 11286  151F  0021               	movlb	1	; select bank1
 11287  1520  009D               	movwf	29	;volatile
 11288                           
 11289                           ;adc.c: 72: ADCON1 = 0xC0;
 11290  1521  30C0               	movlw	192
 11291  1522  009E               	movwf	30	;volatile
 11292                           
 11293                           ;adc.c: 75: ADCON2 = 0x00;
 11294  1523  019F               	clrf	31	;volatile
 11295                           
 11296                           ;adc.c: 78: ADRESL = 0x00;
 11297  1524  019B               	clrf	27	;volatile
 11298                           
 11299                           ;adc.c: 81: ADRESH = 0x00;
 11300  1525  019C               	clrf	28	;volatile
 11301  1526  0008               	return
 11302  1527                     __end_of_ADC_Initialize:	
 11303                           
 11304                           	psect	text36
 11305  1579                     __ptext36:	
 11306 ;; *************** function _ADC_GetConversion *****************
 11307 ;; Defined at:
 11308 ;;		line 110 in file "mcc_generated_files/adc.c"
 11309 ;; Parameters:    Size  Location     Type
 11310 ;;  channel         1    wreg     enum E5122
 11311 ;; Auto vars:     Size  Location     Type
 11312 ;;  channel         1    4[COMMON] enum E5122
 11313 ;; Return value:  Size  Location     Type
 11314 ;;                  2    1[COMMON] unsigned int 
 11315 ;; Registers used:
 11316 ;;		wreg, status,2, status,0
 11317 ;; Tracked objects:
 11318 ;;		On entry : 0/0
 11319 ;;		On exit  : 0/0
 11320 ;;		Unchanged: 0/0
 11321 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11322 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11323 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11324 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11325 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11326 ;;Total ram usage:        4 bytes
 11327 ;; Hardware stack levels used:    1
 11328 ;; Hardware stack levels required when called:    1
 11329 ;; This function calls:
 11330 ;;		Nothing
 11331 ;; This function is called by:
 11332 ;;		_main
 11333 ;; This function uses a non-reentrant model
 11334 ;;
 11335                           
 11336                           
 11337                           ;psect for function _ADC_GetConversion
 11338  1579                     _ADC_GetConversion:	
 11339                           
 11340                           ;incstack = 0
 11341                           ; Regs used in _ADC_GetConversion: [wreg+status,2+status,0]
 11342                           ;ADC_GetConversion@channel stored from wreg
 11343  1579  00F4               	movwf	ADC_GetConversion@channel
 11344                           
 11345                           ;adc.c: 113: ADCON0bits.CHS = channel;
 11346  157A  0874               	movf	ADC_GetConversion@channel,w
 11347  157B  00F3               	movwf	??_ADC_GetConversion
 11348  157C  0DF3               	rlf	??_ADC_GetConversion,f
 11349  157D  0DF3               	rlf	??_ADC_GetConversion,f
 11350  157E  0021               	movlb	1	; select bank1
 11351  157F  081D               	movf	29,w	;volatile
 11352  1580  0673               	xorwf	??_ADC_GetConversion,w
 11353  1581  3983               	andlw	-125
 11354  1582  0673               	xorwf	??_ADC_GetConversion,w
 11355  1583  009D               	movwf	29	;volatile
 11356                           
 11357                           ;adc.c: 116: ADCON0bits.ADON = 1;
 11358  1584  141D               	bsf	29,0	;volatile
 11359                           
 11360                           ;adc.c: 118: _delay((unsigned long)((5)*(32000000/4000000.0)));
 11361  1585  300D               	movlw	13
 11362  1586  00F3               	movwf	??_ADC_GetConversion
 11363  1587                     u3627:	
 11364  1587  0BF3               	decfsz	??_ADC_GetConversion,f
 11365  1588  2D87               	goto	u3627
 11366                           
 11367                           ;adc.c: 121: ADCON0bits.GO_nDONE = 1;
 11368  1589  0021               	movlb	1	; select bank1
 11369  158A  149D               	bsf	29,1	;volatile
 11370  158B                     l327:	
 11371                           ;adc.c: 125: {
 11372                           
 11373                           ;adc.c: 124: while (ADCON0bits.GO_nDONE)
 11374                           
 11375  158B  189D               	btfsc	29,1	;volatile
 11376  158C  2D8B               	goto	l327
 11377                           
 11378                           ;adc.c: 126: }
 11379                           ;adc.c: 128: return ((ADRESH << 8) + ADRESL);
 11380  158D  081C               	movf	28,w	;volatile
 11381  158E  00F2               	movwf	?_ADC_GetConversion+1
 11382  158F  081B               	movf	27,w	;volatile
 11383  1590  00F1               	movwf	?_ADC_GetConversion
 11384  1591  0008               	return
 11385  1592                     __end_of_ADC_GetConversion:	
 11386                           
 11387                           	psect	intentry
 11388  0004                     __pintentry:	
 11389 ;; *************** function _isr *****************
 11390 ;; Defined at:
 11391 ;;		line 320 in file "main.c"
 11392 ;; Parameters:    Size  Location     Type
 11393 ;;		None
 11394 ;; Auto vars:     Size  Location     Type
 11395 ;;		None
 11396 ;; Return value:  Size  Location     Type
 11397 ;;                  1    wreg      void 
 11398 ;; Registers used:
 11399 ;;		wreg
 11400 ;; Tracked objects:
 11401 ;;		On entry : 0/0
 11402 ;;		On exit  : 0/0
 11403 ;;		Unchanged: 0/0
 11404 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11405 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11406 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11407 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11408 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11409 ;;Total ram usage:        1 bytes
 11410 ;; Hardware stack levels used:    1
 11411 ;; This function calls:
 11412 ;;		Nothing
 11413 ;; This function is called by:
 11414 ;;		Interrupt level 1
 11415 ;; This function uses a non-reentrant model
 11416 ;;
 11417                           
 11418  0004                     _isr:	
 11419                           
 11420                           ;incstack = 0
 11421  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 11422                           
 11423                           ; Regs used in _isr: [wreg]
 11424  0005  3180               	pagesel	$
 11425  0006  0020               	movlb	0	; select bank0
 11426  0007  087F               	movf	127,w
 11427  0008  00F0               	movwf	??_isr
 11428                           
 11429                           ;main.c: 322: if(TMR1IE & TMR1IF)
 11430  0009  3001               	movlw	1
 11431  000A  0021               	movlb	1	; select bank1
 11432  000B  1C11               	btfss	17,0	;volatile
 11433  000C  3900               	andlw	0
 11434  000D  0020               	movlb	0	; select bank0
 11435  000E  1C11               	btfss	17,0	;volatile
 11436  000F  3900               	andlw	0
 11437  0010  1C09               	btfss	9,0
 11438  0011  281E               	goto	i1l534
 11439                           
 11440                           ;main.c: 323: {
 11441                           ;main.c: 324: TMR1H = timerValue.bytes[1];
 11442  0012  0021               	movlb	1	; select bank1
 11443  0013  085F               	movf	(_timerValue^(0+128)+1),w	;volatile
 11444  0014  0020               	movlb	0	; select bank0
 11445  0015  0097               	movwf	23	;volatile
 11446                           
 11447                           ;main.c: 325: TMR1L = timerValue.bytes[0];
 11448  0016  0021               	movlb	1	; select bank1
 11449  0017  085E               	movf	_timerValue^(0+128),w	;volatile
 11450  0018  0020               	movlb	0	; select bank0
 11451  0019  0096               	movwf	22	;volatile
 11452                           
 11453                           ;main.c: 326: TMR1IF = 0;
 11454  001A  1011               	bcf	17,0	;volatile
 11455                           
 11456                           ;main.c: 327: LATB6 ^= 1;
 11457  001B  0022               	movlb	2	; select bank2
 11458  001C  3040               	movlw	64
 11459  001D  068D               	xorwf	13,f
 11460  001E                     i1l534:	
 11461  001E  0870               	movf	??_isr,w
 11462  001F  0020               	movlb	0	; select bank0
 11463  0020  00FF               	movwf	127
 11464  0021  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 11465  0022  0009               	retfie
 11466  0023                     __end_of_isr:	
 11467  007E                     btemp	set	126	;btemp
 11468  007E                     int$flags	set	126
 11469  007E                     wtemp	set	126
 11470  007E                     wtemp0	set	126
 11471  0080                     wtemp1	set	128
 11472  0082                     wtemp2	set	130
 11473  0084                     wtemp3	set	132
 11474  0086                     wtemp4	set	134
 11475  0088                     wtemp5	set	136
 11476  007F                     wtemp6	set	127
 11477  007E                     ttemp	set	126
 11478  007E                     ttemp0	set	126
 11479  0081                     ttemp1	set	129
 11480  0084                     ttemp2	set	132
 11481  0087                     ttemp3	set	135
 11482  007F                     ttemp4	set	127
 11483  007E                     ltemp	set	126
 11484  007E                     ltemp0	set	126
 11485  0082                     ltemp1	set	130
 11486  0086                     ltemp2	set	134
 11487  0080                     ltemp3	set	128


Data Sizes:
    Strings     47
    Constant    118
    Data        0
    BSS         38
    Persistent  39
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      13
    BANK0            80     80      80
    BANK1            80     41      79
    BANK2            80      0      39
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_1(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 15
		 -> USART_WriteValue@buf(BANK1[15]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    USART_WriteString@_data	PTR unsigned char  size(2) Largest target is 24
		 -> STR_5(CODE[6]), STR_4(CODE[7]), STR_3(CODE[7]), STR_2(CODE[24]), 
		 -> USART_WriteValue@buf(BANK1[15]), 

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TMR1_DefaultInterruptHandler(), 


Critical Paths under _main in COMMON

    _main->___lwtoft
    _main->_fabs
    _fabs->___ftge
    ___lwtoft->___ftpack
    ___ftdiv->___lwtoft
    _sprintf->___awdiv
    _sprintf->___lltoft
    _sprintf->__div_to_l_
    _scale->___awdiv
    _fround->___awdiv
    ___wmul->___awdiv
    ___ftmul->___awdiv
    ___ftmul->___lwtoft
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___fttol->_fabs
    ___ftsub->___lltoft
    _USART_WriteString->_USART_Write

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_USART_WriteValue
    ___ftdiv->___ftmul
    _USART_WriteValue->_sprintf
    _sprintf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_USART_WriteValue
    _USART_WriteValue->_sprintf

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                15    15      0   63507
                                             74 BANK0      6     6      0
                                             38 BANK1      3     3      0
                  _ADC_GetConversion
                     _ADC_Initialize
                    _CMP1_Initialize
                    _COG1_Initialize
                     _DAC_Initialize
                      _DAC_SetOutput
                           _OSC_Init
                    _PWM1_Initialize
                    _PWM2_Initialize
                    _TMR2_Initialize
                   _USART_Initialize
                        _USART_Write
                  _USART_WriteString
                   _USART_WriteValue
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lwtoft
                               _fabs
 ---------------------------------------------------------------------------------
 (1) _fabs                                                 3     0      3    1143
                                             10 COMMON     3     0      3
                             ___ftge
                            ___ftneg
 ---------------------------------------------------------------------------------
 (1) ___lwtoft                                             4     1      3    2195
                                              9 COMMON     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) ___ftdiv                                             16    10      6    2517
                                             26 BANK0     16    10      6
                            ___ftmul (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (1) _USART_WriteValue                                    19    16      3   47327
                                             70 BANK0      4     1      3
                                             23 BANK1     15    15      0
                  _USART_WriteString
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             41    36      5   46658
                                             59 BANK0     11     6      5
                                              0 BANK1     23    23      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                              _scale
 ---------------------------------------------------------------------------------
 (3) _scale                                               12     9      3   11164
                                             26 BANK0      9     6      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _fround                                              17    14      3   10966
                                             26 BANK0     14    11      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    2524
                                              4 BANK0      6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) ___ftmul                                             16    10      6    5123
                                             10 BANK0     16    10      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              7     3      4    1448
                                              1 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              9     5      4    1580
                                              8 COMMON     5     1      4
                                              0 BANK0      4     4      0
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) __tdiv_to_l_                                         16    10      6     431
                                              1 COMMON    10     4      6
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (3) __div_to_l_                                          20    14      6     574
                                              1 COMMON    12     6      6
                                              0 BANK0      8     8      0
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             6     2      4    2242
                                              9 COMMON     4     0      4
                                              0 BANK0      2     2      0
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___llmod                                             10     2      8     543
                                              1 COMMON    10     2      8
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             14     6      8     418
                                              1 COMMON     9     1      8
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (1) ___fttol                                             14    10      4     508
                                             35 BANK0     14    10      4
                            ___ftmul (ARG)
                               _fabs (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    4040
                                             53 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (1) ___ftadd                                             13     7      6    3845
                                             40 BANK0     13     7      6
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftpack                                             8     3      5    2109
                                              1 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     237
                                              1 COMMON     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     776
                                              1 COMMON     9     3      6
 ---------------------------------------------------------------------------------
 (2) _USART_WriteString                                    5     3      2     454
                                              2 COMMON     5     3      2
                        _USART_Write
 ---------------------------------------------------------------------------------
 (3) _USART_Write                                          1     1      0      22
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _USART_Initialize                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR2_Initialize                                      0     0      0       0
                    _TMR2_StartTimer
 ---------------------------------------------------------------------------------
 (2) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PWM2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PWM1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _OSC_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DAC_SetOutput                                        1     1      0      22
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _DAC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _COG1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CMP1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_GetConversion                                    4     2      2      22
                                              1 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _isr                                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_GetConversion
   _ADC_Initialize
   _CMP1_Initialize
   _COG1_Initialize
   _DAC_Initialize
   _DAC_SetOutput
   _OSC_Init
   _PWM1_Initialize
   _PWM2_Initialize
   _TMR2_Initialize
     _TMR2_StartTimer
   _USART_Initialize
   _USART_Write
   _USART_WriteString
     _USART_Write
   _USART_WriteValue
     _USART_WriteString
       _USART_Write
     _sprintf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg
       ___ftsub
         ___ftadd
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _fabs (ARG)
           ___ftge
           ___ftneg
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv
       ___llmod
       ___lltoft
         ___ftpack
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   ___ftadd
     ___ftmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg (ARG)
     ___ftpack (ARG)
     _fround (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   ___ftdiv
     ___ftmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftpack (ARG)
     ___lwtoft (ARG)
       ___ftpack
   ___ftmul
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
     ___ftpack (ARG)
     ___lwtoft (ARG)
       ___ftpack
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   ___ftneg
   ___fttol
     ___ftmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _fabs (ARG)
       ___ftge
       ___ftneg
     _scale (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   ___lwtoft
     ___ftpack
   _fabs
     ___ftge
     ___ftneg

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      D       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     29      4F       7       98.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      27       9       48.8%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      D3      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      D3      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Mon Nov 14 16:03:12 2016

                 __CFG_CP$OFF 0000                            _M1 0123                            _M2 0126  
           ??_CMP1_Initialize 0071                            _a0 00E3                            _a1 012C  
                          _a2 012F                            _b1 0132                            _b2 0135  
                          _Vc 00CF                  ___awdiv@sign 0021                            _rk 00E6  
         ___wmul@multiplicand 0026                  ___ftadd@exp1 0054                  ___ftadd@exp2 0053  
                 __CFG_LVP$ON 0000                  ___ftadd@sign 0052      __end_of_USART_Initialize 154F  
                         l327 158B                           l508 1518                           l612 017D  
                         l607 005E                           l653 159B                           l902 0A38  
                         l823 0C4B                           l842 17E1                           l843 17E9  
                         l835 17CE                           l943 07D5                           l866 0AE3  
                         l892 09BF                           _GIE 005F                           _PR2 001B  
                         _Ver 00D2               _timer1ReloadVal 00DC                           _isr 0004  
  __size_of_USART_WriteString 0025                  ___awmod@sign 0077               _TMR2_Initialize 1530  
                __CFG_BORV$LO 0000                           wreg 0009                  __CFG_IESO$ON 0000  
     __end_of_COG1_Initialize 1579                  ___ftdiv@cntr 0044                  ___ftdiv@sign 0049  
                        l3011 033E                          l3003 02D7                          l3005 032B  
                        l2401 1721                          l3041 0450                          l3025 0381  
                        l3017 035B                          l2411 173C                          l2341 17BA  
                        l2333 17A4                          l2503 0AD5                          l2415 1744  
                        l2407 1733                          l2431 16C3                          l3047 0463  
                        l3055 0040                          l2337 17AB                          l2513 0B07  
                        l2505 0ADF                          l2441 16D5                          l3049 0468  
                        l3057 0485                          l2347 17D3                          l2339 17B5  
                        l2523 0B22                          l2427 16BC                          l2363 1595  
                        l3331 0545                          l2349 17DB                          l2509 0AF5  
                        l2701 0B58                          l2453 16F2                          l2445 16E1  
                        l2533 08F1                          l2621 0EC4                          l3165 085E  
                        l2463 0A6C                          l2383 1702                          l2439 16C9  
                        l2551 0942                          l2615 0E65                          l3159 0848  
                        l2473 0A82                          l2449 16EA                          l2633 0F84  
                        l2625 0EE1                          l2491 0AAF                          l2467 0A73  
                        l2811 07BF                          l2707 0B75                          l2563 095E  
                        l2555 094A                          l2539 0907                          l3187 08B8  
                        l3179 089F                          l2493 0AB9                          l2485 0A9C  
                        l2725 0C08                          l2717 0BC0                          l2389 170D  
                        l2901 005B                          l2495 0ABE                          l2823 07E6  
                        l2743 0C42                          l2735 0C27                          l2671 09FA  
                        l2663 09E0                          l2399 1715                          l2567 0966  
                        l2591 0D17                          l2639 0FE3                          l2753 164B  
                        l2497 0AC2                          l2817 07CC                          l2809 07B1  
                        l2833 175A                          l2745 0C4E                          l2737 0C35  
                        l2681 0A14                          l2649 09A7                          l2921 00BD  
                        l2905 0060                          l2819 07D8                          l2843 1788  
                        l2835 1768                          l2691 0A3B                          l2683 0A22  
                        l2907 0076                          l2757 1661                          l2781 15B6  
                        l2791 0781                          l2847 1793                          l2863 169E  
                        l2599 0D8F                          l2951 01B2                          l2857 1678  
                        l2689 0A2F                          l2945 0166                          l2937 0119  
                        l2859 1686                          l2867 16A9                          l2875 080D  
                        l2963 01FD                          l2877 081D                          l2973 0231  
                        l2983 0285                          l2959 01E9                          l2889 1612  
                        l2977 027F                          l2989 02BC                          ?_isr 0070  
                        STR_1 10A2                          STR_2 1076                          STR_3 1095  
                        STR_4 108E                          STR_5 109C       __end_of_PWM1_Initialize 1530  
                        u2005 15A1                          _LATA 010C                          _LATB 010D  
                        u3015 07CD                          u2055 1718                          _LATC 010E  
                        u2305 0A9D                          u2075 1722                          u2155 16CC  
                        u3205 1624                          u3125 167B                          u2085 172C  
                        u2335 0AB0                          u3055 175D                          u2095 1734  
                        u2175 16DB                          u3145 1694                          u2185 16E2  
                        u2505 0951                          u3305 01BE                          u3075 1769  
                        u3155 169F                          u2365 0AC3                          u3085 177D  
                        u3405 0349                          u3095 1789                          u3175 0812  
                        u2535 0967                          u3415 0357                          u3335 01E7  
                        u3255 00D2                          u1905 17C9                          u2545 096D  
                        u2465 0913                          u2395 0AD6                          u2475 0923  
                        u1925 17D6                          u2805 0BEB                          u2725 0A15  
                        u3365 02B0                          u3525 0870                          u2495 094B  
                        u3295 0189                          u3535 0880                          u3607 0532  
                        u3480 15F7                          u2665 09E1                          u3545 08A0  
                        u3617 0762                          u3627 1587                          u2755 0A30  
                        u2675 09F1                          u3555 08AF                          _PEIE 005E  
                        u1965 17F0                          u1885 17B0                          u2845 0C28  
                        u2685 09FB                          u3565 08B9                          u2955 0788  
                        u2875 0C43                          u2795 0BC1                          u1995 159C  
                        u2985 07B2                          _PLLR 04D6                          _TMR2 001A  
                        _TRMT 0CF1                          _WPUA 020C                          _WPUB 020D  
                        _WPUC 020E                  __CFG_WRT$OFF 0000                 __CFG_FCMEN$ON 0000  
                        _Vref 0129                          _Vout 00D5                          _fabs 15CC  
                        _rk_1 00E9                          _rk_2 00EC                          _main 048A  
                ___ftpack@arg 0071                  ___ftpack@exp 0074                          fsr0h 0005  
                        fsr1h 0007                          fsr0l 0004                          indf0 0000  
                        indf1 0001                          fsr1l 0006                          btemp 007E  
               __CFG_BOREN$ON 0000                          ltemp 007E                          start 0023  
                        ttemp 007E                          wtemp 007E      USART_WriteString@limiter 0075  
                _sprintf$1323 00A0                  ___ftmul@cntr 0038                  ___ftmul@sign 0039  
                ___fttol@exp1 0050                  ___fttol@lval 004C                         ??_isr 0070  
     __end_of_PWM2_Initialize 1543                         ?_fabs 007A                         ?_main 0070  
             __end_of___awdiv 1749               __end_of___ftadd 0B3A                 __CFG_WDTE$OFF 0000  
             __end_of___awmod 16F7               __end_of___ftdiv 08DA               __end_of___ftneg 0808  
             __end_of___lldiv 179C               __end_of___ftmul 098E               ___awdiv@divisor 0078  
                       _T1CON 0018               __end_of___llmod 16B2               __end_of___ftsub 15CC  
             __end_of___fttol 07EF                         _T2CON 001C                         _LATC2 0872  
                       _LATC3 0873                         _LATB6 086E                         i1l534 001E  
             ___awdiv@counter 0020                         _TMR1H 0017                         _TMR1L 0016  
                       _TRISA 008C                         _TRISB 008D                         _TRISC 008E  
                       _WPUC2 1072                  ___lltoft@exp 0021              __end_of_OSC_Init 1511  
             __end_of_dpowers 1028                         fabs@d 007A                         _scale 0DBC  
                _DAC_DISCRETE 00CC                 ___ftpack@sign 0075                         ltemp0 007E  
                       ltemp1 0082                         ltemp2 0086                         ltemp3 0080  
                       ttemp0 007E                         ttemp1 0081                         ttemp2 0084  
                       ttemp3 0087                         ttemp4 007F                         status 0003  
                       wtemp0 007E                         wtemp1 0080                         wtemp2 0082  
                       wtemp3 0084                         wtemp4 0086                         wtemp5 0088  
                       wtemp6 007F               __end_of_sprintf 048A               _TMR2_StartTimer 07FC  
              __CFG_MCLRE$OFF 0000              ??_DAC_Initialize 0071               __initialization 0025  
                __end_of_fabs 15EC                  __end_of_main 0768       __end_of_TMR2_Initialize 1539  
              __CFG_LPBOR$OFF 0000                  _COG1ASD0bits 069D      __end_of_USART_WriteValue 1610  
                      ??_fabs 007D                        ??_main 006A                 ___fttol@sign1 004B  
              __CFG_PLLEN$OFF 0000          __size_of__tdiv_to_l_ 00B6              ?_COG1_Initialize 0070  
                      _ADCON0 009D                        _ADCON1 009E                        _ADCON2 009F  
                      _CCP1M0 1498                        _CCP1M1 1499                        _CCP1M2 149A  
                      _CCP1M3 149B              ___llmod@dividend 0075                        ?_scale 003A  
                      _ADRESH 009C                        _ADRESL 009B                        _CCPR1H 0292  
                      _CCPR2H 0299                        _CCPR1L 0291                        _CCPR2L 0298  
            ___awdiv@dividend 007A                        _AD_LSB 00C9                __CFG_ZCDDIS$ON 0000  
                      _ANSELA 018C                        _ANSELB 018D                        _ANSELC 018E  
            __end_of___ftpack 1800                        _DA_LSB 00E0                        _T1GCON 0019  
                      _RC1REG 0199                        _RA2PPS 0E92                        _RA4PPS 0E94  
                      _RC1PPS 0EA1                        _RA5PPS 0E95                        _RC1STA 019D  
            __end_of___lltoft 0831                        _RC2PPS 0EA2              ?_PWM1_Initialize 0070  
            __end_of___lwtoft 1562                        _OSCCON 0099                        _TMR1IE 0488  
                      _TMR1IF 0088                        _TMR2IE 0489                        _TMR2IF 0089  
                      _TMR2ON 00E2                        _TX1REG 019A                        _TX1STA 019E  
                      _TRISA4 0464                        _TRISC1 0471                        _TRISA5 0465  
                      _TRISB6 046E                __CFG_PWRTE$OFF 0000              __end_of__powers_ 1076  
_TMR1_DefaultInterruptHandler 0000                        _adcVal 00DA                        ___ftge 1635  
                      ___wmul 1592                     ??___awdiv 007C                     ??___ftadd 004E  
              __CFG_STVREN$ON 0000                     ??___awmod 0075                     ??___ftdiv 0040  
                   ??___ftneg 0074                     ??___lldiv 0079                     ??___ftmul 0030  
                   ??___llmod 0079                     ??___ftsub 007D                     ??___fttol 0047  
            ?_PWM2_Initialize 0070                        _fround 0C57              ___awdiv@quotient 0022  
             ___awmod@divisor 0071               ___awmod@counter 0076         ___ftmul@f3_as_product 0035  
    ADC_GetConversion@channel 0074       __end_of_TMR2_StartTimer 07FF                     ??_sprintf 0060  
     __end_of__initialization 0034                    ___ftadd@f1 0048                    ___ftadd@f2 004B  
                  ___ftge@ff1 0071                    ___ftge@ff2 0074               _CMP1_Initialize 07EF  
                  ___ftdiv@f1 003D                    ___ftdiv@f2 003A                    ___ftdiv@f3 0045  
                  ___ftneg@f1 0071                  ?_USART_Write 0070                    ___ftmul@f1 002A  
                  ___ftmul@f2 002D        DAC_SetOutput@inputData 0071                    ___ftsub@f1 0058  
                  ___ftsub@f2 0055                    ___fttol@f1 0043                __pcstackCOMMON 0070  
                  ___lltoft@c 0079                     ?_OSC_Init 0070                 __end_of_scale 1000  
            ?_TMR2_Initialize 0070                    ___lwtoft@c 0079                    __div_to_l_ 0B3A  
           ?_USART_Initialize 0070                _OPTION_REGbits 0095            ??_USART_Initialize 0071  
      __size_of_DAC_SetOutput 0005               __div_to_l_@exp1 007C               __div_to_l_@cntr 007B  
                     ??_scale 003D               __div_to_l_@quot 0077                    __pbssBANK1 00C9  
                  __pbssBANK2 0138                 __div_to_l_@f1 0071                 __div_to_l_@f2 0074  
                  __pmaintext 048A                       ?___ftge 0071                       ?___wmul 0024  
             __CFG_PPS1WAY$ON 0000                    ??_OSC_Init 0071                    __pintentry 0004  
                     _CM1CON0 0111                       _CM1CON1 0112                       _CCP1CON 0293  
                     _CCP2CON 029A                       ?_fround 003A                       _COG1DBF 0696  
                     _COG1DBR 0695                       _COG1FIS 069B                     ?___ftpack 0071  
                     _COG1PHF 0692                       _COG1PHR 0691                       _COG1RIS 0699  
                     _COG1STR 069F                     ?___lltoft 0079       __size_of_ADC_Initialize 0009  
                   ?___lwtoft 0079                       _SP1BRGH 019C                       _SP1BRGL 019B  
                     _OSCSTAT 009A                       _OSCTUNE 0098                       _PWM3DCH 0618  
                     _PWM3DCL 0617                       _PWM3CON 0619                       _PPSLOCK 0E0F  
     __end_of_CMP1_Initialize 07FC              ?_TMR2_StartTimer 0070                     _ADC_SCALE 0120  
           __end_of__npowers_ 104F                    _scale$1322 003F                 _DAC_SetOutput 1500  
             __size_of___ftge 003B                       ___awdiv 16F7                       ___ftadd 0A44  
                     ___awmod 16B2                       ___ftdiv 0831                       ___ftneg 0800  
                     ___lldiv 1749               __size_of___wmul 001C                       ___ftmul 08DA  
                     ___llmod 1670                       ___ftsub 15AE                       ___fttol 0768  
                  ??___ftpack 0076               __size_of_fround 0165                    ??___lltoft 0020  
                     __ptext1 15CC                       __ptext2 154F                       __ptext3 0831  
                     __ptext4 15EC                       __ptext5 0038                       __ptext6 0DBC  
                     __ptext7 0C57                       __ptext8 1592                       __ptext9 08DA  
           ?_USART_WriteValue 0066                    ??___lwtoft 007C                     _T1CONbits 0018  
                 ?__div_to_l_ 0071                       _dpowers 1000                     _T2CONbits 001C  
                __size_of_isr 001F            ??_USART_WriteValue 0069                     _CMOUTbits 0115  
            ___awmod@dividend 0073                       _sprintf 0038                       clrloop0 1512  
        end_of_initialization 0034               ___lldiv@divisor 0071                ?_DAC_SetOutput 0070  
             ___lldiv@counter 0024          __size_of_USART_Write 0007                  __pstringtext 1000  
              __tdiv_to_l_@f1 0071                __tdiv_to_l_@f2 0074                    _timerValue 00DE  
               ??__tdiv_to_l_ 0077              __CFG_FOSC$INTOSC 0000              ?_CMP1_Initialize 0070  
                 ___ftdiv@exp 0048      __size_of_COG1_Initialize 0017           __size_of__div_to_l_ 011D  
    __size_of_PWM1_Initialize 0009                   ___ftmul@exp 0034                __end_of___ftge 1670  
              __end_of___wmul 15AE             __size_of_OSC_Init 0006                _ADC_Initialize 151E  
              __end_of_fround 0DBC       __size_of_DAC_Initialize 0006           start_initialization 0025  
    __size_of_PWM2_Initialize 000A           __end_of__tdiv_to_l_ 0A44                   __end_of_isr 0023  
             ??_DAC_SetOutput 0071     __size_of_USART_Initialize 000C               ___llmod@divisor 0071  
             ___llmod@counter 007A                      ??___ftge 0077                      ??___wmul 007D  
                 _CCPTMRSbits 029E        __end_of_ADC_Initialize 1527                      ??_fround 003D  
               sprintf@tmpval 00AE                    fround@prec 0047             __size_of___ftpack 0064  
           __size_of___lltoft 0029                     ___latbits 0002             __size_of___lwtoft 0013  
               __pcstackBANK0 0020                 __pcstackBANK1 00A0      __size_of_TMR2_Initialize 0009  
                 sprintf@flag 00A4                   sprintf@fval 00B3                   sprintf@prec 00A6  
                   __pnvBANK1 00E0                     __pnvBANK2 0120                     _main$1319 00C6  
           ??_COG1_Initialize 0071                      ?___awdiv 0078                      ?___ftadd 0048  
                    ?___awmod 0071                      ?___ftdiv 003A                      ?___ftneg 0071  
                    ?___lldiv 0071                      ?___ftmul 002A                      ?___llmod 0071  
                    ?___ftsub 0055                     __npowers_ 1028                      ?___fttol 0043  
             ?_ADC_Initialize 0070                      _DAC1CON0 0118                      _DAC1CON1 0119  
           ??_PWM1_Initialize 0071                   __tdiv_to_l_ 098E                  ??__div_to_l_ 0020  
                    _BAUD1CON 019F                      _COG1ASD0 069D                      _COG1ASD1 069E  
                    _COG1BLKF 0694                      _COG1CON0 0697                      _COG1CON1 0698  
                    _COG1BLKR 0693                      _COG1FSIM 069C                      _COG1RSIM 069A  
                    ?_sprintf 005B                __size_of_scale 0244     __size_of_USART_WriteValue 0024  
           ??_PWM2_Initialize 0071                ___wmul@product 0028                     clear_ram0 1511  
                    _PIE1bits 0091      __size_of_TMR2_StartTimer 0003         USART_WriteValue@F5504 0138  
                    _PIR1bits 0011            __end_of__div_to_l_ 0C57                      _OSC_Init 150B  
       USART_WriteValue@_data 0066                    _ADCON0bits 009D             ___wmul@multiplier 0024  
              _DAC_Initialize 1505        USART_WriteString@_data 0072             ??_TMR2_Initialize 0071  
            _USART_Initialize 1543                 ??_USART_Write 0071             _ADC_GetConversion 1579  
          ?_ADC_GetConversion 0071              __size_of___awdiv 0052              __size_of___ftadd 00F6  
            __size_of___awmod 0045              __size_of___ftdiv 00A9        __end_of_DAC_Initialize 150B  
            __size_of___ftneg 0008              __size_of___lldiv 0053              __size_of___ftmul 00B4  
            __size_of___llmod 0042              __size_of___ftsub 001E              __size_of___fttol 0087  
                    ___ftpack 179C                   _fround$1320 0044                   _fround$1321 0041  
                    ___lltoft 0808                      ___lwtoft 154F         _TMR1_InterruptHandler 00D8  
         ??_ADC_GetConversion 0073                    sprintf@exp 00AC                    sprintf@val 00A8  
           _USART_WriteString 1610                      __ptext10 16B2                      __ptext11 16F7  
                    __ptext20 179C                      __ptext12 098E                      __ptext21 0800  
                    __ptext13 0B3A                    _T1GCONbits 0019                      __ptext30 150B  
                    __ptext22 1635                      __ptext14 0808                      __ptext31 1500  
                    __ptext23 1610                      __ptext15 1670                      __ptext32 1505  
                    __ptext24 1517                      __ptext16 1749                      __ptext33 1562  
                    __ptext25 1543                      __ptext17 0768                      __ptext34 07EF  
                    __ptext26 1530                      __ptext18 15AE                      __ptext35 151E  
                    __ptext27 07FC                      __ptext19 0A44                      __ptext36 1579  
                    __ptext28 1539                      __ptext29 1527                      __powers_ 104F  
          ?_USART_WriteString 0072              __size_of_sprintf 0452                 __size_of_fabs 0020  
               __size_of_main 02DE           ??_USART_WriteString 0074     __end_of_ADC_GetConversion 1592  
    __size_of_CMP1_Initialize 000D                    _RA4PPSbits 0E94                    _RA5PPSbits 0E95  
                  _RC1STAbits 019D                    _RC2PPSbits 0EA2                      int$flags 007E  
           ??_TMR2_StartTimer 0071           __end_of_USART_Write 151E               ?_DAC_Initialize 0070  
   __end_of_USART_WriteString 1635                      scale@scl 0042                      intlevel1 0000  
                   sprintf@ap 00A3              __tdiv_to_l_@exp1 0025              __tdiv_to_l_@cntr 0024  
                   sprintf@sp 00B2              __tdiv_to_l_@quot 0020              _USART_WriteValue 15EC  
             _COG1_Initialize 1562              ___lldiv@dividend 0075             __CFG_CLKOUTEN$OFF 0000  
                 _PPSLOCKbits 0E0F               _PWM1_Initialize 1527         __end_of_DAC_SetOutput 1505  
            ??_ADC_Initialize 0071           USART_WriteValue@buf 00B7                  ?__tdiv_to_l_ 0071  
                    sprintf@c 00B6                      sprintf@f 005B              ___lldiv@quotient 0020  
             _PWM2_Initialize 1539             USART_Write@txData 0071    __size_of_ADC_GetConversion 0019  
                 _USART_Write 1517  
